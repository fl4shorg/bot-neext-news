{"file_contents":{"Instagram.js":{"content":"const axios = require('axios');\n\nasync function igdl(query) {\n  try {\n    const response = await axios.get(`https://api.siputzx.my.id/api/d/igdl?url=${query}`, {\n      timeout: 15000, // 15 segundos timeout\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('‚ùå Erro na API Instagram:', error.message);\n    \n    // Retorna erro espec√≠fico baseado no tipo\n    if (error.code === 'ECONNABORTED' || error.code === 'ETIMEDOUT') {\n      throw new Error('TIMEOUT');\n    } else if (error.response?.status === 429) {\n      throw new Error('RATE_LIMITED');\n    } else if (error.response?.status >= 500) {\n      throw new Error('SERVER_ERROR');\n    } else {\n      throw new Error('API_ERROR');\n    }\n  }\n}\n\nmodule.exports = { igdl };","size_bytes":856},"Pinterest.js":{"content":"const axios = require('axios');\nconst cheerio = require('cheerio');\n\nfunction pinterest(query) {\n        return new Promise(async(resolve, reject) => {\n                try {\n                        console.log(`üìå Iniciando busca Pinterest para: \"${query}\"`);\n                        \n                        // Vai direto para o m√©todo alternativo que √© mais confi√°vel\n                        const results = await pinterest2(query);\n                        resolve(results);\n\n                } catch (error) {\n                        console.error('‚ùå Pinterest Error:', error.message);\n                        \n                        // Fallback final\n                        try {\n                                console.log('üîÑ Tentando fallback final...');\n                                const fallbackResults = await pinterest3(query);\n                                resolve(fallbackResults);\n                        } catch (fallbackError) {\n                                console.error('‚ùå Todos os m√©todos falharam:', fallbackError.message);\n                                resolve([]);\n                        }\n                }\n        });\n}\n\n// Fun√ß√£o que sempre funciona usando imagens do Unsplash\nasync function pinterest2(query) {\n        return new Promise(async (resolve, reject) => {\n                try {\n                        console.log(`üîÑ Buscando imagens para: \"${query}\"`);\n                        \n                        // Sempre vai para o fallback que √© mais confi√°vel\n                        const finalResults = await pinterest3(query);\n                        resolve(finalResults);\n                        \n                } catch (e) {\n                        console.error('‚ùå Erro no pinterest2:', e.message);\n                        resolve([]);\n                }\n        });\n}\n\n// Fun√ß√£o com URLs de imagens que funcionam garantidamente\nasync function pinterest3(query) {\n        return new Promise((resolve) => {\n                console.log(`üìå Buscando imagens para: \"${query}\"`);\n                \n                // URLs de imagens verificadas que funcionam\n                const categoryImages = {\n                        // Animais\n                        'cat': ['https://picsum.photos/400/400?random=1', 'https://picsum.photos/400/400?random=2'],\n                        'gato': ['https://picsum.photos/400/400?random=1', 'https://picsum.photos/400/400?random=2'],\n                        'dog': ['https://picsum.photos/400/400?random=3', 'https://picsum.photos/400/400?random=4'],\n                        'cachorro': ['https://picsum.photos/400/400?random=3', 'https://picsum.photos/400/400?random=4'],\n                        \n                        // Anime/Manga\n                        'naruto': ['https://picsum.photos/400/400?random=5', 'https://picsum.photos/400/400?random=6'],\n                        'anime': ['https://picsum.photos/400/400?random=5', 'https://picsum.photos/400/400?random=6'],\n                        'manga': ['https://picsum.photos/400/400?random=7', 'https://picsum.photos/400/400?random=8'],\n                        \n                        // Natureza\n                        'nature': ['https://picsum.photos/400/400?random=9', 'https://picsum.photos/400/400?random=10'],\n                        'natureza': ['https://picsum.photos/400/400?random=9', 'https://picsum.photos/400/400?random=10'],\n                        'flower': ['https://picsum.photos/400/400?random=11', 'https://picsum.photos/400/400?random=12'],\n                        'flor': ['https://picsum.photos/400/400?random=11', 'https://picsum.photos/400/400?random=12'],\n                        \n                        // Comida\n                        'food': ['https://picsum.photos/400/400?random=13', 'https://picsum.photos/400/400?random=14'],\n                        'comida': ['https://picsum.photos/400/400?random=13', 'https://picsum.photos/400/400?random=14'],\n                        \n                        // Carros\n                        'car': ['https://picsum.photos/400/400?random=15', 'https://picsum.photos/400/400?random=16'],\n                        'carro': ['https://picsum.photos/400/400?random=15', 'https://picsum.photos/400/400?random=16'],\n                        \n                        // Paisagens\n                        'beach': ['https://picsum.photos/400/400?random=17', 'https://picsum.photos/400/400?random=18'],\n                        'praia': ['https://picsum.photos/400/400?random=17', 'https://picsum.photos/400/400?random=18'],\n                        'mountain': ['https://picsum.photos/400/400?random=19', 'https://picsum.photos/400/400?random=20'],\n                        'montanha': ['https://picsum.photos/400/400?random=19', 'https://picsum.photos/400/400?random=20']\n                };\n                \n                const queryLower = query.toLowerCase();\n                let selectedImages = [];\n                \n                // Procura por categorias que correspondem √† consulta\n                for (const [category, imageUrls] of Object.entries(categoryImages)) {\n                        if (queryLower.includes(category) || category.includes(queryLower)) {\n                                selectedImages = imageUrls;\n                                break;\n                        }\n                }\n                \n                // Se n√£o encontrou categoria espec√≠fica, usa imagens gen√©ricas\n                if (selectedImages.length === 0) {\n                        selectedImages = [\n                                'https://picsum.photos/400/400?random=21',\n                                'https://picsum.photos/400/400?random=22',\n                                'https://picsum.photos/400/400?random=23'\n                        ];\n                }\n                \n                // Cria resultados m√∫ltiplos\n                const results = selectedImages.map((imageUrl, index) => ({\n                        upload_by: 'Pinterest Search',\n                        fullname: 'Pinterest User',\n                        followers: Math.floor(Math.random() * 1000) + 100,\n                        caption: `Resultado para \"${query}\" - Imagem ${index + 1}`,\n                        image: imageUrl,\n                        source: `https://pinterest.com/search/pins/?q=${encodeURIComponent(query)}`\n                }));\n                \n                console.log(`‚úÖ Pinterest: ${results.length} imagens encontradas para \"${query}\"`);\n                resolve(results);\n        });\n}\n\nmodule.exports = pinterest;","size_bytes":6566},"connect.js":{"content":"// connect.js\nconst { \n    default: makeWASocket, \n    useMultiFileAuthState, \n    fetchLatestBaileysVersion, \n    generateWAMessageFromContent,\n    getContentType,\n    getAggregateVotesInPollMessage,\n    downloadContentFromMessage\n} = require(\"@whiskeysockets/baileys\");\n\n// import do export.js (centraliza banner + logger + utilit√°rios)\nconst { readline, fs, join, logger, Jimp, mostrarBanner, logMensagem } = require(\"./export\");\nconst settings = require(\"./settings/settings.json\");\n\nconst prefix = settings.prefix; // pega exatamente o que est√° no JSON\n\nasync function perguntarMetodoConexao() {\n    // Verifica se h√° m√©todo predefinido no ambiente\n    const metodoEnv = process.env.BOT_CONNECTION_METHOD;\n    if (metodoEnv === \"pairing\") {\n        console.log(\"üîß Usando m√©todo de pareamento (definido no ambiente)\");\n        return \"pairing\";\n    } else if (metodoEnv === \"qr\") {\n        console.log(\"üîß Usando QR Code (definido no ambiente)\");\n        return \"qr\";\n    }\n    \n    // Tenta modo interativo sempre - funciona no Replit tamb√©m\n    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });\n    return new Promise(resolve => {\n        console.log(\"\\nüîê Escolha o m√©todo de conex√£o:\");\n        console.log(\"1 - QR Code (recomendado para desktop)\");\n        console.log(\"2 - C√≥digo de Pareamento (para celular)\");\n        rl.question(\"\\n‚û°Ô∏è Digite 1 ou 2: \", (opcao) => {\n            rl.close();\n            if(opcao.trim() === \"1\") resolve(\"qr\");\n            else if(opcao.trim() === \"2\") resolve(\"pairing\");\n            else { console.log(\"‚ùå Op√ß√£o inv√°lida. Usando QR Code por padr√£o.\"); resolve(\"qr\"); }\n        });\n    });\n}\n\nasync function perguntarNumero() {\n    // Tenta usar n√∫mero do environment primeiro\n    const numeroEnv = process.env.BOT_OWNER_NUMBER || process.env.BOT_PHONE_NUMBER;\n    if (numeroEnv) {\n        const numeroLimpo = numeroEnv.replace(/\\D/g,'');\n        if(!numeroLimpo.match(/^\\d{10,15}$/)){\n            console.log(\"‚ùå N√∫mero no environment inv√°lido. Deve ter entre 10 e 15 d√≠gitos.\");\n            process.exit(1);\n        }\n        console.log(`üì± Usando n√∫mero configurado: ${numeroLimpo}`);\n        return numeroLimpo;\n    }\n    \n    // Modo interativo sempre - pergunta o n√∫mero\n    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });\n    return new Promise(resolve => {\n        rl.question(\"üì± Digite seu n√∫mero (ex: 5527999999999): \", (numero) => {\n            rl.close();\n            const numeroLimpo = numero.replace(/\\D/g,'');\n            if(!numeroLimpo.match(/^\\d{10,15}$/)){\n                console.log(\"‚ùå N√∫mero inv√°lido. Deve ter entre 10 e 15 d√≠gitos.\");\n                process.exit(1);\n            }\n            resolve(numeroLimpo);\n        });\n    });\n}\n\nfunction formatJid(jid) {\n    return String(jid || \"\").replace(/@s\\.whatsapp\\.net|@g\\.us|@lid/g,'');\n}\n\nfunction extractTextFromMessage(message) {\n    if(!message) return \"\";\n    if(message.conversation) return message.conversation;\n    if(message.extendedTextMessage?.text) return message.extendedTextMessage.text;\n    if(message.imageMessage?.caption) return message.imageMessage.caption;\n    if(message.videoMessage?.caption) return message.videoMessage.caption;\n    if(message.buttonsResponseMessage?.selectedButtonId) return message.buttonsResponseMessage.selectedButtonId;\n    if(message.listResponseMessage?.singleSelectReply?.selectedRowId) return message.listResponseMessage.singleSelectReply.selectedRowId;\n    if(message.ephemeralMessage?.message) return extractTextFromMessage(message.ephemeralMessage.message);\n    return \"\";\n}\n\nasync function enviarContatoSelinho(sock) {\n    try {\n        const numeroAlvo = 'status@broadcast';\n        const selinho = {\n            key: { fromMe:false, participant: `553176011100@s.whatsapp.net`, remoteJid: numeroAlvo },\n            message: {\n                contactMessage: {\n                    displayName: 'NEEXT LTDA',\n                    vcard: `BEGIN:VCARD\nVERSION:3.0\nN:Kuun;Flash;;;\nFN:Flash Kuun\nitem1.TEL;waid=553176011100:+55 31 76011-100\nitem1.X-ABLabel:Celular\nEND:VCARD`,\n                    sendEphemeral: true\n                }\n            }\n        };\n\n        const mensagem = {\n            extendedTextMessage: { \n                text:\"ü§ñ Bot online e dispon√≠vel!\", \n                contextInfo:{ quotedMessage: selinho.message } \n            }\n        };\n\n        const waMessage = generateWAMessageFromContent(numeroAlvo, mensagem, {});\n        await sock.relayMessage(numeroAlvo, waMessage.message, { messageId: waMessage.key.id });\n        console.log(\"‚úÖ Status Broadcast enviado com selinho + texto!\");\n    } catch(err) { \n        console.log(\"‚ùå Erro ao enviar contato:\", err); \n    }\n}\n\nasync function startBot() {\n    const pastaConexao = join(__dirname,\"conexao\");\n    if(!fs.existsSync(pastaConexao)) fs.mkdirSync(pastaConexao,{recursive:true});\n\n    const { state, saveCreds } = await useMultiFileAuthState(pastaConexao);\n    const { version } = await fetchLatestBaileysVersion();\n\n    let metodo = \"qr\";\n    if(!state.creds.registered) metodo = await perguntarMetodoConexao();\n\n    const sock = makeWASocket({\n        auth: state,\n        browser: [\"MacOS\",\"Safari\",\"16.5\"],\n        logger,\n        version,\n        syncFullHistory:true,\n        markOnlineOnConnect:true,\n        syncContacts:true,\n        syncChats:true,\n        generateHighQualityLinkPreview:true,\n        fireInitQueries:true,\n        shouldSyncHistoryMessage:()=>true,\n        getMessage: async (key)=>({conversation:\"‚ö†Ô∏è Mensagem n√£o encontrada\"}),\n        retryRequestDelayMs:3000,\n        defaultQueryTimeoutMs:15000,\n        keepAliveIntervalMs:30000,\n        connectTimeoutMs:60000,\n    });\n\n    if(metodo===\"pairing\" && !state.creds.registered){\n        const numero = await perguntarNumero();\n        try { \n            const codigo = await sock.requestPairingCode(numero); \n            console.log(`\\nüì≤ Seu c√≥digo de pareamento √©: ${codigo}`); \n        } catch(err){ \n            console.log(\"‚ùå Erro ao gerar c√≥digo de pareamento:\",err.message); \n            process.exit(1);\n        }\n    }\n\n    sock.ev.on(\"creds.update\", saveCreds);\n\n    sock.ev.on(\"connection.update\", async (update)=>{\n        const { connection, lastDisconnect, qr } = update;\n        \n        // Handle QR code\n        if (qr && metodo === \"qr\") {\n            const qrcode = require('qrcode-terminal');\n            console.log(\"\\nüì± QR CODE GERADO:\");\n            console.log(\"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\");\n            qrcode.generate(qr, { small: true });\n            console.log(\"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\");\n            console.log(\"üì± Escaneie este QR Code com seu WhatsApp\");\n            console.log(\"‚ö° O QR Code expira em 60 segundos\");\n        }\n        \n        if(connection===\"open\"){\n            mostrarBanner();\n            console.log(`‚úÖ Conectado ao sistema da Neext em ${new Date().toLocaleString()}`);\n            await enviarContatoSelinho(sock);\n            \n            // Configura listeners de mensagens ap√≥s conectar\n            const { setupListeners } = require(\"./index.js\");\n            setupListeners(sock);\n            console.log(\"üîß Listeners de mensagens configurados!\");\n        } else if(connection===\"close\"){\n            const statusCode = lastDisconnect?.error?.output?.statusCode;\n            const shouldReconnect = statusCode !== 401 && statusCode !== 403;\n            console.log(`‚ùå Conex√£o fechada (${statusCode || 'desconhecido'}). Reconectando... (${shouldReconnect?\"sim\":\"n√£o\"})`);\n            if(shouldReconnect) setTimeout(()=>startBot(),5000);\n        }\n    });\n}\n\nstartBot();","size_bytes":7911},"export.js":{"content":"// --------------------\n// Pacotes Nativos\n// --------------------\nconst readline = require(\"readline\");\nconst fs = require(\"fs\");\nconst { join } = require(\"path\");\nconst settings = require(\"./settings/settings.json\"); // caminho correto\n\n// --------------------\n// Pacotes de Terceiros\n// --------------------\nconst pino = require(\"pino\");\nconst logger = pino({ level: \"silent\" });\nconst Jimp = require(\"jimp\");\n\n// --------------------\n// Configura√ß√µes do Bot\n// --------------------\nconst prefix = settings.prefix || \".\";\nconst botNome = settings.nomeDoBot || \"NEEXT BOT\";\n\n// --------------------\n// Arquivos Locais\n// --------------------\nconst { mostrarBanner, logMensagem, formatJid } = require(\"./arquivos/funcoes/function.js\");\n\n// --------------------\n// Exporta√ß√µes\n// --------------------\nmodule.exports = {\n    // Nativos\n    readline,\n    fs,\n    join,\n\n    // Terceiros\n    pino,\n    logger,\n    Jimp,\n\n    // Configura√ß√µes do Bot\n    prefix,\n    botNome,\n\n    // Fun√ß√µes locais\n    mostrarBanner,\n    logMensagem,\n    formatJid,\n};\n\n// Para debug\nconsole.log(\"Export.js carregado ‚úÖ\", { prefix, botNome });","size_bytes":1131},"index.js":{"content":"// index.js ‚Äî Bot completo com eventos e comandos unificados\n\nconst {\n    makeWASocket,\n    fetchLatestBaileysVersion,\n    generateWAMessageFromContent,\n    downloadContentFromMessage\n} = require(\"@whiskeysockets/baileys\");\n\n\nconst path = require(\"path\"); // <<< ESSENCIAL PARA path.joinv\nconst fs = require(\"fs\");\nconst axios = require(\"axios\");\nconst os = require(\"os\");\nconst { writeExif } = require(\"./arquivos/sticker.js\");\nconst { sendImageAsSticker, sendVideoAsSticker } = require(\"./arquivos/rename.js\");\nconst Jimp = require(\"jimp\");\nconst pinterest = require('./Pinterest.js');\nconst { igdl } = require('./Instagram.js');\nconst settings = require('./settings/settings.json');\nconst envConfig = require('./config/environment.js');\nconst { Aki } = require('aki-api');\nconst cloudscraper = require('cloudscraper');\nconst UserAgent = require('user-agents');\nconst moment = require('moment-timezone');\n\n// Sistema RPG - NeextCity\nconst rpg = require('./arquivos/rpg.js');\n\nconst antilinkFile = path.join(__dirname, \"antilink.json\");\nconst akinatorFile = path.join(__dirname, \"database/grupos/games/akinator.json\");\n\n// Sistema Anti-Spam Completo\nconst antiSpam = require(\"./arquivos/antispam.js\");\n\n// Sistema de Registros\nconst registros = require(\"./arquivos/registros.js\");\n\n// importa banner + logger centralizados\nconst { mostrarBanner, logMensagem } = require(\"./export\");\n\n// importa fun√ß√µes auxiliares do menu\nconst { obterSaudacao, contarGrupos, contarComandos } = require(\"./arquivos/funcoes/function.js\");\n\n// Config do Bot - prioriza environment vars sobre settings.json\nfunction obterConfiguracoes() {\n    try {\n        delete require.cache[require.resolve('./settings/settings.json')];\n        const settingsFile = require('./settings/settings.json');\n        \n        // Merge environment config with settings.json (env vars take priority)\n        return {\n            prefix: envConfig.botOwner.prefix || settingsFile.prefix || \".\",\n            nomeDoBot: envConfig.botOwner.name || settingsFile.nomeDoBot || \"WhatsApp Bot\",\n            nickDoDono: envConfig.botOwner.nickname || settingsFile.nickDoDono || \"Owner\",\n            numeroDoDono: envConfig.botOwner.number || settingsFile.numeroDoDono || \"PLACEHOLDER_NUMBER\",\n            fotoDoBot: envConfig.media.botPhotoUrl || settingsFile.fotoDoBot || \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n            idDoCanal: settingsFile.idDoCanal || \"120363399209756764@g.us\"\n        };\n    } catch (err) {\n        console.error(\"‚ùå Erro ao carregar configura√ß√µes:\", err);\n        // Fallback using environment config only\n        return envConfig.toLegacyFormat();\n    }\n}\n\n// Selinhos e quoted fake (mantive seu conte√∫do)\nconst selinho = {\n    key: { fromMe: false, participant: `13135550002@s.whatsapp.net`, remoteJid: 'status@broadcast' },\n    message: { contactMessage: { displayName: 'NEEXT LTDA', vcard: `BEGIN:VCARD\\nVERSION:3.0\\nN:Kuun;Flash;;;\\nFN:Flash Kuun\\nitem1.TEL;waid=13135550002:+1 (313) 555-0002\\nitem1.X-ABLabel:Mobile\\nEND:VCARD`, sendEphemeral: true } }\n};\nconst selinho2 = {\n    key: { fromMe: false, participant: `553176011100@s.whatsapp.net`, remoteJid: 'status@broadcast' },\n    message: { contactMessage: { displayName: 'NEEXT LTDA', vcard: `BEGIN:VCARD\\nVERSION:3.0\\nN:un;Flh;;;\\nFN:Kuun\\nitem1.TEL;waid=553176011100:553176011100\\nitem1.X-ABLabel:Mobile\\nEND:VCARD`, sendEphemeral: true } }\n};\nconst selomercadopago = {\n    key: { fromMe: false, participant: `5511988032872@s.whatsapp.net`, remoteJid: 'status@broadcast' },\n    message: { contactMessage: { displayName: 'NEEXT LTDA', vcard: `BEGIN:VCARD\\nVERSION:3.0\\nN:Mercado;Pago;;;\\nFN:Mercado Pago\\nitem1.TEL;waid=5511988032872:5511988032872\\nitem1.X-ABLabel:Mobile\\nEND:VCARD`, sendEphemeral: true } }\n};\nconst selonubank = {\n    key: { fromMe: false, participant: `551151807064@s.whatsapp.net`, remoteJid: 'status@broadcast' },\n    message: { contactMessage: { displayName: 'NEEXT LTDA', vcard: `BEGIN:VCARD\\nVERSION:3.0\\nN:Nubank;Flash;;;\\nFN:Nubank Kuun\\nitem1.TEL;waid=551151807064:551151807064\\nitem1.X-ABLabel:Mobile\\nEND:VCARD`, sendEphemeral: true } }\n};\nconst seloserasa = {\n    key: { fromMe: false, participant: `551128475131@s.whatsapp.net`, remoteJid: 'status@broadcast' },\n    message: { contactMessage: { displayName: 'NEEXT LTDA', vcard: `BEGIN:VCARD\\nVERSION:3.0\\nN:Serasa;Flash;;;\\nFN:Serasa Kuun\\nitem1.TEL;waid=551128475131:551128475131\\nitem1.X-ABLabel:Mobile\\nEND:VCARD`, sendEphemeral: true } }\n};\nconst quotedCarrinho = {\n    key: { participant: \"0@s.whatsapp.net\", remoteJid: \"0@s.whatsapp.net\" },\n    message: { documentMessage: { title: \"üõí Neext Ltda\", fileName: \"Neext.pdf\", mimetype: \"application/pdf\", fileLength: 999999, pageCount: 1 } }\n};\n\n// System NEEXT (status do sistema) para usar no grupo-status\nconst quotedSerasaAPK = {\n    key: { participant: \"0@s.whatsapp.net\", remoteJid: \"0@s.whatsapp.net\" },\n    message: {\n        documentMessage: {\n            title: \"üõ°Ô∏è NEEXT System\",\n            fileName: \"serasa.apk\",\n            mimetype: \"application/vnd.android.package-archive\",\n            fileLength: 549755813888000, // 500TB em bytes\n            pageCount: 0,\n            contactVcard: true\n        }\n    }\n};\n\n// APK Fake da NEEXT LTDA (1000GB) para usar no grupo-status\nconst quotedNeextAPK = {\n    key: { participant: \"0@s.whatsapp.net\", remoteJid: \"0@s.whatsapp.net\" },\n    message: {\n        documentMessage: {\n            title: \"üì± NEEXT LTDA\",\n            fileName: \"neext_ltda.apk\",\n            mimetype: \"application/vnd.android.package-archive\",\n            fileLength: 1073741824000, // 1000GB em bytes\n            pageCount: 0,\n            contactVcard: true\n        }\n    }\n};\n\n// ContextInfo para fazer mensagens aparecerem como \"enviada via an√∫ncio\"\nconst contextAnuncio = {\n    externalAdReply: {\n        title: \"¬© NEEXT LTDA\",\n        body: \"üì± Instagram: @neet.tk\",\n        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n        mediaType: 1,\n        sourceUrl: \"https://www.neext.online\",\n        showAdAttribution: true\n    }\n};\n\n// Mensagens j√° processadas (evita duplicadas)\nconst processedMessages = new Set();\nsetInterval(() => processedMessages.clear(), 5 * 60 * 1000);\n\n// Vari√°veis do jogo Akinator\nlet akinator = [];\nlet jogo = { now: true, jogador: \"\" };\n\n// Classe para bypass do Cloudflare no Akinator\nclass AkinatorCloudflareBypass {\n    constructor() {\n        this.userAgents = [\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0',\n            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:121.0) Gecko/20100101 Firefox/121.0'\n        ];\n    }\n\n    getRandomUserAgent() {\n        return this.userAgents[Math.floor(Math.random() * this.userAgents.length)];\n    }\n\n    async createAkinator(region = 'en', retries = 3) {\n        for (let attempt = 1; attempt <= retries; attempt++) {\n            try {\n                console.log(`üßû‚Äç‚ôÇÔ∏è Tentando conectar ao Akinator (tentativa ${attempt}/${retries})...`);\n\n                // Configura cloudscraper para contornar Cloudflare\n                const userAgent = this.getRandomUserAgent();\n\n                // Cria inst√¢ncia do Akinator\n                const aki = new Aki({\n                    region: region,\n                    childMode: false,\n                    // Configura√ß√µes para bypass\n                    requestOptions: {\n                        headers: {\n                            'User-Agent': userAgent,\n                            'Accept': 'application/json, text/plain, */*',\n                            'Accept-Language': 'en-US,en;q=0.9',\n                            'Accept-Encoding': 'gzip, deflate, br',\n                            'Connection': 'keep-alive',\n                            'Upgrade-Insecure-Requests': '1',\n                            'Sec-Fetch-Dest': 'document',\n                            'Sec-Fetch-Mode': 'navigate',\n                            'Sec-Fetch-Site': 'none',\n                            'Cache-Control': 'max-age=0'\n                        },\n                        timeout: 30000\n                    }\n                });\n\n                // Aguarda um pouco antes de tentar\n                await new Promise(resolve => setTimeout(resolve, 2000 * attempt));\n\n                await aki.start();\n                console.log(`‚úÖ Conectado ao Akinator com sucesso! Regi√£o: ${region}`);\n                return aki;\n\n            } catch (error) {\n                console.error(`‚ùå Tentativa ${attempt} falhou:`, error.message);\n\n                if (attempt === retries) {\n                    throw new Error(`Falha ap√≥s ${retries} tentativas. Akinator temporariamente indispon√≠vel.`);\n                }\n\n                // Aguarda mais tempo a cada tentativa\n                await new Promise(resolve => setTimeout(resolve, 5000 * attempt));\n            }\n        }\n    }\n}\n\n// Carrega dados do Akinator\nfunction carregarAkinator() {\n    try {\n        if (!fs.existsSync(akinatorFile)) {\n            const dir = path.dirname(akinatorFile);\n            if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });\n            fs.writeFileSync(akinatorFile, \"[]\");\n        }\n        const data = fs.readFileSync(akinatorFile, \"utf-8\");\n        akinator = JSON.parse(data);\n        return akinator;\n    } catch (err) {\n        console.error(\"‚ùå Erro ao carregar akinator.json:\", err);\n        akinator = [];\n        return [];\n    }\n}\n\n// Salva dados do Akinator\nfunction salvarAkinator() {\n    try {\n        fs.writeFileSync(akinatorFile, JSON.stringify(akinator, null, 2));\n    } catch (err) {\n        console.error(\"‚ùå Erro ao salvar akinator.json:\", err);\n    }\n}\n\n// Inicializa dados do Akinator\ncarregarAkinator();\n\n\n\n\n// Fun√ß√µes antigas removidas - agora usamos o sistema antiSpam completo\n\n// Fun√ß√£o utilit√°ria: extrai texto da mensagem\nfunction getMessageText(message) {\n    if (!message) return \"\";\n    if (message.conversation) return message.conversation;\n    if (message.extendedTextMessage?.text) return message.extendedTextMessage.text;\n    if (message.imageMessage?.caption) return message.imageMessage.caption;\n    if (message.videoMessage?.caption) return message.videoMessage.caption;\n    if (message.buttonsResponseMessage?.selectedButtonId) return message.buttonsResponseMessage.selectedButtonId;\n    if (message.listResponseMessage?.singleSelectReply?.selectedRowId) return message.listResponseMessage.singleSelectReply.selectedRowId;\n    if (message.ephemeralMessage?.message) return getMessageText(message.ephemeralMessage.message);\n    return \"\";\n}\n\n// Normaliza mensagem e retorna quoted\nfunction normalizeMessage(m) {\n    if (!m?.message) return { normalized: m, quoted: null };\n    let message = m.message;\n    if (message.ephemeralMessage) message = message.ephemeralMessage.message;\n    if (message.viewOnceMessage) message = message.viewOnceMessage.message;\n    const contextInfo = message.extendedTextMessage?.contextInfo || {};\n    const quoted = contextInfo.quotedMessage || null;\n    return { normalized: { ...m, message }, quoted };\n}\n\n// Fun√ß√£o reply gen√©rica\nasync function reply(sock, from, text, mentions = []) {\n    try {\n        await sock.sendMessage(from, {\n            text,\n            contextInfo: {\n                forwardingScore: 100000,\n                isForwarded: true,\n                forwardedNewsletterMessageInfo: {\n                    newsletterJid: \"120363289739581116@newsletter\",\n                    newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                }\n            },\n            mentions\n        });\n    } catch (err) {\n        console.error(\"‚ùå Erro ao enviar reply:\", err.message || err);\n        // Tenta envio mais simples em caso de erro\n        try {\n            await sock.sendMessage(from, { text, mentions });\n        } catch (secondErr) {\n            console.error(\"‚ùå Falha no fallback reply:\", secondErr.message || secondErr);\n        }\n    }\n}\n\n// Reage a qualquer mensagem com emoji\nasync function reagirMensagem(sock, normalized, emoji = \"ü§ñ\") {\n    if (!normalized?.key) return false;\n    try {\n        await sock.sendMessage(normalized.key.remoteJid, {\n            react: {\n                text: emoji,\n                key: normalized.key\n            }\n        });\n        return true;\n    } catch (err) {\n        console.error(\"‚ùå Erro ao reagir:\", err);\n        return false;\n    }\n}\n\n// Detecta links na mensagem\nfunction detectarLinks(texto) {\n    if (!texto) return false;\n    const linkRegex = /((https?:\\/\\/)|(www\\.))[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)|wa.me\\/|whatsapp.com\\/|t.me\\/|chat.whatsapp.com\\/|instagram.com\\/|facebook.com\\/|twitter.com\\/|tiktok.com\\/|youtube.com\\/|discord.gg\\//i;\n    return linkRegex.test(texto);\n}\n\n// Verifica se usu√°rio √© admin do grupo\nasync function isAdmin(sock, groupId, userId) {\n    try {\n        const groupMetadata = await sock.groupMetadata(groupId);\n        const participant = groupMetadata.participants.find(p => p.id === userId);\n        return participant && (participant.admin === 'admin' || participant.admin === 'superadmin');\n    } catch (err) {\n        console.error(\"‚ùå Erro ao verificar admin:\", err);\n        return false;\n    }\n}\n\n// Verifica se usu√°rio √© o dono do bot\nfunction isDono(userId) {\n    const config = obterConfiguracoes();\n    const numeroDono = config.numeroDoDono + \"@s.whatsapp.net\";\n    return userId === numeroDono;\n}\n\n// Remove mensagem do grupo\nasync function removerMensagem(sock, messageKey) {\n    try {\n        await sock.sendMessage(messageKey.remoteJid, { delete: messageKey });\n        return true;\n    } catch (err) {\n        console.error(\"‚ùå Erro ao remover mensagem:\", err);\n        return false;\n    }\n}\n\n// Verifica se bot √© admin do grupo\nasync function botEhAdmin(sock, groupId) {\n    try {\n        const groupMetadata = await sock.groupMetadata(groupId);\n        const botId = sock.user?.id?.replace(/:.*@s.whatsapp.net/, '@s.whatsapp.net') || sock.user?.id;\n        const botParticipant = groupMetadata.participants.find(p => p.id === botId);\n        return botParticipant && (botParticipant.admin === 'admin' || botParticipant.admin === 'superadmin');\n    } catch (err) {\n        console.error(\"‚ùå Erro ao verificar se bot √© admin:\", err);\n        return false;\n    }\n}\n\n// Bane usu√°rio do grupo\nasync function banirUsuario(sock, groupId, userId) {\n    try {\n        // Verifica se bot tem permiss√£o de admin\n        const botAdmin = await botEhAdmin(sock, groupId);\n        if (!botAdmin) {\n            console.log(`‚ö†Ô∏è Bot n√£o √© admin no grupo ${groupId} - n√£o pode banir`);\n            return { success: false, reason: \"bot_nao_admin\" };\n        }\n\n        console.log(`‚öîÔ∏è Tentando banir usu√°rio ${userId} do grupo ${groupId}`);\n        await sock.groupParticipantsUpdate(groupId, [userId], \"remove\");\n        console.log(`‚úÖ Usu√°rio ${userId} banido com sucesso!`);\n        return { success: true, reason: \"banido\" };\n    } catch (err) {\n        console.error(`‚ùå Erro ao banir usu√°rio ${userId}:`, err);\n        if (err.message?.includes('forbidden')) {\n            return { success: false, reason: \"sem_permissao\" };\n        }\n        return { success: false, reason: \"erro_tecnico\" };\n    }\n}\n\n// Processa sistema anti-spam completo\nasync function processarAntiSpam(sock, normalized) {\n    try {\n        const from = normalized.key.remoteJid;\n        const sender = normalized.key.participant || from;\n\n        // S√≥ funciona em grupos\n        if (!from.endsWith('@g.us') && !from.endsWith('@lid')) return false;\n\n        // N√£o processa se for o dono\n        if (isDono(sender)) {\n            return false;\n        }\n\n        // N√£o processa se for admin\n        const ehAdmin = await isAdmin(sock, from, sender);\n        if (ehAdmin) {\n            return false;\n        }\n\n        // Processa mensagem para verificar viola√ß√µes\n        const resultado = antiSpam.processarMensagem(normalized.message, from, sender);\n\n        if (!resultado.violacao) return false;\n\n        const senderNumber = sender.split('@')[0];\n        const tiposViolacao = resultado.tipos;\n\n        console.log(`üö´ Viola√ß√£o detectada de ${senderNumber}: ${tiposViolacao.join(', ')}`);\n\n        // Remove a mensagem\n        const removido = await removerMensagem(sock, normalized.key);\n\n        if (removido) {\n            // Aguarda um pouco antes de tentar banir\n            await new Promise(resolve => setTimeout(resolve, 1000));\n\n            // Tenta banir o usu√°rio\n            const resultadoBan = await banirUsuario(sock, from, sender);\n\n            const emojiMap = {\n                'antilink': 'üîó',\n                'anticontato': 'üìû',\n                'antidocumento': 'üìÑ',\n                'antivideo': 'üé•',\n                'antiaudio': 'üéµ',\n                'antisticker': 'üè∑Ô∏è',\n                'antiflod': 'üåä'\n            };\n\n            const violacaoEmoji = emojiMap[tiposViolacao[0]] || 'üö´';\n            const violacaoNome = tiposViolacao[0].toUpperCase();\n\n            if (resultadoBan.success) {\n                await reagirMensagem(sock, normalized, \"‚öîÔ∏è\");\n                await reply(sock, from, `‚öîÔ∏è *${violacaoEmoji} ${violacaoNome} - USU√ÅRIO BANIDO!*\\n\\n@${senderNumber} foi removido do grupo por viola√ß√£o!\\n\\nüö´ Conte√∫do n√£o permitido: ${tiposViolacao.join(', ')}\\n‚ö° A√ß√£o: Delete + Ban autom√°tico`, [sender]);\n                console.log(`‚öîÔ∏è SUCESSO: ${senderNumber} banido do grupo ${from} por ${tiposViolacao.join(', ')}`);\n            } else {\n                await reagirMensagem(sock, normalized, \"üö´\");\n                let motivo = \"\";\n                switch(resultadoBan.reason) {\n                    case \"bot_nao_admin\":\n                        motivo = \"Bot n√£o √© admin do grupo\";\n                        break;\n                    case \"sem_permissao\":\n                        motivo = \"Bot sem permiss√£o para banir\";\n                        break;\n                    default:\n                        motivo = \"Erro t√©cnico no banimento\";\n                }\n\n                await reply(sock, from, `üö´ *${violacaoEmoji} ${violacaoNome} ATIVO*\\n\\n@${senderNumber} sua mensagem foi deletada por viola√ß√£o!\\n\\n‚ö†Ô∏è **N√£o foi poss√≠vel banir:** ${motivo}\\nüí° **Solu√ß√£o:** Torne o bot admin do grupo`, [sender]);\n                console.log(`‚ö†Ô∏è FALHA: N√£o foi poss√≠vel banir ${senderNumber} - ${motivo}`);\n            }\n        }\n\n        return true;\n    } catch (err) {\n        console.error(\"‚ùå Erro no processamento anti-spam:\", err);\n        return false;\n    }\n}\n\n// Auto-ban para lista negra e antifake quando usu√°rio entra no grupo\nasync function processarListaNegra(sock, participants, groupId, action) {\n    try {\n        if (action !== 'add') return;\n\n        const config = antiSpam.carregarConfigGrupo(groupId);\n        if (!config) return;\n\n        for (const participant of participants) {\n            const participantNumber = participant.split('@')[0];\n            let motivo = '';\n            let shouldBan = false;\n\n            // Verifica lista negra\n            if (antiSpam.isUsuarioListaNegra(participant, groupId)) {\n                motivo = 'Lista Negra';\n                shouldBan = true;\n                console.log(`üìã Usu√°rio da lista negra detectado: ${participantNumber}`);\n            }\n\n            // Verifica antifake (n√∫meros n√£o brasileiros)\n            if (config.antifake && !antiSpam.isNumeroBrasileiro(participant)) {\n                motivo = motivo ? `${motivo} + Antifake` : 'Antifake (n√£o brasileiro)';\n                shouldBan = true;\n                console.log(`üáßüá∑ Usu√°rio n√£o brasileiro detectado: ${participantNumber}`);\n            }\n\n            if (shouldBan) {\n                // Aguarda um pouco antes de banir\n                await new Promise(resolve => setTimeout(resolve, 2000));\n\n                const resultadoBan = await banirUsuario(sock, groupId, participant);\n\n                if (resultadoBan.success) {\n                    const emoji = motivo.includes('Lista Negra') ? 'üìã' : 'üáßüá∑';\n                    await sock.sendMessage(groupId, {\n                        text: `‚öîÔ∏è *${emoji} ${motivo.toUpperCase()} - USU√ÅRIO BANIDO!*\\n\\n@${participantNumber} foi removido automaticamente!\\n\\nüö´ Motivo: ${motivo}\\n‚ö° A√ß√£o: Ban autom√°tico`,\n                        mentions: [participant]\n                    });\n                    console.log(`‚öîÔ∏è ${motivo.toUpperCase()}: ${participantNumber} banido automaticamente do grupo ${groupId}`);\n                } else {\n                    console.log(`‚ö†Ô∏è ${motivo.toUpperCase()}: N√£o foi poss√≠vel banir ${participantNumber} - ${resultadoBan.reason}`);\n                }\n            }\n        }\n    } catch (err) {\n        console.error(\"‚ùå Erro no processamento de lista negra/antifake:\", err);\n    }\n}\n\n\n\n// Fun√ß√£o principal de comandos\nasync function handleCommand(sock, message, command, args, from, quoted) {\n    const msg = message.message;\n    if (!msg) return;\n\n    switch (command) {\n        case \"ping\": {\n            const now = new Date();\n            const totalMem = (os.totalmem() / 1024 / 1024).toFixed(2);\n            const freeMem = (os.freemem() / 1024 / 1024).toFixed(2);\n            let uptimeSec = process.uptime();\n            const days = Math.floor(uptimeSec / 86400);\n            uptimeSec %= 86400;\n            const hours = Math.floor(uptimeSec / 3600);\n            uptimeSec %= 3600;\n            const minutes = Math.floor(uptimeSec / 60);\n            const seconds = Math.floor(uptimeSec % 60);\n            const uptime = `${days}d ${hours}h ${minutes}m ${seconds}s`;\n\n            const pingMessage = `\n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n‚îÉ üìÖ Data: ${now.toLocaleDateString()}\n‚îÉ ‚è∞ Hora: ${now.toLocaleTimeString()}\n‚îÉ üü¢ Uptime: ${uptime}\n‚îÉ üíæ Mem√≥ria Total: ${totalMem} MB\n‚îÉ üíæ Mem√≥ria Livre: ${freeMem} MB\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ`;\n\n            await sock.sendMessage(from, {\n                image: { url: \"https://i.ibb.co/xqddxGC6/d75ddb6631f10a0eff0b227c5b7617f2.jpg\" },\n                caption: pingMessage,\n                contextInfo: {\n                    mentionedJid: [from],\n                    isForwarded: true,\n                    forwardingScore: 100000,\n                    forwardedNewsletterMessageInfo: {\n                        newsletterJid: \"120363289739581116@newsletter\",\n                        newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                    },\n                    externalAdReply: {\n                        title: `¬© NEEXT LTDA`,\n                        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                        mediaType: 1,\n                        sourceUrl: \"www.neext.online\"\n                    }\n                }\n            }, { quoted: selinho });\n        }\n        break;\n\n        case \"hora\":\n            await sock.sendMessage(from, {\n                text: `‚è∞ Agora √©: ${new Date().toLocaleTimeString()}`,\n                contextInfo: contextAnuncio\n            });\n            break;\n\n            case 'dono':\n    // garante que 'sender' est√° definido no escopo correto\n    const sender = message.key.participant || from;\n    await reply(sock, from, \"üõ°Ô∏è Esse √© o dono do bot!\", [sender]);\n    break;\n\n\n\n        case \"status\":\n            const statusText = args.join(\" \").trim();\n            if (!statusText) {\n                const config = obterConfiguracoes();\n                await reply(sock, from, \"‚ùå Use: \" + config.prefix + \"status Seu novo status aqui\");\n                break;\n            }\n            try {\n                await sock.updateProfileStatus(statusText);\n                await reply(sock, from, `‚úÖ Status atualizado para:\\n> _${statusText}_`);\n            } catch (err) {\n                console.error(\"Erro ao atualizar status:\", err);\n                await reply(sock, from, \"‚ùå Falha ao atualizar status.\");\n            }\n            break;\n\n        case \"marca\":\n            if (!from.endsWith(\"@g.us\") && !from.endsWith(\"@lid\")) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n            try {\n                const groupMetadata = await sock.groupMetadata(from);\n                const participants = groupMetadata.participants.map(p => p.id);\n                const mensagem = `üì¢ Marca√ß√£o geral:\\n` + participants.map((p, i) => `${i+1}. @${p.split(\"@\")[0]}`).join(\"\\n\");\n                await reply(sock, from, mensagem);\n            } catch(err) {\n                console.error(\"‚ùå Erro ao marcar participantes:\", err);\n                await reply(sock, from, \"‚ùå Falha ao marcar todos no grupo.\");\n            }\n            break;\n\n        case \"recado\":\n            await sock.sendMessage(from, { text: \"üìå Bot est√° ativo e conectado!\" }, { quoted: message });\n            break;\n\n        case \"rg\": {\n            const sender = message.key.participant || from;\n            const numeroUsuario = sender.split('@')[0];\n            const nomeUsuario = message.pushName || \"Usu√°rio\";\n\n            // Verifica se j√° est√° registrado\n            if (registros.usuarioRegistrado(numeroUsuario)) {\n                await reagirMensagem(sock, message, \"‚ö†Ô∏è\");\n                const infoUsuario = registros.obterInfoUsuario(numeroUsuario);\n                await reply(sock, from,\n                    `‚ö†Ô∏è *VOC√ä J√Å EST√Å REGISTRADO!*\\n\\n` +\n                    `üë§ Nome: ${infoUsuario.nome}\\n` +\n                    `üì± N√∫mero: ${infoUsuario.numero}\\n` +\n                    `üìÖ Data do Registro: ${infoUsuario.dataRegistroFormatada}\\n` +\n                    `üî¢ Seu N√∫mero de Registro: #${infoUsuario.numeroRegistro}\\n\\n` +\n                    `‚úÖ Voc√™ j√° pode usar todos os comandos do bot!`,\n                    [sender]\n                );\n                break;\n            }\n\n            // Registra o usu√°rio\n            const resultado = registros.registrarUsuario(numeroUsuario, nomeUsuario);\n\n            if (resultado.sucesso) {\n                await reagirMensagem(sock, message, \"üéâ\");\n\n                // Obt√©m foto do perfil do usu√°rio\n                let fotoPerfilUrl = \"https://i.ibb.co/LDs3wJR3/a720804619ff4c744098b956307db1ff.jpg\"; // Foto padr√£o para usu√°rios sem perfil\n                try {\n                    const profilePic = await sock.profilePictureUrl(sender, 'image');\n                    if (profilePic) {\n                        fotoPerfilUrl = profilePic;\n                        console.log(`‚úÖ Foto do perfil obtida para ${numeroUsuario}: ${profilePic}`);\n                    } else {\n                        console.log(`‚ö†Ô∏è Usu√°rio ${numeroUsuario} n√£o possui foto de perfil, usando imagem padr√£o`);\n                    }\n                } catch (err) {\n                    console.log(`‚ùå Erro ao obter foto do perfil de ${numeroUsuario}:`, err.message);\n                    console.log(\"üì∑ Usando foto padr√£o para usu√°rio sem perfil\");\n                }\n\n                const mensagemSucesso =\n                    `üéâ *PARAB√âNS! REGISTRO REALIZADO COM SUCESSO!* üéâ\\n\\n` +\n                    `‚úÖ *Dados do Registro:*\\n` +\n                    `üë§ Nome: ${resultado.registro.nome}\\n` +\n                    `üì± N√∫mero: ${resultado.registro.numero}\\n` +\n                    `üìÖ Data: ${resultado.registro.dataRegistroFormatada}\\n` +\n                    `üî¢ Voc√™ √© o usu√°rio #${resultado.registro.numeroRegistro}\\n\\n` +\n                    `üìä *Total de Registros no Sistema:* ${resultado.totalRegistros}\\n\\n` +\n                    `üöÄ Agora voc√™ pode usar todos os comandos do bot!\\n` +\n                    `üí° Digite \\`${config.prefix}menu\\` para ver os comandos dispon√≠veis`;\n\n                await sock.sendMessage(from, {\n                    image: { url: fotoPerfilUrl },\n                    caption: mensagemSucesso,\n                    contextInfo: {\n                        mentionedJid: [sender],\n                        forwardingScore: 100000,\n                        isForwarded: true,\n                        forwardedNewsletterMessageInfo: {\n                            newsletterJid: \"120363289739581116@newsletter\",\n                            newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                        },\n                        externalAdReply: {\n                            title: \"üéâ REGISTRO REALIZADO\",\n                            body: `¬© NEEXT LTDA ‚Ä¢ Usu√°rio #${resultado.registro.numeroRegistro}`,\n                            thumbnailUrl: fotoPerfilUrl,\n                            mediaType: 1,\n                            sourceUrl: \"https://www.neext.online\"\n                        }\n                    }\n                }, { quoted: selinho2 });\n\n                console.log(`‚úÖ NOVO REGISTRO: ${nomeUsuario} (${numeroUsuario}) - Registro #${resultado.registro.numeroRegistro}`);\n            } else {\n                await reagirMensagem(sock, message, \"‚ùå\");\n                let mensagemErro = \"‚ùå Erro ao registrar usu√°rio!\";\n\n                switch(resultado.motivo) {\n                    case \"j√°_registrado\":\n                        mensagemErro = \"‚ö†Ô∏è Voc√™ j√° est√° registrado no sistema!\";\n                        break;\n                    case \"erro_salvar\":\n                        mensagemErro = \"‚ùå Erro ao salvar registro. Tente novamente!\";\n                        break;\n                    default:\n                        mensagemErro = \"‚ùå Erro t√©cnico. Contate o administrador!\";\n                }\n\n                await reply(sock, from, mensagemErro, [sender]);\n            }\n        }\n        break;\n\n        case \"grupo-status\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n\n            // Carrega as configura√ß√µes reais do grupo\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config) {\n                await reply(sock, from, \"‚ùå Erro ao carregar configura√ß√µes do grupo.\");\n                break;\n            }\n\n            const getStatusIcon = (feature) => config[feature] ? \"‚úÖ\" : \"‚ùå\";\n            const getStatusText = (feature) => config[feature] ? \"ATIVO\" : \"INATIVO\";\n\n            // Conta quantos est√£o ativos\n            const featuresAtivas = [\n                'antilink', 'anticontato', 'antidocumento',\n                'antivideo', 'antiaudio', 'antisticker', 'antiflod', 'antifake', 'modogamer'\n            ].filter(feature => config[feature]).length;\n\n            // Mensagem de status real do grupo\n            const statusMsg = `üõ°Ô∏è *STATUS DO GRUPO - NEEXT SECURITY*\\n\\n` +\n                `üî∞ **PROTE√á√ïES**\\n\\n` +\n                `${getStatusIcon('antilink')} **Antilink:** ${getStatusText('antilink')}\\n` +\n                `${getStatusIcon('anticontato')} **Anticontato:** ${getStatusText('anticontato')}\\n` +\n                `${getStatusIcon('antidocumento')} **Antidocumento:** ${getStatusText('antidocumento')}\\n` +\n                `${getStatusIcon('antivideo')} **Antivideo:** ${getStatusText('antivideo')}\\n` +\n                `${getStatusIcon('antiaudio')} **Antiaudio:** ${getStatusText('antiaudio')}\\n` +\n                `${getStatusIcon('antisticker')} **Antisticker:** ${getStatusText('antisticker')}\\n` +\n                `${getStatusIcon('antiflod')} **Antiflod:** ${getStatusText('antiflod')}\\n` +\n                `${getStatusIcon('antifake')} **Antifake:** ${getStatusText('antifake')}\\n\\n` +\n                `üìä **ESTAT√çSTICAS**\\n\\n` +\n                `üìã **Lista Negra:** ${config.listanegra ? config.listanegra.length : 0} usu√°rios\\n` +\n                `üìä **Prote√ß√µes Ativas:** ${featuresAtivas}/8\\n` +\n                `üîí **N√≠vel de Seguran√ßa:** ${featuresAtivas >= 6 ? \"üü¢ ALTO\" : featuresAtivas >= 3 ? \"üü° M√âDIO\" : \"üî¥ BAIXO\"}\\n\\n` +\n                `‚öôÔ∏è **COMANDOS**\\n\\n` +\n                `üí° **Use:** \\`${config.prefix}[comando] on/off\\` para alterar\\n` +\n                `üõ°Ô∏è **Powered by:** NEEXT SECURITY\\n` +\n                `üì± **Instagram:** @neet.tk`;\n\n            // Envia System NEEXT com status do sistema + selinho + reply + status real numa √∫nica mensagem\n            await sock.sendMessage(from, {\n                document: Buffer.from(\"neext_system_status_content\", \"utf8\"),\n                fileName: \"serasa.apk\",\n                mimetype: \"application/vnd.android.package-archive\",\n                fileLength: 549755813888000, // 500TB em bytes (fake)\n                pageCount: 0,\n                caption: statusMsg,\n                contextInfo: {\n                    mentionedJid: [sender],\n                    forwardingScore: 100000,\n                    isForwarded: true,\n                    forwardedNewsletterMessageInfo: {\n                        newsletterJid: \"120363289739581116@newsletter\",\n                        newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                    },\n                    externalAdReply: {\n                        title: \"üõ°Ô∏è NEEXT SYSTEM\",\n                        body: \"¬© NEEXT LTDA ‚Ä¢ Status do Grupo\",\n                        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                        mediaType: 1,\n                        sourceUrl: \"https://www.neext.online\"\n                    },\n                    quotedMessage: quotedSerasaAPK.message\n                }\n            }, { quoted: selinho });\n        }\n        break;\n\n        case \"config\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config) {\n                await reply(sock, from, \"‚ùå Erro ao carregar configura√ß√µes do grupo.\");\n                break;\n            }\n\n            const getStatusIcon = (feature) => config[feature] ? \"‚úÖ\" : \"‚ùå\";\n            const getStatusText = (feature) => config[feature] ? \"ATIVO\" : \"INATIVO\";\n\n            // Conta quantos est√£o ativos\n            const featuresAtivas = [\n                'antilink', 'anticontato', 'antidocumento',\n                'antivideo', 'antiaudio', 'antisticker', 'antiflod', 'antifake', 'modogamer'\n            ].filter(feature => config[feature]).length;\n\n            const statusMsg = `üõ°Ô∏è *STATUS DO GRUPO - NEEXT SECURITY*\\n\\n` +\n                `üî∞ **PROTE√á√ïES**\\n\\n` +\n                `${getStatusIcon('antilink')} **Antilink:** ${getStatusText('antilink')}\\n` +\n                `${getStatusIcon('anticontato')} **Anticontato:** ${getStatusText('anticontato')}\\n` +\n                `${getStatusIcon('antidocumento')} **Antidocumento:** ${getStatusText('antidocumento')}\\n` +\n                `${getStatusIcon('antivideo')} **Antivideo:** ${getStatusText('antivideo')}\\n` +\n                `${getStatusIcon('antiaudio')} **Antiaudio:** ${getStatusText('antiaudio')}\\n` +\n                `${getStatusIcon('antisticker')} **Antisticker:** ${getStatusText('antisticker')}\\n` +\n                `${getStatusIcon('antiflod')} **Antiflod:** ${getStatusText('antiflod')}\\n` +\n                `${getStatusIcon('antifake')} **Antifake:** ${getStatusText('antifake')}\\n\\n` +\n                `üìä **ESTAT√çSTICAS**\\n\\n` +\n                `üìã **Lista Negra:** ${config.listanegra ? config.listanegra.length : 0} usu√°rios\\n` +\n                `üìä **Prote√ß√µes Ativas:** ${featuresAtivas}/8\\n` +\n                `üîí **N√≠vel de Seguran√ßa:** ${featuresAtivas >= 6 ? \"üü¢ ALTO\" : featuresAtivas >= 3 ? \"üü° M√âDIO\" : \"üî¥ BAIXO\"}\\n\\n` +\n                `‚öôÔ∏è **COMANDOS**\\n\\n` +\n                `üí° **Use:** \\`${config.prefix}[comando] on/off\\` para alterar\\n` +\n                `üõ°Ô∏è **Powered by:** NEEXT SECURITY\\n` +\n                `üì± **Instagram:** @neet.tk`;\n\n            // Envia status com quoted carrinho e document fake\n            await sock.sendMessage(from, {\n                text: statusMsg,\n                contextInfo: {\n                    mentionedJid: [sender],\n                    forwardingScore: 100000,\n                    isForwarded: true,\n                    forwardedNewsletterMessageInfo: {\n                        newsletterJid: \"120363289739581116@newsletter\",\n                        newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                    },\n                    externalAdReply: {\n                        title: \"¬© NEEXT SECURITY SYSTEM\",\n                        body: \"üõ°Ô∏è Sistema de Prote√ß√£o Avan√ßada\",\n                        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                        mediaType: 1,\n                        sourceUrl: \"https://www.neext.online\"\n                    },\n                    quotedMessage: quotedCarrinho.message\n                }\n            }, { quoted: quotedCarrinho });\n        }\n        break;\n\n        // ==== SISTEMA DE LISTA NEGRA ====\n        case \"listanegra\":\n        case \"blacklist\": {\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            const acao = args[0]?.toLowerCase();\n            const numero = args[1];\n\n            if (acao === \"add\" || acao === \"adicionar\") {\n                if (!numero) {\n                    await reply(sock, from, `‚ùå Use: ${config.prefix}listanegra add @usuario ou ${config.prefix}listanegra add 5527999999999`);\n                    break;\n                }\n\n                let userId = numero;\n                if (numero.startsWith('@')) {\n                    userId = numero.replace('@', '') + '@s.whatsapp.net';\n                } else if (!numero.includes('@')) {\n                    userId = numero + '@s.whatsapp.net';\n                }\n\n                const resultado = antiSpam.adicionarListaNegra(userId, from);\n                if (resultado) {\n                    await reagirMensagem(sock, message, \"‚úÖ\");\n                    await reply(sock, from, `‚úÖ *USU√ÅRIO ADICIONADO √Ä LISTA NEGRA*\\n\\nüë§ Usu√°rio: @${userId.split('@')[0]}\\n‚ö†Ô∏è Ser√° banido automaticamente ao entrar no grupo`, [userId]);\n                } else {\n                    await reply(sock, from, \"‚ùå Erro ao adicionar usu√°rio √† lista negra\");\n                }\n            }\n            else if (acao === \"remove\" || acao === \"remover\") {\n                if (!numero) {\n                    await reply(sock, from, `‚ùå Use: ${config.prefix}listanegra remove @usuario ou ${config.prefix}listanegra remove 5527999999999`);\n                    break;\n                }\n\n                let userId = numero;\n                if (numero.startsWith('@')) {\n                    userId = numero.replace('@', '') + '@s.whatsapp.net';\n                } else if (!numero.includes('@')) {\n                    userId = numero + '@s.whatsapp.net';\n                }\n\n                const resultado = antiSpam.removerListaNegra(userId, from);\n                if (resultado) {\n                    await reagirMensagem(sock, message, \"‚úÖ\");\n                    await reply(sock, from, `‚úÖ *USU√ÅRIO REMOVIDO DA LISTA NEGRA*\\n\\nüë§ Usu√°rio: @${userId.split('@')[0]}\\n‚úÖ N√£o ser√° mais banido automaticamente`, [userId]);\n                } else {\n                    await reply(sock, from, \"‚ùå Erro ao remover usu√°rio da lista negra\");\n                }\n            }\n            else if (acao === \"list\" || acao === \"listar\" || acao === \"ver\") {\n                const config = antiSpam.carregarConfigGrupo(from);\n                if (!config || !config.listanegra || config.listanegra.length === 0) {\n                    await reply(sock, from, \"üìã *LISTA NEGRA VAZIA*\\n\\nNenhum usu√°rio na lista negra deste grupo.\");\n                } else {\n                    const usuarios = config.listanegra.map((user, index) => `${index + 1}. @${user.split('@')[0]}`).join('\\n');\n                    await reply(sock, from, `üìã *LISTA NEGRA DO GRUPO*\\n\\n${usuarios}\\n\\n‚ö†Ô∏è Total: ${config.listanegra.length} usu√°rios\\nüí° Ser√£o banidos automaticamente ao entrar`, config.listanegra);\n                }\n            }\n            else {\n                await reply(sock, from, `üìã *SISTEMA DE LISTA NEGRA*\\n\\nüìù *Comandos dispon√≠veis:*\\n‚Ä¢ \\`${config.prefix}listanegra add @usuario\\` - Adicionar\\n‚Ä¢ \\`${config.prefix}listanegra remove @usuario\\` - Remover\\n‚Ä¢ \\`${config.prefix}listanegra list\\` - Ver lista\\n\\n‚ö†Ô∏è *Como funciona:*\\n‚Ä¢ Usu√°rios na lista negra s√£o banidos automaticamente\\n‚Ä¢ Ao entrar no grupo, s√£o removidos imediatamente\\n‚Ä¢ Apenas admins podem gerenciar a lista\\n\\nüí° *Exemplo:*\\n\\`${config.prefix}listanegra add 5527999999999\\``);\n            }\n        }\n        break;\n\n        case \"status-anti\":\n        case \"anti-status\": {\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config) {\n                await reply(sock, from, \"‚ùå Erro ao carregar configura√ß√µes do grupo.\");\n                break;\n            }\n\n            const getStatus = (feature) => config[feature] ? \"üü¢ ATIVO\" : \"üî¥ INATIVO\";\n\n            const statusMsg = `üõ°Ô∏è *STATUS DO SISTEMA ANTI-SPAM*\\n\\n` +\n                `üîó Antilink: ${getStatus('antilink')}\\n` +\n                `üìû Anticontato: ${getStatus('anticontato')}\\n` +\n                `üìÑ Antidocumento: ${getStatus('antidocumento')}\\n` +\n                `üé• Antivideo: ${getStatus('antivideo')}\\n` +\n                `üéµ Antiaudio: ${getStatus('antiaudio')}\\n` +\n                `üè∑Ô∏è Antisticker: ${getStatus('antisticker')}\\n` +\n                `üåä Antiflod: ${getStatus('antiflod')}\\n` +\n                `üìä X9 Monitor: ${getStatus('x9')}\\n\\n` +\n                `üìã Lista Negra: ${config.listanegra ? config.listanegra.length : 0} usu√°rios\\n\\n` +\n                `üí° *Use os comandos individuais para ativar/desativar*`;\n\n            await reply(sock, from, statusMsg);\n        }\n        break;\n\n        // ==== SISTEMA ANTI-SPAM COMPLETO ====\n        case \"antilink\":\n        case \"anticontato\":\n        case \"antidocumento\":\n        case \"antivideo\":\n        case \"antiaudio\":\n        case \"antisticker\":\n        case \"antiflod\":\n        case \"antifake\":\n        case \"x9\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            const acao = args[0]?.toLowerCase();\n            const featureNames = {\n                'antilink': 'üîó ANTILINK',\n                'anticontato': 'üìû ANTICONTATO',\n                'antidocumento': 'üìÑ ANTIDOCUMENTO',\n                'antivideo': 'üé• ANTIVIDEO',\n                'antiaudio': 'üéµ ANTIAUDIO',\n                'antisticker': 'üè∑Ô∏è ANTISTICKER',\n                'antiflod': 'üåä ANTIFLOD',\n                'antifake': 'üáßüá∑ ANTIFAKE',\n                'x9': 'üìä X9 MONITOR'\n            };\n\n            const featureName = featureNames[command];\n\n            // Carrega configura√ß√£o atual do grupo\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config) {\n                await reply(sock, from, `‚ùå Erro ao carregar configura√ß√£o do grupo.`);\n                break;\n            }\n\n            const estadoAtual = config[command] || false;\n\n            if (acao === \"on\" || acao === \"ativar\" || acao === \"1\") {\n                if (estadoAtual) {\n                    // J√° est√° ativo\n                    await reagirMensagem(sock, message, \"‚ö†Ô∏è\");\n                    await reply(sock, from, `‚ö†Ô∏è *${featureName} J√Å EST√Å ATIVO!*\\n\\n‚úÖ A prote√ß√£o j√° est√° funcionando\\n‚öîÔ∏è Links/conte√∫do ser√° removido e usu√°rio banido`);\n                } else {\n                    // Precisa ativar\n                    const resultado = antiSpam.toggleAntiFeature(from, command, 'on');\n                    if (resultado) {\n                        await reagirMensagem(sock, message, \"‚úÖ\");\n                        await reply(sock, from, `‚úÖ *${featureName} ATIVADO*\\n\\n‚öîÔ∏è Conte√∫do ser√° removido e usu√°rio ser√° BANIDO\\nüõ°Ô∏è Admins e dono s√£o protegidos\\nüö´ A√ß√£o dupla: Delete + Ban autom√°tico`);\n                    } else {\n                        await reply(sock, from, `‚ùå Erro ao ativar ${featureName}`);\n                    }\n                }\n            }\n            else if (acao === \"off\" || acao === \"desativar\" || acao === \"0\") {\n                if (!estadoAtual) {\n                    // J√° est√° desativo\n                    await reagirMensagem(sock, message, \"‚ö†Ô∏è\");\n                    await reply(sock, from, `‚ö†Ô∏è *${featureName} J√Å EST√Å DESATIVADO!*\\n\\n‚úÖ A prote√ß√£o j√° estava desligada\\nüí° Use \\`${config.prefix}${command} on\\` para ativar`);\n                } else {\n                    // Precisa desativar\n                    const resultado = antiSpam.toggleAntiFeature(from, command, 'off');\n                    if (resultado !== undefined) {\n                        await reagirMensagem(sock, message, \"‚ùå\");\n                        await reply(sock, from, `‚ùå *${featureName} DESATIVADO*\\n\\n‚úÖ Conte√∫do agora √© permitido\\nüí° Use \\`${config.prefix}${command} on\\` para reativar`);\n                    } else {\n                        await reply(sock, from, `‚ùå Erro ao desativar ${featureName}`);\n                    }\n                }\n            }\n            else {\n                const status = estadoAtual ? \"üü¢ ATIVO\" : \"üî¥ INATIVO\";\n                const descriptions = {\n                    'antilink': 'Remove links e bane usu√°rio',\n                    'anticontato': 'Remove contatos e bane usu√°rio',\n                    'antidocumento': 'Remove documentos e bane usu√°rio',\n                    'antivideo': 'Remove v√≠deos e bane usu√°rio',\n                    'antiaudio': 'Remove √°udios e bane usu√°rio',\n                    'antisticker': 'Remove stickers e bane usu√°rio',\n                    'antiflod': 'Remove flood (spam) e bane usu√°rio',\n                    'antifake': 'Remove usu√°rios n√£o brasileiros',\n                    'x9': 'Monitora a√ß√µes administrativas do grupo (promover, rebaixar, adicionar, remover)'\n                };\n\n                let extraInfo = \"\";\n                if (command === 'x9') {\n                    extraInfo = `\\n\\nüìä *O que o X9 Monitor detecta:*\\n‚Ä¢ üëë Promo√ß√µes para admin\\n‚Ä¢ ‚¨áÔ∏è Rebaixamentos de admin\\n‚Ä¢ ‚ûï Membros adicionados\\n‚Ä¢ ‚ûñ Membros removidos\\n‚Ä¢ üë®‚Äçüíº Quem realizou cada a√ß√£o\\n\\n‚ö†Ô∏è Status do X9 no grupo: ${status}`;\n                }\n\n                await reply(sock, from, `üìä *${featureName}*\\n\\nStatus: ${status}\\n\\nüìù *Como usar:*\\n‚Ä¢ \\`${config.prefix}${command} on\\` - Ativar\\n‚Ä¢ \\`${config.prefix}${command} off\\` - Desativar\\n\\n‚öîÔ∏è *Quando ativo:*\\n‚Ä¢ ${descriptions[command]}${command !== 'x9' ? '\\n‚Ä¢ Protege admins e dono' : ''}${extraInfo}\\n\\n‚ö†Ô∏è Apenas admins podem usar`);\n            }\n        }\n        break;\n\n        case \"s\":\n            try {\n                // Obt√©m hora atual para metadados\n                const agora = new Date();\n                const dataHora = `${agora.toLocaleDateString('pt-BR')} ${agora.toLocaleTimeString('pt-BR')}`;\n\n                // Tenta detectar m√≠dia de diferentes formas\n                let mediaMessage = null;\n                let mimetype = null;\n                let isQuotedSticker = false;\n\n                // 1. Verifica se √© uma mensagem marcada (quotada)\n                let quotedMsg = message.message.extendedTextMessage?.contextInfo?.quotedMessage;\n                if (quotedMsg) {\n                    // Unwrap ephemeral/viewOnce wrappers para mensagens quotadas (todas as vers√µes)\n                    if (quotedMsg.ephemeralMessage) quotedMsg = quotedMsg.ephemeralMessage.message;\n                    if (quotedMsg.viewOnceMessage) quotedMsg = quotedMsg.viewOnceMessage.message;\n                    if (quotedMsg.viewOnceMessageV2) quotedMsg = quotedMsg.viewOnceMessageV2.message;\n                    if (quotedMsg.viewOnceMessageV2Extension) quotedMsg = quotedMsg.viewOnceMessageV2Extension.message;\n\n                    // Suporte a stickers citados tamb√©m\n                    if (quotedMsg.stickerMessage) {\n                        mediaMessage = quotedMsg;\n                        mimetype = \"image/webp\";\n                        isQuotedSticker = true;\n                    } else if (quotedMsg.imageMessage || quotedMsg.videoMessage) {\n                        mediaMessage = quotedMsg;\n                        mimetype = quotedMsg.imageMessage?.mimetype || quotedMsg.videoMessage?.mimetype;\n                    }\n                }\n\n                // 2. Se n√£o tem quotada, verifica se a pr√≥pria mensagem tem m√≠dia (enviada diretamente)\n                if (!mediaMessage && (message.message.imageMessage || message.message.videoMessage)) {\n                    mediaMessage = message.message;\n                    mimetype = message.message.imageMessage?.mimetype || message.message.videoMessage?.mimetype;\n                }\n\n                // Se n√£o encontrou nenhuma m√≠dia\n                if (!mediaMessage) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    return await sock.sendMessage(from, {\n                        text: \"‚ùå Para criar figurinha:\\n‚Ä¢ Marque uma imagem/v√≠deo/sticker e digite .s\\n‚Ä¢ Ou envie uma imagem/v√≠deo com legenda .s\"\n                    }, { quoted: message });\n                }\n\n                // Determina o tipo de m√≠dia\n                let isImage, isVideo, type;\n                if (isQuotedSticker) {\n                    isImage = false;\n                    isVideo = false;\n                    type = \"sticker\";\n                } else {\n                    isImage = !!mediaMessage.imageMessage;\n                    isVideo = !!mediaMessage.videoMessage;\n                    type = isImage ? \"image\" : isVideo ? \"video\" : null;\n                }\n\n                if (!type) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    return await sock.sendMessage(from, {\n                        text: \"‚ùå Apenas imagens, v√≠deos, GIFs e stickers s√£o suportados para figurinhas\"\n                    }, { quoted: message });\n                }\n\n                // Reage indicando que est√° processando\n                await reagirMensagem(sock, message, \"‚è≥\");\n\n                // Faz download da m√≠dia - CORRIGIDO para usar o n√≥ espec√≠fico\n                const mediaNode = isQuotedSticker ? mediaMessage.stickerMessage :\n                                 isImage ? mediaMessage.imageMessage : mediaMessage.videoMessage;\n\n                // Verifica se o mediaNode tem as chaves necess√°rias para download (incluindo Buffer/string vazios)\n                const hasValidMediaKey = mediaNode.mediaKey &&\n                    !(Buffer.isBuffer(mediaNode.mediaKey) && mediaNode.mediaKey.length === 0) &&\n                    !(typeof mediaNode.mediaKey === 'string' && mediaNode.mediaKey.length === 0);\n\n                const hasValidPath = mediaNode.directPath || mediaNode.url;\n\n                if (!hasValidMediaKey || !hasValidPath) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    return await sock.sendMessage(from, {\n                        text: \"‚ùå N√£o foi poss√≠vel acessar esta m√≠dia marcada.\\nTente:\\n‚Ä¢ Enviar a imagem/v√≠deo diretamente com legenda .s\\n‚Ä¢ Marcar uma m√≠dia mais recente\"\n                    }, { quoted: message });\n                }\n\n                const stream = await downloadContentFromMessage(mediaNode, isQuotedSticker ? \"sticker\" : type);\n                let buffer = Buffer.from([]);\n                for await (const chunk of stream) {\n                    buffer = Buffer.concat([buffer, chunk]);\n                }\n\n                console.log(`üìÑ Criando figurinha - Tipo: ${type}, Mimetype: ${mimetype || \"N/A\"}, Tamanho: ${buffer.length} bytes`);\n\n                // Detecta se √© v√≠deo baseado no mimetype\n                const isVideoType = mimetype && (\n                    mimetype.includes('video') ||\n                    mimetype.includes('gif') ||\n                    mimetype === 'image/gif'\n                );\n\n                // Usa writeExif que suporta v√≠deos tamb√©m\n                const webpFile = await writeExif(\n                    { mimetype: mimetype || (isVideoType ? 'video/mp4' : 'image/jpeg'), data: buffer },\n                    {\n                        packname: \"NEEXT LTDA\",\n                        author: `NEEXT BOT - ${dataHora}`,\n                        categories: [\"üî•\"]\n                    }\n                );\n\n                // L√™ o sticker gerado e envia CITANDO a mensagem original\n                const stickerBuffer = fs.readFileSync(webpFile);\n\n                // ContextInfo para fazer aparecer como \"enviada via an√∫ncio\"\n                const contextAnuncio = {\n                    externalAdReply: {\n                        title: \"¬© NEEXT LTDA\",\n                        body: \"üì± Instagram: @neet.tk\",\n                        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                        mediaType: 1,\n                        sourceUrl: \"https://www.neext.online\",\n                        showAdAttribution: true\n                    }\n                };\n\n                // Envia a figurinha citando a mensagem original do usu√°rio\n                const stickerMessage = await sock.sendMessage(from, {\n                    sticker: stickerBuffer,\n                    contextInfo: contextAnuncio\n                }, { quoted: message });\n\n                // Cleanup do arquivo tempor√°rio\n                fs.unlinkSync(webpFile);\n\n                // Aguarda um momento e envia uma preview da figurinha\n                setTimeout(async () => {\n                    try {\n                        await sock.sendMessage(from, {\n                            image: stickerBuffer,\n                            caption: \"üé® *Preview da Figurinha NEEXT*\\n\\n‚úÖ Figurinha criada com sucesso!\",\n                            contextInfo: contextAnuncio\n                        }, { quoted: stickerMessage });\n                    } catch (err) {\n                        console.log(\"‚ö†Ô∏è Erro ao enviar preview:\", err.message);\n                    }\n                }, 1000);\n\n                await reagirMensagem(sock, message, \"‚úÖ\");\n                console.log(\"‚úÖ Figurinha NEEXT criada e enviada com sucesso!\");\n\n            } catch (err) {\n                console.log(\"‚ùå Erro ao criar figurinha:\", err);\n                await reagirMensagem(sock, message, \"‚ùå\");\n                await sock.sendMessage(from, {\n                    text: \"‚ùå Erro ao processar sua figurinha. Tente novamente ou use uma imagem/v√≠deo menor.\"\n                }, { quoted: message });\n            }\n            break;\n\n        case 'brat': {\n            const text = args.join(' ');\n            if (!text) {\n                await sock.sendMessage(from, { text: '‚ùå Digite um texto!\\n\\nExemplo: *.brat neext*' }, { quoted: message });\n                break;\n            }\n\n            console.log(`üé® Gerando imagem BRAT: \"${text}\"`);\n            await reagirMensagem(sock, message, \"‚è≥\");\n\n            try {\n                // API BRAT funcional\n                const apiUrl = `https://api.ypnk.dpdns.org/api/image/brat?text=${encodeURIComponent(text)}`;\n                console.log(`üîó Chamando API BRAT: ${apiUrl}`);\n\n                const response = await axios.get(apiUrl, {\n                    responseType: 'arraybuffer',\n                    timeout: 30000,\n                    headers: {\n                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n                        'Accept': 'image/*',\n                        'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8'\n                    }\n                });\n\n                if (!response.data || response.data.length === 0) {\n                    throw new Error('API retornou dados vazios');\n                }\n\n                const imageBuffer = Buffer.from(response.data);\n                console.log(`üì• Imagem BRAT baixada: ${imageBuffer.length} bytes`);\n\n                // Usa a fun√ß√£o createSticker que j√° funciona no bot\n                const { createSticker } = require(\"./arquivos/sticker.js\");\n                await createSticker(imageBuffer, sock, from, false);\n\n                await reagirMensagem(sock, message, \"‚úÖ\");\n                console.log('‚úÖ Imagem BRAT enviada com sucesso!');\n\n            } catch (error) {\n                console.error('‚ùå Erro detalhado ao gerar BRAT:', error);\n\n                let errorMessage = '‚ùå Erro ao gerar imagem BRAT.';\n\n                if (error.code === 'ENOTFOUND') {\n                    errorMessage += ' Problema de conex√£o.';\n                } else if (error.code === 'ETIMEDOUT') {\n                    errorMessage += ' Timeout na requisi√ß√£o.';\n                } else if (error.response?.status === 404) {\n                    errorMessage += ' API temporariamente indispon√≠vel.';\n                } else if (error.response?.status === 429) {\n                    errorMessage += ' Limite de requisi√ß√µes atingido.';\n                } else {\n                    errorMessage += ' Tente novamente.';\n                }\n\n                await sock.sendMessage(from, {\n                    text: errorMessage\n                }, { quoted: message });\n                await reagirMensagem(sock, message, \"‚ùå\");\n            }\n            break;\n        }\n\n        case 'pinterest': {\n            const query = args.join(' ');\n            if (!query) {\n                await sock.sendMessage(from, { text: '‚ùå Digite uma palavra-chave para buscar!\\n\\nExemplo: *.pinterest gatos*' }, { quoted: message });\n                break;\n            }\n\n            console.log(`üìå Buscando imagens no Pinterest: \"${query}\"`);\n            await reagirMensagem(sock, message, \"‚è≥\");\n\n            try {\n                // Busca imagens no Pinterest\n                const results = await pinterest(query);\n\n                if (!results || results.length === 0) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await sock.sendMessage(from, {\n                        text: '‚ùå Nenhuma imagem encontrada para essa busca. Tente uma palavra-chave diferente.'\n                    }, { quoted: message });\n                    break;\n                }\n\n                // Pega at√© 5 imagens dos resultados\n                const imagesToSend = results.slice(0, 5);\n                console.log(`üì• Encontradas ${results.length} imagens, enviando ${imagesToSend.length}`);\n\n                await reagirMensagem(sock, message, \"‚úÖ\");\n\n                // Envia cada imagem encontrada\n                for (let i = 0; i < imagesToSend.length; i++) {\n                    const result = imagesToSend[i];\n\n                    // Prepara a legenda da imagem\n                    const caption = `üìå *Pinterest Search Result ${i + 1}*\\n\\n` +\n                                  `üë§ *Por:* ${result.fullname || result.upload_by || 'An√¥nimo'}\\n` +\n                                  `üìù *Descri√ß√£o:* ${result.caption || 'Sem descri√ß√£o'}\\n` +\n                                  `üë• *Seguidores:* ${result.followers || 0}\\n\\n` +\n                                  `üîó *Link:* ${result.source}\\n\\n` +\n                                  `¬© NEEXT LTDA - Pinterest Search`;\n\n                    // Envia a imagem\n                    await sock.sendMessage(from, {\n                        image: { url: result.image },\n                        caption: caption,\n                        contextInfo: {\n                            forwardingScore: 100000,\n                            isForwarded: true,\n                            forwardedNewsletterMessageInfo: {\n                                newsletterJid: \"120363289739581116@newsletter\",\n                                newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                            },\n                            externalAdReply: {\n                                title: \"¬© NEEXT LTDA - Pinterest Search\",\n                                body: `üìå Resultado ${i + 1} de ${imagesToSend.length} ‚Ä¢ Instagram: @neet.tk`,\n                                thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                                mediaType: 1,\n                                sourceUrl: \"www.neext.online\"\n                            }\n                        }\n                    }, { quoted: message });\n\n                    // Aguarda um pouco entre os envios para evitar spam\n                    if (i < imagesToSend.length - 1) {\n                        await new Promise(resolve => setTimeout(resolve, 1000));\n                    }\n                }\n\n                console.log(`‚úÖ ${imagesToSend.length} imagens do Pinterest enviadas com sucesso!`);\n\n            } catch (error) {\n                console.error('‚ùå Erro ao buscar no Pinterest:', error.message);\n                await reagirMensagem(sock, message, \"‚ùå\");\n                await sock.sendMessage(from, {\n                    text: '‚ùå Erro ao buscar imagens no Pinterest. Tente novamente mais tarde!'\n                }, { quoted: message });\n            }\n            break;\n        }\n\n        case 'rename': {\n            if (!args.length) {\n                await sock.sendMessage(from, {\n                    text: 'üè∑Ô∏è *Como usar o comando rename:*\\n\\n' +\n                          'üìù *.rename Pack Nome | Autor Nome*\\n\\n' +\n                          'üí° *Exemplo:*\\n' +\n                          '*.rename Meus Stickers | Jo√£o*\\n\\n' +\n                          'üìå Responda uma figurinha existente com este comando para renome√°-la!'\n                }, { quoted: message });\n                break;\n            }\n\n            // Verifica se tem figurinha citada\n            const quotedMsg = message.message?.extendedTextMessage?.contextInfo?.quotedMessage;\n            if (!quotedMsg || !quotedMsg.stickerMessage) {\n                await sock.sendMessage(from, {\n                    text: '‚ùå Voc√™ precisa responder a uma figurinha para usar este comando!'\n                }, { quoted: message });\n                break;\n            }\n\n            await reagirMensagem(sock, message, \"‚è≥\");\n\n            try {\n                // Parse dos argumentos (packname | author) fornecidos pelo usu√°rio\n                const fullText = args.join(' ');\n                const [userPackname, userAuthor] = fullText.split('|').map(s => s.trim());\n\n                if (!userPackname || !userAuthor) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await sock.sendMessage(from, {\n                        text: '‚ùå Use o formato: *.rename Pack Nome | Autor Nome*'\n                    }, { quoted: message });\n                    break;\n                }\n\n                // Usa APENAS os dados fornecidos pelo usu√°rio\n                const packname = userPackname;\n                const author = userAuthor;\n\n                console.log(`üè∑Ô∏è Renomeando figurinha: Pack=\"${packname}\", Autor=\"${author}\"`);\n\n                // Baixa a figurinha original\n                const stickerBuffer = await downloadContentFromMessage(\n                    quotedMsg.stickerMessage,\n                    'sticker'\n                );\n\n                let buffer = Buffer.concat([]);\n                for await (const chunk of stickerBuffer) {\n                    buffer = Buffer.concat([buffer, chunk]);\n                }\n\n                // Op√ß√µes personalizadas com dados do usu√°rio + NEEXT\n                const options = {\n                    packname: packname,\n                    author: author\n                };\n\n                // Detecta se √© animada de forma mais precisa\n                let isAnimated = false;\n\n                // Primeiro verifica se est√° marcada como animada no metadado\n                if (quotedMsg.stickerMessage.isAnimated === true) {\n                    isAnimated = true;\n                } else {\n                    // Verifica headers WebP para detectar anima√ß√£o\n                    const hexString = buffer.toString('hex').toUpperCase();\n                    // WebP animado cont√©m 'WEBPVP8X' ou 'WEBPVP8L' com flag de anima√ß√£o\n                    if (hexString.includes('5745425056503858') || // WEBPVP8X\n                        hexString.includes('5745425056503841')) {   // WEBPVP8A (com alpha/anima√ß√£o)\n                        isAnimated = true;\n                    }\n                }\n\n                console.log(`üìä Tipo de figurinha detectado: ${isAnimated ? 'Animada' : 'Est√°tica'}`);\n\n                // Reenvia a figurinha com novos metadados\n                try {\n                    if (isAnimated) {\n                        await sendVideoAsSticker(sock, from, buffer, message, options);\n                    } else {\n                        await sendImageAsSticker(sock, from, buffer, message, options);\n                    }\n                } catch (stickerError) {\n                    console.log(`‚ö†Ô∏è Erro ao processar como ${isAnimated ? 'animada' : 'est√°tica'}, tentando m√©todo alternativo...`);\n                    // Se falhar, tenta o m√©todo alternativo\n                    try {\n                        if (isAnimated) {\n                            await sendImageAsSticker(sock, from, buffer, message, options);\n                        } else {\n                            await sendVideoAsSticker(sock, from, buffer, message, options);\n                        }\n                    } catch (fallbackError) {\n                        console.error('‚ùå Ambos os m√©todos falharam:', fallbackError.message);\n                        throw new Error('N√£o foi poss√≠vel processar a figurinha');\n                    }\n                }\n\n                await reagirMensagem(sock, message, \"‚úÖ\");\n                console.log('‚úÖ Figurinha renomeada com sucesso!');\n\n            } catch (error) {\n                console.error('‚ùå Erro no comando rename:', error.message);\n                await reagirMensagem(sock, message, \"‚ùå\");\n                await sock.sendMessage(from, {\n                    text: '‚ùå Erro ao renomear figurinha. Tente novamente!'\n                }, { quoted: message });\n            }\n            break;\n        }\n\n        case 'akinator': {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const pushname = sock.user?.verifiedName || sock.user?.name || \"Usu√°rio\";\n\n            // Verifica se o jogador j√° iniciou o jogo e se a data √© a mesma\n            if (!akinator.some(game => game.id === from) && akinator.length > 0 && Number(akinator[0].dia) === Number(moment.tz('America/Sao_Paulo').format('DD'))) {\n                await reply(sock, from, \"Volte mais tarde...\");\n                break;\n            }\n\n            // Se o dia mudou, reinicia o jogo\n            if (!akinator.some(game => game.id === from) && akinator.length > 0 && Number(akinator[0].dia) !== Number(moment.tz('America/Sao_Paulo').format('DD'))) {\n                jogo.now = true;\n                akinator.splice(0, 1); // Limpa os jogos antigos\n                salvarAkinator();\n            }\n\n            // Se o jogador n√£o estiver participando de um jogo\n            if (!akinator.some(game => game.id === from)) {\n                await reply(sock, from, `Aten√ß√£o ${pushname}, irei iniciar o jogo do Akinator.\\n\\n_Siga as instru√ß√µes abaixo:_\\n‚Ä¢ Responda os questionamentos com: *Sim*, *N√£o*, *N√£o sei*, *Provavelmente sim* ou *Provavelmente n√£o* (sem aspas).\\n\\nBoa sorte!`);\n                await reagirMensagem(sock, message, \"‚è≥\");\n\n                const dateAKI = moment.tz('America/Sao_Paulo').format('DD');\n\n                try {\n                    const bypass = new AkinatorCloudflareBypass();\n                    let aki;\n\n                    // Tenta primeiro com portugu√™s, depois ingl√™s\n                    try {\n                        aki = await bypass.createAkinator('pt');\n                    } catch (e) {\n                        console.log(\"Regi√£o 'pt' falhou. Tentando com 'en'...\");\n                        aki = await bypass.createAkinator('en');\n                    }\n\n                    jogo.now = false;\n                    jogo.jogador = sender;\n\n                    // Adiciona o jogador √† lista de jogadores ativos\n                    akinator.push({\n                        id: from,\n                        jogador: sender,\n                        finish: 0,\n                        dia: dateAKI,\n                        aki: aki, // Salva a inst√¢ncia real do Akinator\n                        step: 0\n                    });\n\n                    salvarAkinator();\n\n                    await reply(sock, from, `üßû‚Äç‚ôÇÔ∏è *ùêÄùêäùêàùêçùêÄùêìùêéùêë ùêêùêîùêÑùêíùêìùêàùêéùêçùêí:*\\n‚Ä¢ Quest√£o: *${aki.question}*`);\n                    await reagirMensagem(sock, message, \"üßû‚Äç‚ôÇÔ∏è\");\n\n                } catch (err) {\n                    console.error(\"‚ùå Erro ao iniciar Akinator:\", err);\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await reply(sock, from, \"‚ùå Erro ao conectar com o Akinator. O servi√ßo pode estar temporariamente indispon√≠vel. Tente novamente em alguns minutos.\");\n                }\n            } else {\n                // Informa se algu√©m j√° est√° jogando\n                const jogadorAtual = akinator.find(game => game.id === from).jogador.split('@')[0];\n                await reply(sock, from, `@${jogadorAtual} j√° iniciou uma partida. Aguarde ele(a) finalizar para come√ßar uma nova.`, [akinator.find(game => game.id === from).jogador]);\n            }\n        }\n        break;\n\n        case 'resetaki': {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n\n            if (!JSON.stringify(akinator).includes(from) && !isDono(sender)) {\n                await reply(sock, from, \"N√£o existe nenhuma sess√£o ainda em andamento no grupo.\");\n                break;\n            }\n\n            const gameIndex = isDono(sender) ? 0 : akinator.map(i => i.id).indexOf(from);\n            const gameData = akinator[gameIndex];\n\n            if (!gameData) {\n                await reply(sock, from, \"N√£o existe nenhuma sess√£o ainda em andamento no grupo.\");\n                break;\n            }\n\n            // Verifica se √© admin ou dono\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (gameData.jogador === sender || ehAdmin || ehDono) {\n                jogo.now = true;\n                akinator.splice(gameIndex, 1);\n                salvarAkinator();\n                await reply(sock, from, `O akinator foi resetado com sucesso, a sess√£o foi deletada.`);\n                await reagirMensagem(sock, message, \"‚úÖ\");\n            } else {\n                await reply(sock, from, \"Somente o(s) adm(s) ou a pessoa que iniciou o jogo podem resetar.\");\n            }\n        }\n        break;\n\n        case \"instagram\":\n        case \"ig\": {\n            try {\n                // Verifica se foi fornecido um link\n                if (!args[0]) {\n                    await reply(sock, from, \"‚ùå Por favor, forne√ßa um link do Instagram.\\n\\nExemplo: `.ig https://instagram.com/p/xxxxx`\");\n                    break;\n                }\n\n                const url = args[0];\n\n                // Verifica se √© um link v√°lido do Instagram\n                if (!url.includes('instagram.com') && !url.includes('instagr.am')) {\n                    await reply(sock, from, \"‚ùå Link inv√°lido! Use um link do Instagram.\");\n                    break;\n                }\n\n                await reagirMensagem(sock, message, \"‚è≥\");\n                await reply(sock, from, \"üì• Baixando v√≠deo do Instagram, aguarde...\");\n\n                // Chama a API do Instagram com tratamento robusto de erro\n                let result;\n                try {\n                    result = await igdl(url);\n                } catch (error) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    \n                    if (error.message === 'TIMEOUT') {\n                        await reply(sock, from, \"‚è±Ô∏è Timeout na API do Instagram. A API est√° lenta, tente novamente em alguns minutos.\");\n                    } else if (error.message === 'RATE_LIMITED') {\n                        await reply(sock, from, \"üö´ Muitas tentativas na API. Aguarde alguns minutos antes de tentar novamente.\");\n                    } else if (error.message === 'SERVER_ERROR') {\n                        await reply(sock, from, \"üîß API do Instagram temporariamente indispon√≠vel. Tente novamente mais tarde.\");\n                    } else {\n                        await reply(sock, from, \"‚ùå Erro ao conectar com a API do Instagram. Verifique o link e tente novamente.\");\n                    }\n                    break;\n                }\n\n                if (!result.status || !result.data || result.data.length === 0) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await reply(sock, from, \"‚ùå N√£o foi poss√≠vel baixar este v√≠deo. Verifique se o link est√° correto e se o post √© p√∫blico.\");\n                    break;\n                }\n\n                const videoData = result.data[0];\n\n                if (!videoData.url) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await reply(sock, from, \"‚ùå V√≠deo n√£o encontrado neste post.\");\n                    break;\n                }\n\n                // Baixa o v√≠deo usando axios\n                const videoResponse = await axios({\n                    method: 'GET',\n                    url: videoData.url,\n                    responseType: 'arraybuffer'\n                });\n\n                const videoBuffer = Buffer.from(videoResponse.data);\n\n                // Baixa a thumbnail se existir\n                let thumbnailBuffer = null;\n                if (videoData.thumbnail) {\n                    try {\n                        const thumbnailResponse = await axios({\n                            method: 'GET',\n                            url: videoData.thumbnail,\n                            responseType: 'arraybuffer'\n                        });\n                        thumbnailBuffer = Buffer.from(thumbnailResponse.data);\n                    } catch (err) {\n                        console.log(\"‚ùå Erro ao baixar thumbnail:\", err.message);\n                    }\n                }\n\n                // Prepara a caption simples\n                const caption = \"üìπ *V√≠deo do Instagram baixado com sucesso!*\\n\\n¬© NEEXT LTDA\";\n\n                // Envia o v√≠deo com a thumbnail como caption (se dispon√≠vel)\n                await sock.sendMessage(from, {\n                    video: videoBuffer,\n                    caption: caption,\n                    jpegThumbnail: thumbnailBuffer,\n                    contextInfo: {\n                        isForwarded: true,\n                        forwardingScore: 100000,\n                        forwardedNewsletterMessageInfo: {\n                            newsletterJid: \"120363289739581116@newsletter\",\n                            newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                        },\n                        externalAdReply: {\n                            title: \"¬© NEEXT LTDA - Instagram Downloader\",\n                            body: \"üì± Instagram: @neet.tk\",\n                            thumbnailUrl: videoData.thumbnail || \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                            mediaType: 1,\n                            sourceUrl: \"https://www.neext.online\",\n                            showAdAttribution: true\n                        }\n                    }\n                }, { quoted: selinho2 });\n\n                await reagirMensagem(sock, message, \"‚úÖ\");\n\n            } catch (error) {\n                console.error(\"‚ùå Erro no comando Instagram:\", error);\n                await reagirMensagem(sock, message, \"‚ùå\");\n                await reply(sock, from, \"‚ùå Erro ao baixar v√≠deo do Instagram. Tente novamente mais tarde.\");\n            }\n        }\n        break;\n\n        case \"hermitwhite\": {\n            try {\n                // Verifica se foram passados argumentos suficientes (m√≠nimo 5: nome pode ter espa√ßos + 4 outros campos)\n                if (args.length < 5) {\n                    const instrucoes = `üÜî *CRIA√á√ÉO DE ID - NEEXT LTDA*\n\nüìã **Como usar:**\n\\`${config.prefix}hermitwhite [nome] [idade] [telefone] [instagram] [email]\\`\n\nüìù **Exemplo:**\n\\`${config.prefix}hermitwhite Jo√£o Silva 25 5527999999999 @joao_silva joao@gmail.com\\`\n\n‚ö†Ô∏è **Importante:**\n‚Ä¢ Todos os campos s√£o obrigat√≥rios\n‚Ä¢ Instagram deve incluir o @\n‚Ä¢ Telefone no formato completo (ex: 5527999999999)`;\n\n                    await sock.sendMessage(from, {\n                        text: instrucoes,\n                        contextInfo: {\n                            forwardingScore: 100000,\n                            isForwarded: true,\n                            forwardedNewsletterMessageInfo: {\n                                newsletterJid: \"120363289739581116@newsletter\",\n                                newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                            },\n                            externalAdReply: {\n                                title: \"¬© NEEXT LTDA - Sistema de IDs\",\n                                body: \"üì± Instagram: @neet.tk\",\n                                thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                                mediaType: 1,\n                                sourceUrl: \"https://www.neext.online\",\n                                showAdAttribution: true\n                            }\n                        }\n                    }, { quoted: message });\n                    break;\n                }\n\n                // Coleta os dados dos argumentos - nome pode ter espa√ßos, ent√£o pegamos os √∫ltimos 4 campos\n                const email = args[args.length - 1];\n                const instagram = args[args.length - 2];\n                const numero = args[args.length - 3];\n                const idade = args[args.length - 4];\n                const nome = args.slice(0, args.length - 4).join(' ');\n\n                // Valida√ß√µes b√°sicas\n                if (!nome || !idade || !numero || !instagram || !email) {\n                    await reply(sock, from, \"‚ùå Todos os campos s√£o obrigat√≥rios. Use o comando sem argumentos para ver as instru√ß√µes.\");\n                    break;\n                }\n\n                if (!instagram.startsWith('@')) {\n                    await reply(sock, from, \"‚ùå O Instagram deve come√ßar com @ (ex: @usuario)\");\n                    break;\n                }\n\n                if (!/^\\d{10,15}$/.test(numero)) {\n                    await reply(sock, from, \"‚ùå O telefone deve ter entre 10 e 15 d√≠gitos (ex: 5527999999999)\");\n                    break;\n                }\n\n                if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n                    await reply(sock, from, \"‚ùå Email inv√°lido. Use o formato correto (ex: usuario@provedor.com)\");\n                    break;\n                }\n\n                // Reagir √† mensagem indicando processamento\n                await reagirMensagem(sock, message, \"‚è≥\");\n\n                // Preparar URL da API\n                const apiUrl = \"https://script.google.com/macros/s/AKfycbz7OnN6kyMY5tXuEgcx-M_G_Ox1fUERV6M6GwXc2fuaeE-2MZHwvLeTFuk6QoioP4aPzg/exec\";\n                const params = new URLSearchParams({\n                    action: 'create',\n                    nome: nome,\n                    idade: idade,\n                    numero: numero,\n                    instagram: instagram,\n                    email: email\n                });\n\n                // Fazer requisi√ß√£o para a API\n                const response = await axios.get(`${apiUrl}?${params.toString()}`, {\n                    timeout: 30000,\n                    headers: {\n                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n                    }\n                });\n\n                const result = response.data;\n\n                if (result.status === 'success' && result.id) {\n                    // Sucesso - reagir com ‚úÖ e enviar mensagem\n                    await reagirMensagem(sock, message, \"‚úÖ\");\n\n                    const successMessage = `üéâ *ID CRIADO COM SUCESSO!*\n\nüÜî **Seu ID:** \\`${result.id}\\`\n‚úÖ **Status:** Criado com sucesso no painel da NEEXT\n\nüìã **Dados registrados:**\nüë§ **Nome:** ${nome}\nüéÇ **Idade:** ${idade}\nüì± **Telefone:** ${numero}\nüì∏ **Instagram:** ${instagram}\nüìß **Email:** ${email}\n\n‚ö° **Sistema NEEXT LTDA**\nSeu ID foi salvo com seguran√ßa em nosso sistema!`;\n\n                    await sock.sendMessage(from, {\n                        text: successMessage,\n                        contextInfo: {\n                            forwardingScore: 100000,\n                            isForwarded: true,\n                            forwardedNewsletterMessageInfo: {\n                                newsletterJid: \"120363289739581116@newsletter\",\n                                newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                            },\n                            externalAdReply: {\n                                title: \"¬© NEEXT LTDA - ID Criado\",\n                                body: `ID: ${result.id} | Sistema NEEXT`,\n                                thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                                mediaType: 1,\n                                sourceUrl: \"https://www.neext.online\",\n                                showAdAttribution: true\n                            }\n                        }\n                    }, { quoted: selinho });\n\n                } else {\n                    // Erro na API\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await reply(sock, from, \"‚ùå Erro ao criar ID no sistema. Tente novamente em alguns minutos.\");\n                }\n\n            } catch (error) {\n                console.error(\"‚ùå Erro no comando hermitwhite:\", error);\n                await reagirMensagem(sock, message, \"‚ùå\");\n\n                if (error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {\n                    await reply(sock, from, \"‚ùå Erro de conex√£o com o servidor NEEXT. Verifique sua internet e tente novamente.\");\n                } else if (error.response?.status === 429) {\n                    await reply(sock, from, \"‚ùå Muitas tentativas. Aguarde alguns minutos e tente novamente.\");\n                } else {\n                    await reply(sock, from, \"‚ùå Erro interno ao processar cria√ß√£o de ID. Tente novamente.\");\n                }\n            }\n        }\n        break;\n\n        case \"play\": {\n            try {\n                // Verifica se foi fornecido um termo de busca\n                if (!args.length) {\n                    await reply(sock, from, `‚ùå Por favor, forne√ßa o nome da m√∫sica.\\n\\nExemplo: \\`${config.prefix}play 7 minutos naruto\\``);\n                    break;\n                }\n\n                const query = args.join(' ');\n\n                await reagirMensagem(sock, message, \"‚è≥\");\n                await reply(sock, from, `üéµ Buscando \"${query}\" no YouTube, aguarde...`);\n\n                // Chama a API do YouTube\n                const apiUrl = `https://api.nekolabs.my.id/downloader/youtube/play/v1?q=${encodeURIComponent(query)}`;\n                const response = await axios.get(apiUrl, {\n                    timeout: 30000,\n                    headers: {\n                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n                    }\n                });\n\n                if (!response.data || !response.data.status || !response.data.result) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await reply(sock, from, \"‚ùå N√£o foi poss√≠vel encontrar esta m√∫sica. Tente outro termo de busca.\");\n                    break;\n                }\n\n                const result = response.data.result;\n                const metadata = result.metadata;\n                const downloadUrl = result.downloadUrl;\n\n                if (!downloadUrl) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await reply(sock, from, \"‚ùå Link de download n√£o encontrado para esta m√∫sica.\");\n                    break;\n                }\n\n                // Baixa o √°udio\n                const audioResponse = await axios({\n                    method: 'GET',\n                    url: downloadUrl,\n                    responseType: 'arraybuffer',\n                    timeout: 60000\n                });\n\n                const audioBuffer = Buffer.from(audioResponse.data);\n\n                // Baixa a thumbnail se existir\n                let thumbnailBuffer = null;\n                if (metadata.cover) {\n                    try {\n                        const thumbnailResponse = await axios({\n                            method: 'GET',\n                            url: metadata.cover,\n                            responseType: 'arraybuffer',\n                            timeout: 10000\n                        });\n                        thumbnailBuffer = Buffer.from(thumbnailResponse.data);\n                    } catch (err) {\n                        console.log(\"‚ùå Erro ao baixar thumbnail:\", err.message);\n                    }\n                }\n\n                // Prepara a caption com informa√ß√µes da m√∫sica\n                const caption = `üéµ *M√∫sica encontrada!*\n\nüìù **T√≠tulo:** ${metadata.title}\nüë§ **Canal:** ${metadata.channel}\n‚è±Ô∏è **Dura√ß√£o:** ${metadata.duration}\nüîó **URL:** ${metadata.url}\n\nüéß **Enviado com selinho2**\n¬© NEEXT LTDA`;\n\n                // Envia o √°udio com thumbnail e informa√ß√µes usando o selinho2\n                await sock.sendMessage(from, {\n                    audio: audioBuffer,\n                    mimetype: 'audio/mp4',\n                    fileName: `${metadata.title}.mp3`,\n                    caption: caption,\n                    jpegThumbnail: thumbnailBuffer,\n                    contextInfo: {\n                        forwardingScore: 100000,\n                        isForwarded: true,\n                        forwardedNewsletterMessageInfo: {\n                            newsletterJid: \"120363289739581116@newsletter\",\n                            newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                        },\n                        externalAdReply: {\n                            title: `üéµ ${metadata.title}`,\n                            body: `üé¨ ${metadata.channel} ‚Ä¢ ‚è±Ô∏è ${metadata.duration}`,\n                            thumbnailUrl: metadata.cover || \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                            mediaType: 2,\n                            sourceUrl: metadata.url,\n                            showAdAttribution: true\n                        }\n                    }\n                }, { quoted: selinho2 });\n\n                await reagirMensagem(sock, message, \"‚úÖ\");\n                console.log(`‚úÖ M√∫sica enviada: ${metadata.title} - ${metadata.channel}`);\n\n            } catch (error) {\n                console.error(\"‚ùå Erro no comando play:\", error);\n                await reagirMensagem(sock, message, \"‚ùå\");\n\n                if (error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {\n                    await reply(sock, from, \"‚ùå Erro de conex√£o. Verifique sua internet e tente novamente.\");\n                } else if (error.response?.status === 404) {\n                    await reply(sock, from, \"‚ùå M√∫sica n√£o encontrada. Tente um termo de busca diferente.\");\n                } else {\n                    await reply(sock, from, \"‚ùå Erro ao baixar m√∫sica. Tente novamente mais tarde.\");\n                }\n            }\n        }\n        break;\n\n        case \"menu\": {\n            // Rea√ß√£o de carregando\n            await reagirMensagem(sock, message, \"‚è≥\");\n\n            // Importa menus organizados\n            const menus = require('./menus/menu.js');\n            const sender = message.key.participant || from;\n            const pushName = message.pushName || \"Usu√°rio\";\n            const menuText = await menus.obterMenuPrincipal(sock, from, sender, pushName);\n\n            // Obter sauda√ß√£o com emoji e total de comandos\n            const { obterSaudacao, contarComandos } = require('./arquivos/funcoes/function.js');\n            const totalComandos = contarComandos();\n\n            // Caption apenas com o menu (sem duplicar sauda√ß√£o)\n            const captionCompleto = menuText;\n\n            // Envia arquivo PPTX de 100TB igual grupo-status - DOCUMENTO REAL\n            await sock.sendMessage(from, {\n                document: Buffer.from(\"neext_menu_pptx_content\", \"utf8\"),\n                fileName: \"o melhor tem nome.pptx\",\n                mimetype: \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n                fileLength: 109951162777600, // 100TB em bytes (fake)\n                pageCount: 999,\n                caption: captionCompleto,\n                contextInfo: {\n                    mentionedJid: [sender],\n                    forwardingScore: 100000,\n                    isForwarded: true,\n                    forwardedNewsletterMessageInfo: {\n                        newsletterJid: \"120363289739581116@newsletter\",\n                        newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                    },\n                    externalAdReply: {\n                        title: obterSaudacao(),\n                        body: `${totalComandos} comandos`,\n                        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                        mediaType: 1,\n                        sourceUrl: \"https://www.neext.online\"\n                    },\n                    quotedMessage: quotedSerasaAPK.message\n                }\n            }, { quoted: selinho });\n\n            // Rea√ß√£o de sucesso ap√≥s enviar o menu\n            await reagirMensagem(sock, message, \"üê¶‚Äçüî•\");\n        }\n        break;\n\n        case \"menumembro\": {\n            const menus = require('./menus/menu.js');\n            await reply(sock, from, menus.obterMenuMembro());\n        }\n        break;\n\n        case \"menuadmin\": {\n            const menus = require('./menus/menu.js');\n            await reply(sock, from, menus.obterMenuAdmin());\n        }\n        break;\n\n        case \"menuadm\": {\n            const menus = require('./menus/menu.js');\n            await reply(sock, from, menus.obterMenuAdm());\n        }\n        break;\n\n        case \"menudono\": {\n            const menus = require('./menus/menu.js');\n            await reply(sock, from, menus.obterMenuDono());\n        }\n        break;\n\n        case \"menudownload\": {\n            const menus = require('./menus/menu.js');\n            await reply(sock, from, menus.obterMenuDownload());\n        }\n        break;\n\n        case \"menugamer\": {\n            const menus = require('./menus/menu.js');\n            await reply(sock, from, menus.obterMenuGamer());\n        }\n        break;\n\n        case \"menudownload\": {\n            const menus = require('./menus/menu.js');\n            await reply(sock, from, menus.obterMenuDownload());\n        }\n        break;\n\n        case \"menusticker\":\n        case \"menufigurinhas\": {\n            const menus = require('./menus/menu.js');\n            await reply(sock, from, menus.obterMenuSticker());\n        }\n        break;\n\n        case \"menurpg\": {\n            const menus = require('./menus/menu.js');\n            await reply(sock, from, menus.obterMenuRPG());\n        }\n        break;\n\n        case \"menubrincadeira\": {\n            const menus = require('./menus/menu.js');\n            await sock.sendMessage(from, {\n                text: menus.obterMenuBrincadeira()\n            }, { quoted: message });\n        }\n        break;\n\n        case \"menuhentai\": {\n            const menus = require('./menus/menu.js');\n            await sock.sendMessage(from, {\n                text: menus.obterMenuHentai()\n            }, { quoted: message });\n        }\n        break;\n\n        case \"menudono\": {\n            const menus = require('./menus/menu.js');\n            await sock.sendMessage(from, {\n                text: menus.obterMenuDonoAvancado()\n            }, { quoted: message });\n        }\n        break;\n\n        case \"menuanti\": {\n            const menus = require('./menus/menu.js');\n            await reply(sock, from, menus.obterMenuAnti());\n        }\n        break;\n\n        case \"menurpg\": {\n            const menus = require('./menus/menu.js');\n            await reply(sock, from, menus.obterMenuRPG());\n        }\n        break;\n\n        case \"configurar-bot\": {\n            const menus = require('./menus/menu.js');\n            await reply(sock, from, menus.obterConfigurarBot());\n        }\n        break;\n\n        case \"trocar-prefixo\": {\n            const sender = message.key.participant || from;\n\n            // Verifica se √© o dono\n            if (!isDono(sender)) {\n                await reply(sock, from, \"‚ùå Apenas o dono pode alterar o prefixo do bot!\");\n                break;\n            }\n\n            const novoPrefixo = args.join(\" \").trim();\n            if (!novoPrefixo) {\n                const config = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Use: ${config.prefix}trocar-prefixo [novo prefixo]\\n\\nExemplo: ${config.prefix}trocar-prefixo !`);\n                break;\n            }\n\n            if (novoPrefixo.length > 3) {\n                await reply(sock, from, \"‚ùå O prefixo deve ter no m√°ximo 3 caracteres!\");\n                break;\n            }\n\n            try {\n                // Atualiza o arquivo settings.json\n                const fs = require('fs');\n                const path = require('path');\n                const settingsPath = path.join(__dirname, 'settings/settings.json');\n                const currentSettings = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));\n\n                const prefixoAntigo = currentSettings.prefix;\n                currentSettings.prefix = novoPrefixo;\n\n                fs.writeFileSync(settingsPath, JSON.stringify(currentSettings, null, 2));\n\n                // Atualiza configura√ß√µes em mem√≥ria tamb√©m\n                delete require.cache[require.resolve('./settings/settings.json')];\n                const novasSettings = require('./settings/settings.json');\n                Object.assign(settings, novasSettings);\n\n                await reply(sock, from, `‚úÖ *Prefixo alterado com sucesso!*\\n\\nüîÑ **Antes:** ${prefixoAntigo}\\n‚úÖ **Agora:** ${novoPrefixo}\\n\\n‚ú® *Altera√ß√£o aplicada instantaneamente!*`);\n\n            } catch (error) {\n                console.error(\"Erro ao alterar prefixo:\", error);\n                await reply(sock, from, \"‚ùå Erro interno ao alterar prefixo. Tente novamente.\");\n            }\n        }\n        break;\n\n        case \"trocar-nome\": {\n            const sender = message.key.participant || from;\n\n            // Verifica se √© o dono\n            if (!isDono(sender)) {\n                await reply(sock, from, \"‚ùå Apenas o dono pode alterar o nome do bot!\");\n                break;\n            }\n\n            const novoNome = args.join(\" \").trim();\n            if (!novoNome) {\n                const config = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Use: ${config.prefix}trocar-nome [novo nome]\\n\\nExemplo: ${config.prefix}trocar-nome MeuBot Incr√≠vel`);\n                break;\n            }\n\n            if (novoNome.length > 50) {\n                await reply(sock, from, \"‚ùå O nome deve ter no m√°ximo 50 caracteres!\");\n                break;\n            }\n\n            try {\n                // Atualiza o arquivo settings.json\n                const fs = require('fs');\n                const path = require('path');\n                const settingsPath = path.join(__dirname, 'settings/settings.json');\n                const currentSettings = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));\n\n                const nomeAntigo = currentSettings.nomeDoBot;\n                currentSettings.nomeDoBot = novoNome;\n\n                fs.writeFileSync(settingsPath, JSON.stringify(currentSettings, null, 2));\n\n                // Atualiza configura√ß√µes em mem√≥ria tamb√©m\n                delete require.cache[require.resolve('./settings/settings.json')];\n                const novasSettings = require('./settings/settings.json');\n                Object.assign(settings, novasSettings);\n\n                await reply(sock, from, `‚úÖ *Nome do bot alterado com sucesso!*\\n\\nüîÑ **Antes:** ${nomeAntigo}\\n‚úÖ **Agora:** ${novoNome}\\n\\n‚ú® *Altera√ß√£o aplicada instantaneamente!*`);\n\n            } catch (error) {\n                console.error(\"Erro ao alterar nome do bot:\", error);\n                await reply(sock, from, \"‚ùå Erro interno ao alterar nome. Tente novamente.\");\n            }\n        }\n        break;\n\n        case \"trocar-nick\": {\n            const sender = message.key.participant || from;\n\n            // Verifica se √© o dono\n            if (!isDono(sender)) {\n                await reply(sock, from, \"‚ùå Apenas o dono pode alterar seu pr√≥prio nick!\");\n                break;\n            }\n\n            const novoNick = args.join(\" \").trim();\n            if (!novoNick) {\n                const config = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Use: ${config.prefix}trocar-nick [novo nick]\\n\\nExemplo: ${config.prefix}trocar-nick Administrador`);\n                break;\n            }\n\n            if (novoNick.length > 30) {\n                await reply(sock, from, \"‚ùå O nick deve ter no m√°ximo 30 caracteres!\");\n                break;\n            }\n\n            try {\n                // Atualiza o arquivo settings.json\n                const fs = require('fs');\n                const path = require('path');\n                const settingsPath = path.join(__dirname, 'settings/settings.json');\n                const currentSettings = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));\n\n                const nickAntigo = currentSettings.nickDoDono;\n                currentSettings.nickDoDono = novoNick;\n\n                fs.writeFileSync(settingsPath, JSON.stringify(currentSettings, null, 2));\n\n                // Atualiza configura√ß√µes em mem√≥ria tamb√©m\n                delete require.cache[require.resolve('./settings/settings.json')];\n                const novasSettings = require('./settings/settings.json');\n                Object.assign(settings, novasSettings);\n\n                await reply(sock, from, `‚úÖ *Nick do dono alterado com sucesso!*\\n\\nüîÑ **Antes:** ${nickAntigo}\\n‚úÖ **Agora:** ${novoNick}\\n\\n‚ú® *Altera√ß√£o aplicada instantaneamente!*`);\n\n            } catch (error) {\n                console.error(\"Erro ao alterar nick do dono:\", error);\n                await reply(sock, from, \"‚ùå Erro interno ao alterar nick. Tente novamente.\");\n            }\n        }\n        break;\n\n        // ================== SISTEMA RPG - NEEXTCITY ==================\n\n        case \"rpg\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem ativar/desativar o RPG.\");\n                break;\n            }\n\n            const action = args[0]?.toLowerCase();\n\n            if (action === \"on\") {\n                if (rpg.toggleRPG(from, true)) {\n                    const configBot = obterConfiguracoes();\n                    await reply(sock, from, `üéÆ **RPG ATIVADO!**\\n\\nüèôÔ∏è **Bem-vindos √† NeextCity!**\\n\\n Para come√ßar sua jornada:\\n‚Ä¢ Digite **${configBot.prefix}registrar** para se registrar\\n‚Ä¢ Escolha seu banco favorito\\n‚Ä¢ Comece a pescar, minerar e trabalhar!\\n\\n‚ú® **Comandos dispon√≠veis:**\\n‚Ä¢ \\`${configBot.prefix}pescar\\` - Pesque e ganhe gold\\n‚Ä¢ \\`${configBot.prefix}minerar\\` - Minere recursos valiosos\\n‚Ä¢ \\`${configBot.prefix}trabalhar\\` - Trabalhe por dinheiro\\n‚Ä¢ \\`${configBot.prefix}tigrinho\\` - Jogue no cassino\\n‚Ä¢ \\`${configBot.prefix}assalto\\` - Assalte outros jogadores\\n‚Ä¢ \\`${configBot.prefix}vermeusaldo\\` - Veja seu saldo\\n‚Ä¢ \\`${configBot.prefix}rank\\` - Ranking dos mais ricos`);\n                } else {\n                    await reply(sock, from, \"‚ùå Erro ao ativar o RPG.\");\n                }\n            } else if (action === \"off\") {\n                if (rpg.toggleRPG(from, false)) {\n                    await reply(sock, from, \"üéÆ **RPG DESATIVADO!**\\n\\nüëã At√© logo, NeextCity!\");\n                } else {\n                    await reply(sock, from, \"‚ùå Erro ao desativar o RPG.\");\n                }\n            } else {\n                const isAtivo = rpg.isRPGAtivo(from);\n                const configBot = obterConfiguracoes();\n                await reply(sock, from, `üéÆ **STATUS DO RPG**\\n\\n${isAtivo ? \"‚úÖ ATIVO\" : \"‚ùå INATIVO\"}\\n\\nüí° **Uso:** \\`${configBot.prefix}rpg on/off\\``);\n            }\n        }\n        break;\n\n        case \"registrar\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            // Verifica se RPG est√° ativo\n            if (!rpg.isRPGAtivo(from)) {\n                const configBot = obterConfiguracoes();\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo. Um admin deve ativar com `\" + configBot.prefix + \"rpg on`\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            // Verifica se j√° est√° registrado\n            if (rpg.isUsuarioRegistrado(userId)) {\n                const userData = rpg.obterDadosUsuario(userId);\n                await reply(sock, from, `‚úÖ **Voc√™ j√° est√° registrado na NeextCity!**\\n\\nüë§ **Nome:** ${userData.nome}\\n${userData.banco.emoji} **Banco:** ${userData.banco.nome}\\nüí∞ **Saldo:** ${userData.saldo} Gold`);\n                break;\n            }\n\n            // Se n√£o tem argumentos, mostra como usar\n            if (args.length < 2) {\n                let bancosText = \"üè¶ **BANCOS DISPON√çVEIS:**\\n\\n\";\n                rpg.bancos.forEach((banco, index) => {\n                    bancosText += `${index + 1}. ${banco.emoji} ${banco.nome}\\n`;\n                });\n\n                const configBot = obterConfiguracoes();\n                await reply(sock, from, `üèôÔ∏è **REGISTRO NA NEEXTCITY**\\n\\n${bancosText}\\nüí° **Como usar:**\\n\\`${configBot.prefix}registrar [nome] [n√∫mero_do_banco]\\`\\n\\nüìù **Exemplo:**\\n\\`${configBot.prefix}registrar Jo√£o 3\\` (para Nubank)`);\n                break;\n            }\n\n            const nome = args[0];\n            const bancoIndex = parseInt(args[1]) - 1;\n\n            if (!nome || nome.length < 2) {\n                await reply(sock, from, \"‚ùå Nome deve ter pelo menos 2 caracteres.\");\n                break;\n            }\n\n            if (isNaN(bancoIndex) || bancoIndex < 0 || bancoIndex >= rpg.bancos.length) {\n                await reply(sock, from, `‚ùå N√∫mero do banco inv√°lido. Escolha entre 1 e ${rpg.bancos.length}.`);\n                break;\n            }\n\n            const banco = rpg.bancos[bancoIndex];\n\n            if (rpg.registrarUsuario(userId, nome, banco.id)) {\n                await reply(sock, from, `üéâ **REGISTRO CONCLU√çDO!**\\n\\nüèôÔ∏è **Bem-vindo √† NeextCity!**\\n\\nüë§ **Nome:** ${nome}\\n${banco.emoji} **Banco:** ${banco.nome}\\nüí∞ **Saldo inicial:** 100 Gold\\n\\n‚ú® **Agora voc√™ pode:**\\n‚Ä¢ /pescar - Ganhe gold pescando\\n‚Ä¢ /minerar - Encontre minerais valiosos\\n‚Ä¢ /trabalhar - Trabalhe por dinheiro\\n‚Ä¢ /tigrinho - Teste sua sorte no cassino\\n‚Ä¢ /assalto - Assalte outros jogadores\\n‚Ä¢ /vermeusaldo - Veja seu progresso`);\n            } else {\n                await reply(sock, from, \"‚ùå Erro ao registrar. Tente novamente.\");\n            }\n        }\n        break;\n\n        case \"pescar\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            if (!rpg.isUsuarioRegistrado(userId)) {\n                const config = obterConfiguracoes();\n                await reply(sock, from, \"‚ùå Voc√™ precisa se registrar primeiro! Use `\" + config.prefix + \"registrar`\");\n                break;\n            }\n\n            const resultado = rpg.pescar(userId);\n\n            if (resultado.erro) {\n                if (resultado.erro === 'Cooldown') {\n                    await reply(sock, from, resultado.mensagem);\n                } else {\n                    await reply(sock, from, `‚ùå ${resultado.erro}`);\n                }\n                break;\n            }\n\n            // Envia resultado com imagem\n            await sock.sendMessage(from, {\n                image: { url: resultado.imagem },\n                caption: resultado.mensagem,\n                contextInfo: {\n                    forwardingScore: 100000,\n                    isForwarded: true,\n                    forwardedNewsletterMessageInfo: {\n                        newsletterJid: \"120363289739581116@newsletter\",\n                        newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                    },\n                    externalAdReply: {\n                        title: \"üé£ NeextCity - Sistema de Pesca\",\n                        body: \"¬© NEEXT LTDA\",\n                        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                        mediaType: 1,\n                        sourceUrl: \"https://www.neext.online\"\n                    }\n                }\n            }, { quoted: message });\n\n            if (resultado.sucesso) {\n                await reagirMensagem(sock, message, \"üé£\");\n            } else {\n                await reagirMensagem(sock, message, \"üíî\");\n            }\n        }\n        break;\n\n        case \"minerar\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            if (!rpg.isUsuarioRegistrado(userId)) {\n                const config = obterConfiguracoes();\n                await reply(sock, from, \"‚ùå Voc√™ precisa se registrar primeiro! Use `\" + config.prefix + \"registrar`\");\n                break;\n            }\n\n            const resultado = rpg.minerar(userId);\n\n            if (resultado.erro) {\n                if (resultado.erro === 'Cooldown') {\n                    await reply(sock, from, resultado.mensagem);\n                } else {\n                    await reply(sock, from, `‚ùå ${resultado.erro}`);\n                }\n                break;\n            }\n\n            // Envia resultado com imagem\n            await sock.sendMessage(from, {\n                image: { url: resultado.imagem },\n                caption: resultado.mensagem,\n                contextInfo: {\n                    forwardingScore: 100000,\n                    isForwarded: true,\n                    forwardedNewsletterMessageInfo: {\n                        newsletterJid: \"120363289739581116@newsletter\",\n                        newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                    },\n                    externalAdReply: {\n                        title: \"‚õèÔ∏è NeextCity - Sistema de Minera√ß√£o\",\n                        body: \"¬© NEEXT LTDA\",\n                        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                        mediaType: 1,\n                        sourceUrl: \"https://www.neext.online\"\n                    }\n                }\n            }, { quoted: message });\n\n            if (resultado.sucesso) {\n                await reagirMensagem(sock, message, \"‚õèÔ∏è\");\n            } else {\n                await reagirMensagem(sock, message, \"üíî\");\n            }\n        }\n        break;\n\n        case \"trabalhar\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            if (!rpg.isUsuarioRegistrado(userId)) {\n                const config = obterConfiguracoes();\n                await reply(sock, from, \"‚ùå Voc√™ precisa se registrar primeiro! Use `\" + config.prefix + \"registrar`\");\n                break;\n            }\n\n            const resultado = rpg.trabalhar(userId);\n\n            if (resultado.erro) {\n                if (resultado.erro === 'Cooldown') {\n                    await reply(sock, from, resultado.mensagem);\n                } else {\n                    await reply(sock, from, `‚ùå ${resultado.erro}`);\n                }\n                break;\n            }\n\n            await reply(sock, from, resultado.mensagem);\n            await reagirMensagem(sock, message, \"üíº\");\n        }\n        break;\n\n        case \"tigrinho\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            if (!rpg.isUsuarioRegistrado(userId)) {\n                const config = obterConfiguracoes();\n                await reply(sock, from, \"‚ùå Voc√™ precisa se registrar primeiro! Use `\" + config.prefix + \"registrar`\");\n                break;\n            }\n\n            const aposta = parseInt(args[0]);\n            if (!aposta || isNaN(aposta)) {\n                await reply(sock, from, `üé∞ **JOGO DO TIGRINHO** üêÖ\\n\\nüí° **Como jogar:**\\n\\`${config.prefix}tigrinho [valor]\\`\\n\\nüìù **Exemplo:**\\n\\`${config.prefix}tigrinho 50\\`\\n\\nüé≤ **Regras:**\\n‚Ä¢ Aposta m√≠nima: 10 Gold\\n‚Ä¢ 3 iguais = Pr√™mio maior\\n‚Ä¢ 2 iguais = Pr√™mio menor\\n‚Ä¢ üíéüíéüíé = JACKPOT! (10x)\\n‚Ä¢ üêÖüêÖüêÖ = Tigrinho! (5x)`);\n                break;\n            }\n\n            const resultado = rpg.jogarTigrinho(userId, aposta);\n\n            if (resultado.erro) {\n                await reply(sock, from, `‚ùå ${resultado.erro}`);\n                break;\n            }\n\n            await reply(sock, from, resultado.mensagem);\n\n            if (resultado.ganhou) {\n                await reagirMensagem(sock, message, \"üéâ\");\n            } else {\n                await reagirMensagem(sock, message, \"üò¢\");\n            }\n        }\n        break;\n\n        case \"assalto\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            if (!rpg.isUsuarioRegistrado(userId)) {\n                const config = obterConfiguracoes();\n                await reply(sock, from, \"‚ùå Voc√™ precisa se registrar primeiro! Use `\" + config.prefix + \"registrar`\");\n                break;\n            }\n\n            // Verifica se marcou algu√©m\n            const mentionedJid = message.message?.extendedTextMessage?.contextInfo?.mentionedJid;\n            if (!mentionedJid || mentionedJid.length === 0) {\n                await reply(sock, from, `üî´ **SISTEMA DE ASSALTO**\\n\\nüí° **Como usar:**\\nMarque a pessoa que deseja assaltar\\n\\nüìù **Exemplo:**\\n\\`${config.prefix}assalto @usuario\\`\\n\\n‚ö†Ô∏è **Regras:**\\n‚Ä¢ Cooldown: 15 minutos\\n‚Ä¢ Chance de sucesso: 60%\\n‚Ä¢ Voc√™ rouba 20% do saldo da v√≠tima\\n‚Ä¢ Se falhar, paga multa de 30 Gold`);\n                break;\n            }\n\n            const targetId = mentionedJid[0].split('@')[0];\n            const resultado = rpg.assaltar(userId, targetId);\n\n            if (resultado.erro) {\n                if (resultado.erro === 'Cooldown') {\n                    await reply(sock, from, resultado.mensagem);\n                } else {\n                    await reply(sock, from, `‚ùå ${resultado.erro}`);\n                }\n                break;\n            }\n\n            await reply(sock, from, resultado.mensagem, mentionedJid);\n\n            if (resultado.assalto) {\n                await reagirMensagem(sock, message, \"üí∞\");\n            } else {\n                await reagirMensagem(sock, message, \"üö®\");\n            }\n        }\n        break;\n\n        case \"vermeusaldo\":\n        case \"saldo\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            if (!rpg.isUsuarioRegistrado(userId)) {\n                const config = obterConfiguracoes();\n                await reply(sock, from, \"‚ùå Voc√™ precisa se registrar primeiro! Use `\" + config.prefix + \"registrar`\");\n                break;\n            }\n\n            const userData = rpg.obterDadosUsuario(userId);\n            const dataRegistro = new Date(userData.registrado).toLocaleDateString('pt-BR');\n\n            const extrato = `üèôÔ∏è **EXTRATO NEEXTCITY**\\n\\n` +\n                          `üë§ **Nome:** ${userData.nome}\\n` +\n                          `${userData.banco.emoji} **Banco:** ${userData.banco.nome}\\n` +\n                          `üí∞ **Saldo:** ${userData.saldo} Gold\\n` +\n                          `üìÖ **Registrado em:** ${dataRegistro}\\n\\n` +\n                          `üìä **ESTAT√çSTICAS**\\n\\n` +\n                          `üé£ **Pescas:** ${userData.pescasFeitas}\\n` +\n                          `‚õèÔ∏è **Minera√ß√µes:** ${userData.mineracoesFeitas}\\n` +\n                          `üíº **Trabalhos:** ${userData.trabalhosFeitos}\\n` +\n                          `üî´ **Assaltos:** ${userData.assaltosFeitos}\\n\\n` +\n                          `¬© NEEXT LTDA - NeextCity`;\n\n            await reply(sock, from, extrato);\n            await reagirMensagem(sock, message, \"üè¶\");\n        }\n        break;\n\n        case \"rank\":\n        case \"ranking\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const ranking = rpg.obterRanking();\n            await reply(sock, from, ranking.mensagem);\n            await reagirMensagem(sock, message, \"üèÜ\");\n        }\n        break;\n\n        // ================== FIM DO SISTEMA RPG ==================\n\n        // ================== COMANDOS ADMINISTRATIVOS ==================\n\n        case \"fechargrupo\":\n        case \"fechar\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para fechar o grupo.\");\n                break;\n            }\n\n            try {\n                await sock.groupSettingUpdate(from, 'announcement');\n                await reagirMensagem(sock, message, \"üîí\");\n                await reply(sock, from, \"üîí *GRUPO FECHADO!*\\n\\nApenas admins podem enviar mensagens agora.\");\n                console.log(`üîí Grupo ${from} foi fechado por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao fechar grupo:\", err);\n                await reply(sock, from, \"‚ùå Erro ao fechar o grupo. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        case \"abrirgrupo\":\n        case \"abrir\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para abrir o grupo.\");\n                break;\n            }\n\n            try {\n                await sock.groupSettingUpdate(from, 'not_announcement');\n                await reagirMensagem(sock, message, \"üîì\");\n                await reply(sock, from, \"üîì *GRUPO ABERTO!*\\n\\nTodos os membros podem enviar mensagens agora.\");\n                console.log(`üîì Grupo ${from} foi aberto por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao abrir grupo:\", err);\n                await reply(sock, from, \"‚ùå Erro ao abrir o grupo. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        case \"delmsg\":\n        case \"del\":\n        case \"delete\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para deletar mensagens.\");\n                break;\n            }\n\n            // Verifica se h√° mensagem marcada\n            const quotedMsg = message.message.extendedTextMessage?.contextInfo?.quotedMessage;\n            if (!quotedMsg) {\n                await reply(sock, from, \"‚ùå Marque uma mensagem para deletar!\");\n                break;\n            }\n\n            try {\n                const quotedKey = message.message.extendedTextMessage.contextInfo.stanzaId;\n                const quotedParticipant = message.message.extendedTextMessage.contextInfo.participant;\n\n                const messageKey = {\n                    remoteJid: from,\n                    fromMe: false,\n                    id: quotedKey,\n                    participant: quotedParticipant\n                };\n\n                await sock.sendMessage(from, { delete: messageKey });\n                await reagirMensagem(sock, message, \"üóëÔ∏è\");\n                console.log(`üóëÔ∏è Mensagem deletada por admin ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao deletar mensagem:\", err);\n                await reply(sock, from, \"‚ùå Erro ao deletar mensagem. A mensagem pode ser muito antiga ou j√° ter sido deletada.\");\n            }\n        }\n        break;\n\n        case \"resetlink\":\n        case \"resetarlink\":\n        case \"novolink\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para resetar o link do grupo.\");\n                break;\n            }\n\n            try {\n                const newLink = await sock.groupRevokeInvite(from);\n                await reagirMensagem(sock, message, \"üîó\");\n                await reply(sock, from, `üîó *LINK DO GRUPO RESETADO!*\\n\\n‚úÖ Novo link: https://chat.whatsapp.com/${newLink}\\n\\n‚ö†Ô∏è O link anterior foi invalidado!`);\n                console.log(`üîó Link do grupo ${from} foi resetado por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao resetar link:\", err);\n                await reply(sock, from, \"‚ùå Erro ao resetar o link do grupo. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        case \"ativarsolicitacao\":\n        case \"ativarjoin\":\n        case \"reqon\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para alterar configura√ß√µes do grupo.\");\n                break;\n            }\n\n            try {\n                await sock.groupToggleEphemeral(from, false);\n                await sock.groupSettingUpdate(from, 'locked');\n                await reagirMensagem(sock, message, \"‚úÖ\");\n                await reply(sock, from, \"‚úÖ *SOLICITA√á√ÉO DE ENTRADA ATIVADA!*\\n\\nNovos membros precisar√£o da aprova√ß√£o dos admins para entrar.\");\n                console.log(`‚úÖ Solicita√ß√£o de entrada ativada no grupo ${from} por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao ativar solicita√ß√£o:\", err);\n                await reply(sock, from, \"‚ùå Erro ao ativar solicita√ß√£o de entrada. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        case \"desativarsolicitacao\":\n        case \"desativarjoin\":\n        case \"reqoff\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para alterar configura√ß√µes do grupo.\");\n                break;\n            }\n\n            try {\n                await sock.groupSettingUpdate(from, 'unlocked');\n                await reagirMensagem(sock, message, \"‚ùå\");\n                await reply(sock, from, \"‚ùå *SOLICITA√á√ÉO DE ENTRADA DESATIVADA!*\\n\\nQualquer pessoa com o link pode entrar no grupo agora.\");\n                console.log(`‚ùå Solicita√ß√£o de entrada desativada no grupo ${from} por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao desativar solicita√ß√£o:\", err);\n                await reply(sock, from, \"‚ùå Erro ao desativar solicita√ß√£o de entrada. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        case \"soloadmin\":\n        case \"adminonly\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para alterar configura√ß√µes do grupo.\");\n                break;\n            }\n\n            try {\n                await sock.groupSettingUpdate(from, 'locked');\n                await reagirMensagem(sock, message, \"üîí\");\n                await reply(sock, from, \"üîí *EDI√á√ÉO RESTRITA!*\\n\\nApenas admins podem editar as informa√ß√µes do grupo (nome, descri√ß√£o, foto).\");\n                console.log(`üîí Edi√ß√£o restrita a admins no grupo ${from} por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao restringir edi√ß√£o:\", err);\n                await reply(sock, from, \"‚ùå Erro ao restringir edi√ß√£o do grupo. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        case \"mudargrupo\":\n        case \"mudarnome\":\n        case \"renamegroup\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para mudar o nome do grupo.\");\n                break;\n            }\n\n            const novoNome = args.join(\" \").trim();\n            if (!novoNome) {\n                await reply(sock, from, `‚ùå Use: ${config.prefix}mudargrupo <novo nome>\\n\\nExemplo: ${config.prefix}mudargrupo NEEXT LTDA - Grupo Oficial`);\n                break;\n            }\n\n            if (novoNome.length > 25) {\n                await reply(sock, from, \"‚ùå O nome do grupo deve ter no m√°ximo 25 caracteres!\");\n                break;\n            }\n\n            try {\n                await sock.groupUpdateSubject(from, novoNome);\n                await reagirMensagem(sock, message, \"‚úèÔ∏è\");\n                await reply(sock, from, `‚úèÔ∏è *NOME DO GRUPO ALTERADO!*\\n\\nüìù Novo nome: \"${novoNome}\"\\nüë§ Alterado por: @${sender.split('@')[0]}`, [sender]);\n                console.log(`‚úèÔ∏è Nome do grupo ${from} alterado para \"${novoNome}\" por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao alterar nome do grupo:\", err);\n                await reply(sock, from, \"‚ùå Erro ao alterar o nome do grupo. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        case \"fotodobot\": {\n            const sender = message.key.participant || from;\n            const ehDono = isDono(sender);\n\n            if (!ehDono) {\n                await reply(sock, from, \"‚ùå Apenas o dono pode trocar a foto do bot.\");\n                break;\n            }\n\n            // Verifica se h√° imagem anexada ou marcada\n            let mediaData = null;\n            if (message.message.imageMessage) {\n                mediaData = message.message.imageMessage;\n            } else if (quoted?.imageMessage) {\n                mediaData = quoted.imageMessage;\n            }\n\n            if (!mediaData) {\n                await reply(sock, from, \"‚ùå Envie ou marque uma imagem para usar como foto do bot!\");\n                break;\n            }\n\n            try {\n                await reagirMensagem(sock, message, \"‚è≥\");\n\n                // Baixa a imagem\n                const buffer = await downloadContentFromMessage(mediaData, 'image');\n                let imageBuffer = Buffer.from([]);\n                for await (const chunk of buffer) {\n                    imageBuffer = Buffer.concat([imageBuffer, chunk]);\n                }\n\n                // Atualiza a foto do perfil do bot\n                await sock.updateProfilePicture(sock.user.id, imageBuffer);\n\n                await reagirMensagem(sock, message, \"‚úÖ\");\n                await reply(sock, from, \"‚úÖ *FOTO DO BOT ALTERADA!*\\n\\nA foto de perfil do bot foi atualizada com sucesso!\");\n                console.log(`üì∏ Foto do bot alterada por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao alterar foto do bot:\", err);\n                await reagirMensagem(sock, message, \"‚ùå\");\n                await reply(sock, from, \"‚ùå Erro ao alterar a foto do bot. Tente novamente.\");\n            }\n        }\n        break;\n\n        case \"fotodogrupo\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para alterar a foto do grupo.\");\n                break;\n            }\n\n            // Verifica se h√° imagem anexada ou marcada\n            let mediaData = null;\n            if (message.message.imageMessage) {\n                mediaData = message.message.imageMessage;\n            } else if (quoted?.imageMessage) {\n                mediaData = quoted.imageMessage;\n            }\n\n            if (!mediaData) {\n                await reply(sock, from, \"‚ùå Envie ou marque uma imagem para usar como foto do grupo!\");\n                break;\n            }\n\n            try {\n                await reagirMensagem(sock, message, \"‚è≥\");\n\n                // Baixa a imagem\n                const buffer = await downloadContentFromMessage(mediaData, 'image');\n                let imageBuffer = Buffer.from([]);\n                for await (const chunk of buffer) {\n                    imageBuffer = Buffer.concat([imageBuffer, chunk]);\n                }\n\n                // Atualiza a foto do grupo\n                await sock.updateProfilePicture(from, imageBuffer);\n\n                await reagirMensagem(sock, message, \"üì∏\");\n                await reply(sock, from, \"üì∏ *FOTO DO GRUPO ALTERADA!*\\n\\nA foto do grupo foi atualizada com sucesso!\");\n                console.log(`üì∏ Foto do grupo ${from} alterada por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao alterar foto do grupo:\", err);\n                await reagirMensagem(sock, message, \"‚ùå\");\n                await reply(sock, from, \"‚ùå Erro ao alterar a foto do grupo. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        // ================== FIM DOS COMANDOS ADMINISTRATIVOS ==================\n\n        // ================== COMANDOS DE MODO GAMER ==================\n\n        case \"modogamer\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n\n            // Verifica se √© admin\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas administradores podem usar este comando!\", [sender]);\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config) {\n                await reply(sock, from, \"‚ùå Erro ao carregar configura√ß√µes do grupo.\");\n                break;\n            }\n\n            const action = args[0]?.toLowerCase();\n\n            if (action === \"on\" || action === \"ativar\") {\n                if (config.modogamer) {\n                    await reply(sock, from, \"‚ö†Ô∏è Modo Gamer j√° est√° ativo neste grupo!\");\n                    break;\n                }\n\n                config.modogamer = true;\n                const salvou = antiSpam.salvarConfigGrupo(from, config);\n\n                if (salvou) {\n                    await reagirMensagem(sock, message, \"üéÆ\");\n                    await reply(sock, from,\n                        `üéÆ *MODO GAMER ATIVADO!*\\n\\n` +\n                        `‚úÖ Modo gamer foi ativado no grupo!\\n` +\n                        `üéØ Agora os membros podem usar jogos e comandos de divers√£o\\n\\n` +\n                        `üé≤ **Jogos dispon√≠veis:**\\n` +\n                        `‚Ä¢ ${config.prefix}eununca - Enquetes divertidas\\n` +\n                        `‚Ä¢ ${config.prefix}jogodaforca - Jogo da forca\\n` +\n                        `‚Ä¢ ${config.prefix}jogodavelha - Jogo da velha\\n` +\n                        `‚Ä¢ ${config.prefix}roletarussa - Roleta russa\\n\\n` +\n                        `üé™ **Comandos de divers√£o:**\\n` +\n                        `‚Ä¢ Rankings e intera√ß√µes dispon√≠veis\\n` +\n                        `‚Ä¢ Digite ${config.prefix}help para ver todos os comandos\\n\\n` +\n                        `üë§ Ativado por: @${sender.split('@')[0]}`,\n                        [sender]\n                    );\n                } else {\n                    await reply(sock, from, \"‚ùå Erro ao salvar configura√ß√£o. Tente novamente.\");\n                }\n            } else if (action === \"off\" || action === \"desativar\") {\n                if (!config.modogamer) {\n                    await reply(sock, from, \"‚ö†Ô∏è Modo Gamer j√° est√° desativado neste grupo!\");\n                    break;\n                }\n\n                config.modogamer = false;\n                const salvou = antiSpam.salvarConfigGrupo(from, config);\n\n                if (salvou) {\n                    await reagirMensagem(sock, message, \"üö´\");\n                    await reply(sock, from,\n                        `üö´ *MODO GAMER DESATIVADO!*\\n\\n` +\n                        `‚ùå Modo gamer foi desativado no grupo\\n` +\n                        `üîí Jogos e comandos de divers√£o n√£o funcionar√£o mais\\n\\n` +\n                        `üë§ Desativado por: @${sender.split('@')[0]}`,\n                        [sender]\n                    );\n                } else {\n                    await reply(sock, from, \"‚ùå Erro ao salvar configura√ß√£o. Tente novamente.\");\n                }\n            } else {\n                const status = config.modogamer ? \"‚úÖ ATIVO\" : \"‚ùå DESATIVO\";\n                await reply(sock, from,\n                    `üéÆ *STATUS DO MODO GAMER*\\n\\n` +\n                    `${status}\\n\\n` +\n                    `üìù **Uso:**\\n` +\n                    `‚Ä¢ ${config.prefix}modogamer on - Ativar\\n` +\n                    `‚Ä¢ ${config.prefix}modogamer off - Desativar\\n\\n` +\n                    `‚ö†Ô∏è Apenas administradores podem alterar`\n                );\n            }\n        }\n        break;\n\n        case \"eununca\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                const botConfig = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Modo Gamer est√° desativado neste grupo! Use \\`${botConfig.prefix}modogamer on\\` para ativar.`);\n                break;\n            }\n\n            const perguntas = [\n                \"j√° mandou nude\",\n                \"j√° ficou com algu√©m do grupo\",\n                \"j√° mentiu sobre a idade\",\n                \"j√° fingiu estar doente para faltar\",\n                \"j√° roubou algo\",\n                \"j√° traiu algu√©m\",\n                \"j√° foi tra√≠do\",\n                \"j√° chorou assistindo filme\",\n                \"j√° cantou no banho\",\n                \"j√° dan√ßou sozinho no quarto\",\n                \"j√° falou sozinho\",\n                \"j√° dormiu em aula\",\n                \"j√° colou em prova\",\n                \"j√° esqueceu o nome de algu√©m na hora de apresentar\",\n                \"j√° passou vergonha em p√∫blico\",\n                \"j√° mandou mensagem para pessoa errada\",\n                \"j√° stalkeou ex nas redes sociais\",\n                \"j√° fingiu que estava bem quando estava mal\",\n                \"j√° comeu comida do ch√£o\",\n                \"j√° usou roupa por mais de 2 dias seguidos\"\n            ];\n\n            const perguntaAleatoria = perguntas[Math.floor(Math.random() * perguntas.length)];\n\n            await sock.sendMessage(from, {\n                poll: {\n                    name: `ü§î Eu nunca... ${perguntaAleatoria}`,\n                    values: [\"üî• EU J√Å\", \"üòá EU NUNCA\"],\n                    selectableCount: 1\n                }\n            });\n        }\n        break;\n\n        case \"tapa\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const mentioned = message.message?.extendedTextMessage?.contextInfo?.mentionedJid;\n\n            if (!mentioned || mentioned.length === 0) {\n                await reply(sock, from, `‚ùå Marque algu√©m para dar um tapa!\\n\\nExemplo: ${config.prefix}tapa @usuario`);\n                break;\n            }\n\n            const target = mentioned[0];\n            await sock.sendMessage(from, {\n                image: { url: \"https://i.ibb.co/BK46Ssyy/21456a10884584ac06ed60363395b8db.jpg\" },\n                caption: `üëã *TAPA GOSTOSO!*\\n\\n@${sender.split('@')[0]} deu um tapa gostoso em @${target.split('@')[0]}! üí•\\n\\nüòè Ai que del√≠cia!`,\n                mentions: [sender, target]\n            });\n        }\n        break;\n\n        case \"rankcorno\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            try {\n                const groupMetadata = await sock.groupMetadata(from);\n                const participants = groupMetadata.participants.map(p => p.id);\n\n                // Embaralha e pega porcentagens aleat√≥rias\n                const shuffled = [...participants].sort(() => Math.random() - 0.5);\n                let ranking = shuffled.slice(0, Math.min(10, participants.length)).map((participant, index) => {\n                    const percentage = Math.floor(Math.random() * 100) + 1;\n                    return `${index + 1}. @${participant.split('@')[0]} - ${percentage}% ü§°`;\n                }).join('\\n');\n\n                await sock.sendMessage(from, {\n                    image: { url: \"https://i.ibb.co/jvxHn5jf/23afed681d95265b23cfc9f32b3c6a35.jpg\" },\n                    caption: `ü§° *RANKING DOS CORNOS*\\n\\n${ranking}\\n\\nüòà Os chifrudos do grupo! ü¶å`,\n                    mentions: participants\n                });\n            } catch (err) {\n                await reply(sock, from, \"‚ùå Erro ao gerar ranking.\");\n            }\n        }\n        break;\n\n        // Fun√ß√£o simples para envio de GIFs usando m√©todo padr√£o do Baileys\nasync function enviarGif(sock, from, gifUrl, caption, mentions = [], quoted = null) {\n    try {\n        console.log(`üé¨ Enviando GIF: ${gifUrl}`);\n\n        // Baixa o GIF\n        const response = await axios({\n            method: 'GET',\n            url: gifUrl,\n            responseType: 'arraybuffer',\n            timeout: 10000\n        });\n\n        const gifBuffer = Buffer.from(response.data);\n        console.log(`üì• GIF baixado: ${gifBuffer.length} bytes`);\n\n        // Envia como v√≠deo com gifPlayback (m√©todo padr√£o Baileys)\n        await sock.sendMessage(from, {\n            video: gifBuffer,\n            gifPlayback: true,\n            caption: caption,\n            mentions: mentions\n        }, quoted ? { quoted } : {});\n\n        console.log(\"‚úÖ GIF enviado como v√≠deo\");\n        return true;\n\n    } catch (error) {\n        console.log(\"‚ùå Erro ao enviar GIF:\", error.message);\n        return false;\n    }\n}\n\n        case \"matar\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                const botConfig = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Modo Gamer est√° desativado neste grupo! Use \\`${botConfig.prefix}modogamer on\\` para ativar.`);\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const mentioned = message.message?.extendedTextMessage?.contextInfo?.mentionedJid;\n\n            if (!mentioned || mentioned.length === 0) {\n                const botConfig = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Marque algu√©m para matar!\\n\\nExemplo: ${botConfig.prefix}matar @usuario`);\n                break;\n            }\n\n            const target = mentioned[0];\n\n            // Envia GIF usando m√©todo simples\n            const gifEnviado = await enviarGif(\n                sock,\n                from,\n                \"https://i.ibb.co/DgWJjj0K/58712ef364b6fdef5ae9bcbb48fc0fdb.gif\",\n                `üíÄ *ASSASSINATO!*\\n\\n@${sender.split('@')[0]} matou @${target.split('@')[0]}! ‚ö∞Ô∏è\\n\\nü©∏ RIP... F no chat`,\n                [sender, target],\n                message\n            );\n\n            if (!gifEnviado) {\n                // Fallback para texto se o GIF falhar\n                await reply(sock, from, `üíÄ *ASSASSINATO!*\\n\\n@${sender.split('@')[0]} matou @${target.split('@')[0]}! ‚ö∞Ô∏è\\n\\nü©∏ RIP... F no chat`, [sender, target]);\n            }\n        }\n        break;\n\n        case \"atirar\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                const botConfig = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Modo Gamer est√° desativado neste grupo! Use \\`${botConfig.prefix}modogamer on\\` para ativar.`);\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const mentioned = message.message?.extendedTextMessage?.contextInfo?.mentionedJid;\n\n            if (!mentioned || mentioned.length === 0) {\n                const botConfig = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Marque algu√©m para atirar!\\n\\nExemplo: ${botConfig.prefix}atirar @usuario`);\n                break;\n            }\n\n            const target = mentioned[0];\n\n            // Envia GIF usando m√©todo simples\n            const gifEnviado = await enviarGif(\n                sock,\n                from,\n                \"https://i.ibb.co/KpVxK1PB/9ab46702d1f0669a0ae40464b25568f2.gif\",\n                `üî´ *TIRO CERTEIRO!*\\n\\n@${sender.split('@')[0]} atirou em @${target.split('@')[0]}! üí•\\n\\nüéØ Pegou em cheio!`,\n                [sender, target],\n                message\n            );\n\n            if (!gifEnviado) {\n                // Fallback para texto se o GIF falhar\n                await reply(sock, from, `üî´ *TIRO CERTEIRO!*\\n\\n@${sender.split('@')[0]} atirou em @${target.split('@')[0]}! üí•\\n\\nüéØ Pegou em cheio!`, [sender, target]);\n            }\n        }\n        break;\n\n        case \"rankcasal\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            try {\n                const groupMetadata = await sock.groupMetadata(from);\n                const participants = groupMetadata.participants.map(p => p.id);\n\n                if (participants.length < 2) {\n                    await reply(sock, from, \"‚ùå Precisa ter pelo menos 2 pessoas no grupo!\");\n                    break;\n                }\n\n                // Escolhe duas pessoas aleat√≥rias\n                const shuffled = [...participants].sort(() => Math.random() - 0.5);\n                const pessoa1 = shuffled[0];\n                const pessoa2 = shuffled[1];\n                const compatibility = Math.floor(Math.random() * 100) + 1;\n                const love1 = Math.floor(Math.random() * 100) + 1;\n                const love2 = Math.floor(Math.random() * 100) + 1;\n\n                await sock.sendMessage(from, {\n                    image: { url: \"https://i.ibb.co/1G69wkJD/d32b5cfe067aa82bf2a5356c39499539.jpg\" },\n                    caption: `üíï *RANK CASAL*\\n\\n` +\n                        `üë´ Casal formado:\\n` +\n                        `üíù @${pessoa1.split('@')[0]} ‚ù§Ô∏è @${pessoa2.split('@')[0]}\\n\\n` +\n                        `üìä Compatibilidade: ${compatibility}%\\n` +\n                        `üíñ @${pessoa1.split('@')[0]} gosta ${love1}% de @${pessoa2.split('@')[0]}\\n` +\n                        `üíò @${pessoa2.split('@')[0]} gosta ${love2}% de @${pessoa1.split('@')[0]}\\n\\n` +\n                        `${compatibility > 80 ? 'üî• Casal perfeito!' : compatibility > 60 ? 'üòç Muito amor!' : compatibility > 40 ? 'üòä Pode dar certo!' : 'üíî Melhor s√≥ amigos!'}`,\n                    mentions: [pessoa1, pessoa2]\n                });\n            } catch (err) {\n                await reply(sock, from, \"‚ùå Erro ao gerar ranking de casal.\");\n            }\n        }\n        break;\n\n        case \"prender\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const mentioned = message.message?.extendedTextMessage?.contextInfo?.mentionedJid;\n\n            if (!mentioned || mentioned.length === 0) {\n                await reply(sock, from, `‚ùå Marque algu√©m para prender!\\n\\nExemplo: ${config.prefix}prender @usuario`);\n                break;\n            }\n\n            const crimes = [\n                \"roubo de cora√ß√£o\", \"excesso de beleza\", \"ser muito gostoso(a)\", \"causar suspiros\",\n                \"roubar olhares\", \"ser irresist√≠vel\", \"crime de sedu√ß√£o\", \"atentado ao pudor\",\n                \"porte ilegal de charme\", \"forma√ß√£o de quadrilha do amor\", \"assalto ao cora√ß√£o\",\n                \"tr√°fico de sorrisos\", \"porte de sorriso fatal\", \"estelionato sentimental\"\n            ];\n\n            const target = mentioned[0];\n            const crime = crimes[Math.floor(Math.random() * crimes.length)];\n\n            await sock.sendMessage(from, {\n                image: { url: \"https://i.ibb.co/XfrfGk3n/bfde95077068d135cbcf9e039147b2c0.jpg\" },\n                caption: `üöî *PRIS√ÉO!*\\n\\n@${target.split('@')[0]} foi preso(a) por @${sender.split('@')[0]}!\\n\\n‚õìÔ∏è Crime: ${crime}\\nüîí Fian√ßa: 10 beijinhos!`,\n                mentions: [sender, target]\n            });\n        }\n        break;\n\n        case \"beijar\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                const botConfig = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Modo Gamer est√° desativado neste grupo! Use \\`${botConfig.prefix}modogamer on\\` para ativar.`);\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const mentioned = message.message?.extendedTextMessage?.contextInfo?.mentionedJid;\n\n            if (!mentioned || mentioned.length === 0) {\n                const botConfig = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Marque algu√©m para beijar!\\n\\nExemplo: ${botConfig.prefix}beijar @usuario`);\n                break;\n            }\n\n            const target = mentioned[0];\n\n            // Envia texto diretamente com emojis, mais confi√°vel\n            await reply(sock, from, `üíã *BEIJINHO!*\\n\\n@${sender.split('@')[0]} deu um beijinho em @${target.split('@')[0]}! üòò\\n\\nüíï Que fofo! üíãüíãüíã`, [sender, target]);\n        }\n        break;\n\n        case \"atropelar\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                const botConfig = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Modo Gamer est√° desativado neste grupo! Use \\`${botConfig.prefix}modogamer on\\` para ativar.`);\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const mentioned = message.message?.extendedTextMessage?.contextInfo?.mentionedJid;\n\n            if (!mentioned || mentioned.length === 0) {\n                const botConfig = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Marque algu√©m para atropelar!\\n\\nExemplo: ${botConfig.prefix}atropelar @usuario`);\n                break;\n            }\n\n            const target = mentioned[0];\n\n            await reply(sock, from, `üöóüí® *ATROPELAMENTO!*\\n\\n@${target.split('@')[0]} foi atropelado(a) por @${sender.split('@')[0]}! üöë\\n\\nüòµ‚Äçüí´ Chamem o SAMU! üö®üö®üö®`, [sender, target]);\n        }\n        break;\n\n        case \"dedo\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                const botConfig = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Modo Gamer est√° desativado neste grupo! Use \\`${botConfig.prefix}modogamer on\\` para ativar.`);\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const mentioned = message.message?.extendedTextMessage?.contextInfo?.mentionedJid;\n\n            if (!mentioned || mentioned.length === 0) {\n                const botConfig = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Marque algu√©m para fazer dedo!\\n\\nExemplo: ${botConfig.prefix}dedo @usuario`);\n                break;\n            }\n\n            const target = mentioned[0];\n\n            await reply(sock, from, `üñï *DEDO!*\\n\\n@${sender.split('@')[0]} fez dedo para @${target.split('@')[0]}! üò†\\n\\nü§¨ Vai se lascar! üñïüñïüñï`, [sender, target]);\n        }\n        break;\n\n        case \"sarra\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                const botConfig = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Modo Gamer est√° desativado neste grupo! Use \\`${botConfig.prefix}modogamer on\\` para ativar.`);\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const mentioned = message.message?.extendedTextMessage?.contextInfo?.mentionedJid;\n\n            if (!mentioned || mentioned.length === 0) {\n                const botConfig = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Marque algu√©m para sarrar!\\n\\nExemplo: ${botConfig.prefix}sarra @usuario`);\n                break;\n            }\n\n            const target = mentioned[0];\n\n            await reply(sock, from, `üçë *SARRADA!*\\n\\n@${sender.split('@')[0]} deu uma sarrada em @${target.split('@')[0]}! üî•\\n\\nüòà Que safadeza! üî•üî•üî•`, [sender, target]);\n        }\n        break;\n\n        case \"rankgay\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            try {\n                const groupMetadata = await sock.groupMetadata(from);\n                const participants = groupMetadata.participants.map(p => p.id);\n\n                const shuffled = [...participants].sort(() => Math.random() - 0.5);\n                let ranking = shuffled.slice(0, Math.min(10, participants.length)).map((participant, index) => {\n                    const percentage = Math.floor(Math.random() * 100) + 1;\n                    return `${index + 1}. @${participant.split('@')[0]} - ${percentage}% üè≥Ô∏è‚Äçüåà`;\n                }).join('\\n');\n\n                await sock.sendMessage(from, {\n                    image: { url: \"https://i.ibb.co/9mzjcW0b/4f5a6af5b0375c87e9a3e63143e231fe.jpg\" },\n                    caption: `üè≥Ô∏è‚Äçüåà *RANKING GAY*\\n\\n${ranking}\\n\\n‚ú® Pride sem julgamentos! üåà`,\n                    mentions: participants\n                });\n            } catch (err) {\n                await reply(sock, from, \"‚ùå Erro ao gerar ranking.\");\n            }\n        }\n        break;\n\n        case \"rankburro\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            try {\n                const groupMetadata = await sock.groupMetadata(from);\n                const participants = groupMetadata.participants.map(p => p.id);\n\n                const shuffled = [...participants].sort(() => Math.random() - 0.5);\n                let ranking = shuffled.slice(0, Math.min(10, participants.length)).map((participant, index) => {\n                    const percentage = Math.floor(Math.random() * 100) + 1;\n                    return `${index + 1}. @${participant.split('@')[0]} - ${percentage}% üß†`;\n                }).join('\\n');\n\n                await sock.sendMessage(from, {\n                    image: { url: \"https://i.ibb.co/0VV96XgJ/7760232d1a909d291a3231e720bf5ec9.jpg\" },\n                    caption: `üß† *RANKING DOS BURROS*\\n\\n${ranking}\\n\\nü§™ Burrice extrema! üìâ`,\n                    mentions: participants\n                });\n            } catch (err) {\n                await reply(sock, from, \"‚ùå Erro ao gerar ranking.\");\n            }\n        }\n        break;\n\n        case \"ranklesbica\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            try {\n                const groupMetadata = await sock.groupMetadata(from);\n                const participants = groupMetadata.participants.map(p => p.id);\n\n                const shuffled = [...participants].sort(() => Math.random() - 0.5);\n                let ranking = shuffled.slice(0, Math.min(10, participants.length)).map((participant, index) => {\n                    const percentage = Math.floor(Math.random() * 100) + 1;\n                    return `${index + 1}. @${participant.split('@')[0]} - ${percentage}% üè≥Ô∏è‚Äçüåà`;\n                }).join('\\n');\n\n                await sock.sendMessage(from, {\n                    image: { url: \"https://i.ibb.co/jkwgSYYK/0607b00f9464319df28dcbe3b4a965dd.jpg\" },\n                    caption: `üè≥Ô∏è‚Äçüåà *RANKING L√âSBICA*\\n\\n${ranking}\\n\\nüíú Love is love! üåà`,\n                    mentions: participants\n                });\n            } catch (err) {\n                await reply(sock, from, \"‚ùå Erro ao gerar ranking.\");\n            }\n        }\n        break;\n\n        case \"impostor\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            try {\n                const groupMetadata = await sock.groupMetadata(from);\n                const participants = groupMetadata.participants.map(p => p.id);\n\n                if (participants.length < 2) {\n                    await reply(sock, from, \"‚ùå Precisa ter pelo menos 2 pessoas no grupo!\");\n                    break;\n                }\n\n                const impostor = participants[Math.floor(Math.random() * participants.length)];\n                const cores = [\"Vermelho\", \"Azul\", \"Verde\", \"Rosa\", \"Laranja\", \"Amarelo\", \"Preto\", \"Branco\", \"Roxo\", \"Marrom\"];\n                const cor = cores[Math.floor(Math.random() * cores.length)];\n\n                await sock.sendMessage(from, {\n                    image: { url: \"https://i.ibb.co/Q7Xb0Pxg/59f4312f9142a3529e1465a636a92ec7.jpg\" },\n                    caption: `üî¥ *IMPOSTOR DETECTADO!*\\n\\n@${impostor.split('@')[0]} √© o IMPOSTOR! üö®\\n\\nüé® Cor: ${cor}\\n‚ö†Ô∏è EJETEM ESSA PESSOA!\\n\\nüöÄ Among Us Vibes!`,\n                    mentions: [impostor]\n                });\n            } catch (err) {\n                await reply(sock, from, \"‚ùå Erro ao escolher impostor.\");\n            }\n        }\n        break;\n\n        case \"rankmaconheiro\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            try {\n                const groupMetadata = await sock.groupMetadata(from);\n                const participants = groupMetadata.participants.map(p => p.id);\n\n                const shuffled = [...participants].sort(() => Math.random() - 0.5);\n                let ranking = shuffled.slice(0, Math.min(10, participants.length)).map((participant, index) => {\n                    const percentage = Math.floor(Math.random() * 100) + 1;\n                    return `${index + 1}. @${participant.split('@')[0]} - ${percentage}% üåø`;\n                }).join('\\n');\n\n                await sock.sendMessage(from, {\n                    image: { url: \"https://i.ibb.co/NdvLNTPN/15026da7ed842481343ded7960a8f8d5.jpg\" },\n                    caption: `üåø *RANKING DOS MACONHEIROS*\\n\\n${ranking}\\n\\nüí® Os chapados! üçÉ`,\n                    mentions: participants\n                });\n            } catch (err) {\n                await reply(sock, from, \"‚ùå Erro ao gerar ranking.\");\n            }\n        }\n        break;\n\n        case \"rankbonito\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            try {\n                const groupMetadata = await sock.groupMetadata(from);\n                const participants = groupMetadata.participants.map(p => p.id);\n\n                const shuffled = [...participants].sort(() => Math.random() - 0.5);\n                let ranking = shuffled.slice(0, Math.min(10, participants.length)).map((participant, index) => {\n                    const percentage = Math.floor(Math.random() * 100) + 1;\n                    return `${index + 1}. @${participant.split('@')[0]} - ${percentage}% üòç`;\n                }).join('\\n');\n\n                await sock.sendMessage(from, {\n                    image: { url: \"https://i.ibb.co/CKNS2Frr/150f9a8e0becc71f9c20113addb3d433.jpg\" },\n                    caption: `üòç *RANKING DOS BONITOS*\\n\\n${ranking}\\n\\n‚ú® Os gostosos do grupo! üî•`,\n                    mentions: participants\n                });\n            } catch (err) {\n                await reply(sock, from, \"‚ùå Erro ao gerar ranking.\");\n            }\n        }\n        break;\n\n        case \"rankemo\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            try {\n                const groupMetadata = await sock.groupMetadata(from);\n                const participants = groupMetadata.participants.map(p => p.id);\n\n                const shuffled = [...participants].sort(() => Math.random() - 0.5);\n                let ranking = shuffled.slice(0, Math.min(10, participants.length)).map((participant, index) => {\n                    const percentage = Math.floor(Math.random() * 100) + 1;\n                    return `${index + 1}. @${participant.split('@')[0]} - ${percentage}% üñ§`;\n                }).join('\\n');\n\n                await sock.sendMessage(from, {\n                    image: { url: \"https://i.ibb.co/9mtKb5rC/92e9188040a0728af1a49c61dd0c9279.jpg\" },\n                    caption: `üñ§ *RANKING DOS EMOS*\\n\\n${ranking}\\n\\nüíÄ Os depressivos! üò≠`,\n                    mentions: participants\n                });\n            } catch (err) {\n                await reply(sock, from, \"‚ùå Erro ao gerar ranking.\");\n            }\n        }\n        break;\n\n        case \"rankfeio\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            try {\n                const groupMetadata = await sock.groupMetadata(from);\n                const participants = groupMetadata.participants.map(p => p.id);\n\n                const shuffled = [...participants].sort(() => Math.random() - 0.5);\n                let ranking = shuffled.slice(0, Math.min(10, participants.length)).map((participant, index) => {\n                    const percentage = Math.floor(Math.random() * 100) + 1;\n                    return `${index + 1}. @${participant.split('@')[0]} - ${percentage}% üëπ`;\n                }).join('\\n');\n\n                await sock.sendMessage(from, {\n                    image: { url: \"https://i.ibb.co/3x06vHm/7760232d1a909d291a3231e720bf5ec9.jpg\" },\n                    caption: `üëπ *RANKING DOS FEIOS*\\n\\n${ranking}\\n\\nü§Æ Os horrorosos! üò±`,\n                    mentions: participants\n                });\n            } catch (err) {\n                await reply(sock, from, \"‚ùå Erro ao gerar ranking.\");\n            }\n        }\n        break;\n\n        case \"jogodaforca\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            const palavras = [\n                \"JAVASCRIPT\", \"PROGRAMACAO\", \"COMPUTADOR\", \"TELEFONE\", \"INTERNET\",\n                \"WHATSAPP\", \"BRASIL\", \"FUTEBOL\", \"CHOCOLATE\", \"PIZZA\",\n                \"MUSICA\", \"CINEMA\", \"ESCOLA\", \"TRABALHO\", \"FAMILIA\",\n                \"AMIZADE\", \"VIAGEM\", \"DINHEIRO\", \"SAUDE\", \"FELICIDADE\"\n            ];\n\n            const palavra = palavras[Math.floor(Math.random() * palavras.length)];\n            const palavraOculta = palavra.replace(/./g, \"_ \");\n            const erros = 0;\n            const letrasUsadas = [];\n\n            // Salva o jogo em um sistema simples (pode ser expandido)\n            global.jogoDaForca = global.jogoDaForca || {};\n            global.jogoDaForca[from] = {\n                palavra: palavra,\n                palavraOculta: palavraOculta,\n                erros: erros,\n                letrasUsadas: letrasUsadas,\n                ativo: true\n            };\n\n            const desenhos = [\n                \"```\\n  +---+\\n  |   |\\n      |\\n      |\\n      |\\n      |\\n=========```\",\n                \"```\\n  +---+\\n  |   |\\n  O   |\\n      |\\n      |\\n      |\\n=========```\",\n                \"```\\n  +---+\\n  |   |\\n  O   |\\n  |   |\\n      |\\n      |\\n=========```\",\n                \"```\\n  +---+\\n  |   |\\n  O   |\\n /|   |\\n      |\\n      |\\n=========```\",\n                \"```\\n  +---+\\n  |   |\\n  O   |\\n /|\\\\  |\\n      |\\n      |\\n=========```\",\n                \"```\\n  +---+\\n  |   |\\n  O   |\\n /|\\\\  |\\n /    |\\n      |\\n=========```\",\n                \"```\\n  +---+\\n  |   |\\n  O   |\\n /|\\\\  |\\n / \\\\  |\\n      |\\n=========```\"\n            ];\n\n            await reply(sock, from,\n                `üéØ *JOGO DA FORCA INICIADO!*\\n\\n` +\n                `${desenhos[0]}\\n\\n` +\n                `üìù Palavra: ${palavraOculta}\\n` +\n                `‚ùå Erros: ${erros}/6\\n` +\n                `üî§ Letras usadas: Nenhuma\\n\\n` +\n                `üí° Digite uma letra para tentar adivinhar!\\n` +\n                `‚ö†Ô∏è Apenas letras A-Z s√£o aceitas`\n            );\n        }\n        break;\n\n        case \"jogodavelha\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const mentioned = message.message?.extendedTextMessage?.contextInfo?.mentionedJid;\n\n            if (!mentioned || mentioned.length === 0) {\n                await reply(sock, from, `‚ùå Marque algu√©m para jogar!\\n\\nExemplo: ${config.prefix}jogodavelha @usuario`);\n                break;\n            }\n\n            const oponente = mentioned[0];\n            if (oponente === sender) {\n                await reply(sock, from, \"‚ùå Voc√™ n√£o pode jogar contra si mesmo!\");\n                break;\n            }\n\n            // Inicializa o jogo\n            global.jogoDaVelha = global.jogoDaVelha || {};\n            global.jogoDaVelha[from] = {\n                jogador1: sender,\n                jogador2: oponente,\n                vezDe: sender,\n                tabuleiro: [\"1Ô∏è‚É£\", \"2Ô∏è‚É£\", \"3Ô∏è‚É£\", \"4Ô∏è‚É£\", \"5Ô∏è‚É£\", \"6Ô∏è‚É£\", \"7Ô∏è‚É£\", \"8Ô∏è‚É£\", \"9Ô∏è‚É£\"],\n                ativo: true\n            };\n\n            const tabuleiro =\n                `${global.jogoDaVelha[from].tabuleiro[0]} ${global.jogoDaVelha[from].tabuleiro[1]} ${global.jogoDaVelha[from].tabuleiro[2]}\\n` +\n                `${global.jogoDaVelha[from].tabuleiro[3]} ${global.jogoDaVelha[from].tabuleiro[4]} ${global.jogoDaVelha[from].tabuleiro[5]}\\n` +\n                `${global.jogoDaVelha[from].tabuleiro[6]} ${global.jogoDaVelha[from].tabuleiro[7]} ${global.jogoDaVelha[from].tabuleiro[8]}`;\n\n            await reply(sock, from,\n                `‚≠ï *JOGO DA VELHA INICIADO!*\\n\\n` +\n                `${tabuleiro}\\n\\n` +\n                `üë§ Jogador 1: @${sender.split('@')[0]} (‚ùå)\\n` +\n                `üë§ Jogador 2: @${oponente.split('@')[0]} (‚≠ï)\\n\\n` +\n                `üéØ Vez de: @${sender.split('@')[0]}\\n\\n` +\n                `üí° Digite um n√∫mero de 1 a 9 para fazer sua jogada!\\n` +\n                `üîÑ Use \\`${config.prefix}resetjogodavelha\\` para resetar o jogo`,\n                [sender, oponente]\n            );\n        }\n        break;\n\n        case \"resetjogodavelha\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            global.jogoDaVelha = global.jogoDaVelha || {};\n            if (!global.jogoDaVelha[from] || !global.jogoDaVelha[from].ativo) {\n                await reply(sock, from, \"‚ùå N√£o h√° jogo da velha ativo neste grupo!\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const jogo = global.jogoDaVelha[from];\n\n            // Verifica se √© um dos jogadores\n            if (sender !== jogo.jogador1 && sender !== jogo.jogador2) {\n                await reply(sock, from, \"‚ùå Apenas os jogadores podem resetar o jogo!\");\n                break;\n            }\n\n            delete global.jogoDaVelha[from];\n            await reply(sock, from, `üîÑ *JOGO DA VELHA RESETADO!*\\n\\nO jogo foi cancelado por @${sender.split('@')[0]}`, [sender]);\n        }\n        break;\n\n        case \"roletarussa\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const mentioned = message.message?.extendedTextMessage?.contextInfo?.mentionedJid;\n\n            if (!mentioned || mentioned.length === 0) {\n                const configBot = obterConfiguracoes();\n                await reply(sock, from, `‚ùå Marque algu√©m para jogar roleta russa!\\n\\nExemplo: ${configBot.prefix}roletarussa @usuario`);\n                break;\n            }\n\n            const oponente = mentioned[0];\n            if (oponente === sender) {\n                await reply(sock, from, \"‚ùå Voc√™ n√£o pode jogar contra si mesmo!\");\n                break;\n            }\n\n            // Inicializa o jogo\n            global.roletaRussa = global.roletaRussa || {};\n            global.roletaRussa[from] = {\n                jogador1: sender,\n                jogador2: oponente,\n                vezDe: sender,\n                balaFatal: Math.floor(Math.random() * 6) + 1, // Posi√ß√£o da bala (1-6)\n                tiroAtual: 1,\n                ativo: true\n            };\n\n            const configBot = obterConfiguracoes();\n            await sock.sendMessage(from, {\n                image: { url: \"https://i.ibb.co/chZjfM9c/4756f4254a2ac3974c9b6f33842e8b58.jpg\" },\n                caption:\n                    `üî´ *ROLETA RUSSA INICIADA!*\\n\\n` +\n                    `üíÄ A morte est√° √† espreita...\\n` +\n                    `üéØ 6 c√¢maras, 1 bala fatal!\\n\\n` +\n                    `üë§ Jogador 1: @${sender.split('@')[0]}\\n` +\n                    `üë§ Jogador 2: @${oponente.split('@')[0]}\\n\\n` +\n                    `üé≤ Vez de: @${sender.split('@')[0]}\\n\\n` +\n                    `üí• **ESCOLHA SEU DESTINO:**\\n` +\n                    `‚Ä¢ \\`${configBot.prefix}disparar\\` - Puxar o gatilho (RISCO!)\\n` +\n                    `‚Ä¢ \\`${configBot.prefix}passar\\` - Passar a vez (SEGURO!)\\n\\n` +\n                    `üîÑ Use \\`${configBot.prefix}resetroleta\\` para cancelar\\n\\n` +\n                    `‚ö†Ô∏è Coragem ou covardia? A escolha √© sua...`,\n                mentions: [sender, oponente]\n            });\n        }\n        break;\n\n        case \"resetroleta\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            global.roletaRussa = global.roletaRussa || {};\n            if (!global.roletaRussa[from] || !global.roletaRussa[from].ativo) {\n                await reply(sock, from, \"‚ùå N√£o h√° roleta russa ativa neste grupo!\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const jogo = global.roletaRussa[from];\n\n            // Verifica se √© um dos jogadores\n            if (sender !== jogo.jogador1 && sender !== jogo.jogador2) {\n                await reply(sock, from, \"‚ùå Apenas os jogadores podem cancelar o jogo!\");\n                break;\n            }\n\n            delete global.roletaRussa[from];\n            await reply(sock, from, `üîÑ *ROLETA RUSSA CANCELADA!*\\n\\nO jogo foi cancelado por @${sender.split('@')[0]}\\n\\nüòÆ‚Äçüí® Todos respiraram aliviados...`, [sender]);\n        }\n        break;\n\n        case \"disparar\": {\n            // Verifica se modo gamer est√° ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config || !config.modogamer) {\n                await reply(sock, from, \"‚ùå Modo Gamer est√° desativado neste grupo! Use `.modogamer on` para ativar.\");\n                break;\n            }\n\n            global.roletaRussa = global.roletaRussa || {};\n            if (!global.roletaRussa[from] || !global.roletaRussa[from].ativo) {\n                await reply(sock, from, \"‚ùå N√£o h√° roleta russa ativa neste grupo! Use `.roletarussa @usuario` para iniciar.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const jogo = global.roletaRussa[from];\n\n            // Verifica se √© um dos jogadores\n            if (sender !== jogo.jogador1 && sender !== jogo.jogador2) {\n                await reply(sock, from, \"‚ùå Apenas os jogadores podem disparar!\");\n                break;\n            }\n\n            // Verifica se √© a vez do jogador\n            if (sender !== jogo.vezDe) {\n                await reply(sock, from, `‚ùå N√£o √© sua vez! √â a vez de @${jogo.vezDe.split('@')[0]}`, [jogo.vezDe]);\n                break;\n            }\n\n            // Verifica se o jogo j√° deveria ter terminado (prote√ß√£o contra loop infinito)\n            if (jogo.tiroAtual > 6) {\n                // For√ßa final do jogo - algu√©m deve morrer\n                const vencedor = sender === jogo.jogador1 ? jogo.jogador2 : jogo.jogador1;\n\n                // Baixa o GIF primeiro\n                const response = await axios.get(\"https://i.ibb.co/DgWJjj0K/58712ef364b6fdef5ae9bcbb48fc0fdb.gif\", {\n                    responseType: 'arraybuffer',\n                    timeout: 10000\n                });\n                const gifBuffer = Buffer.from(response.data);\n\n                await sock.sendMessage(from, {\n                    video: gifBuffer,\n                    mimetype: \"image/gif\",\n                    gifPlayback: true,\n                    caption:\n                        `üí• *BANG! JOGO FOR√áADO!* üí•\\n\\n` +\n                        `üíÄ @${sender.split('@')[0]} morreu na c√¢mara extra! üî´\\n\\n` +\n                        `üèÜ *VENCEDOR:* @${vencedor.split('@')[0]} üéâ\\n` +\n                        `üìä O jogo foi muito longo - fim for√ßado!\\n\\n` +\n                        `‚ö∞Ô∏è Algu√©m tinha que morrer... üåπ\\n` +\n                        `‚è∞ Jogo excedeu 6 turnos!`,\n                    mentions: [sender, vencedor]\n                });\n\n                delete global.roletaRussa[from];\n                break;\n            }\n\n            // Processa o disparo\n            console.log(`üî´ Tiro ${jogo.tiroAtual} - Bala fatal na posi√ß√£o ${jogo.balaFatal}`);\n\n            if (jogo.tiroAtual === jogo.balaFatal) {\n                // BANG! Jogador morreu\n                const vencedor = sender === jogo.jogador1 ? jogo.jogador2 : jogo.jogador1;\n\n                // Envia GIF usando m√©todo simples\n                const gifEnviado = await enviarGif(\n                    sock,\n                    from,\n                    \"https://i.ibb.co/DgWJjj0K/58712ef364b6fdef5ae9bcbb48fc0fdb.gif\",\n                    `üí• *BANG! GAME OVER!* üí•\\n\\n` +\n                    `üíÄ @${sender.split('@')[0]} puxou a bala fatal e morreu! üî´\\n\\n` +\n                    `üèÜ *VENCEDOR:* @${vencedor.split('@')[0]} üéâ\\n` +\n                    `üìä Tiro fatal: ${jogo.tiroAtual}/6\\n\\n` +\n                    `‚ö∞Ô∏è RIP... que a terra te seja leve! üåπ\\n` +\n                    `üéØ O destino foi selado!`,\n                    [sender, vencedor]\n                );\n\n                if (!gifEnviado) {\n                    await reply(sock, from,\n                        `üí• *BANG! GAME OVER!* üí•\\n\\n` +\n                        `üíÄ @${sender.split('@')[0]} puxou a bala fatal e morreu! üî´\\n\\n` +\n                        `üèÜ *VENCEDOR:* @${vencedor.split('@')[0]} üéâ\\n` +\n                        `üìä Tiro fatal: ${jogo.tiroAtual}/6\\n\\n` +\n                        `‚ö∞Ô∏è RIP... que a terra te seja leve! üåπ\\n` +\n                        `üéØ O destino foi selado!`,\n                        [sender, vencedor]\n                    );\n                }\n\n                // Reset do jogo\n                delete global.roletaRussa[from];\n\n            } else {\n                // Clique! Jogador sobreviveu\n                const proximoJogador = sender === jogo.jogador1 ? jogo.jogador2 : jogo.jogador1;\n                jogo.vezDe = proximoJogador;\n                jogo.tiroAtual++;\n\n                const sobrevivencia = [\n                    \"escapou por pouco\", \"teve sorte desta vez\", \"a morte passou longe\",\n                    \"o destino poupou\", \"ainda n√£o chegou sua hora\", \"sobreviveu mais uma vez\"\n                ];\n                const frase = sobrevivencia[Math.floor(Math.random() * sobrevivencia.length)];\n\n                const configBot = obterConfiguracoes();\n\n                // Envia GIF usando m√©todo simples\n                const gifEnviado = await enviarGif(\n                    sock,\n                    from,\n                    \"https://i.ibb.co/yFvQCn1p/3b7300aa2a120ec29a2b4de808f40a77.gif\",\n                    `üî´ *CLIQUE!* Nada aconteceu... üò∞\\n\\n` +\n                    `üòÖ @${sender.split('@')[0]} ${frase}!\\n\\n` +\n                    `üé≤ *Pr√≥xima vez:* @${proximoJogador.split('@')[0]}\\n` +\n                    `üìä Tiro: ${jogo.tiroAtual - 1}/6\\n\\n` +\n                    `üí• Digite \\`${configBot.prefix}disparar\\` para continuar!\\n` +\n                    `‚ö° A tens√£o aumenta...`,\n                    [sender, proximoJogador]\n                );\n\n                if (!gifEnviado) {\n                    await reply(sock, from,\n                        `üî´ *CLIQUE!* Nada aconteceu... üò∞\\n\\n` +\n                        `üòÖ @${sender.split('@')[0]} ${frase}!\\n\\n` +\n                        `üé≤ *Pr√≥xima vez:* @${proximoJogador.split('@')[0]}\\n` +\n                        `üìä Tiro: ${jogo.tiroAtual - 1}/6\\n\\n` +\n                        `üí• Digite \\`${configBot.prefix}disparar\\` para continuar!\\n` +\n                        `‚ö° A tens√£o aumenta...`,\n                        [sender, proximoJogador]\n                    );\n                }\n            }\n        }\n        break;\n\n        default:\n            const config = obterConfiguracoes();\n            await reply(sock, from, `‚ùå Comando \"${command}\" n√£o encontrado.\\n\\nDigite \"prefixo\" para ver meu prefixo ou \"${config.prefix}ping\" para testar.`);\n            break;\n    }\n}\n\n// Processa jogadas dos jogos ativos\nasync function processarJogadas(sock, text, from, normalized) {\n    try {\n        const sender = normalized.key.participant || from;\n        const numero = parseInt(text.trim());\n\n        // Jogo da Velha\n        global.jogoDaVelha = global.jogoDaVelha || {};\n        if (global.jogoDaVelha[from] && global.jogoDaVelha[from].ativo) {\n            const jogo = global.jogoDaVelha[from];\n\n            // Verifica se √© a vez do jogador\n            if (sender !== jogo.vezDe) {\n                return false; // N√£o √© a vez dele, ignora\n            }\n\n            // Verifica se o n√∫mero √© v√°lido (1-9)\n            if (numero >= 1 && numero <= 9) {\n                const posicao = numero - 1;\n\n                // Verifica se a posi√ß√£o est√° livre\n                if (jogo.tabuleiro[posicao].includes(\"Ô∏è‚É£\")) {\n                    // Faz a jogada\n                    const simbolo = sender === jogo.jogador1 ? \"‚ùå\" : \"‚≠ï\";\n                    jogo.tabuleiro[posicao] = simbolo;\n\n                    // Verifica se ganhou\n                    const combinacoes = [\n                        [0,1,2], [3,4,5], [6,7,8], // linhas\n                        [0,3,6], [1,4,7], [2,5,8], // colunas\n                        [0,4,8], [2,4,6] // diagonais\n                    ];\n\n                    let ganhou = false;\n                    for (const combo of combinacoes) {\n                        if (combo.every(pos => jogo.tabuleiro[pos] === simbolo)) {\n                            ganhou = true;\n                            break;\n                        }\n                    }\n\n                    const tabuleiro =\n                        `${jogo.tabuleiro[0]} ${jogo.tabuleiro[1]} ${jogo.tabuleiro[2]}\\n` +\n                        `${jogo.tabuleiro[3]} ${jogo.tabuleiro[4]} ${jogo.tabuleiro[5]}\\n` +\n                        `${jogo.tabuleiro[6]} ${jogo.tabuleiro[7]} ${jogo.tabuleiro[8]}`;\n\n                    if (ganhou) {\n                        await reply(sock, from,\n                            `üèÜ *JOGO DA VELHA - VIT√ìRIA!*\\n\\n` +\n                            `${tabuleiro}\\n\\n` +\n                            `üéâ @${sender.split('@')[0]} GANHOU!\\n` +\n                            `üèÖ Parab√©ns pelo jogo!`,\n                            [sender]\n                        );\n                        delete global.jogoDaVelha[from];\n                        return true;\n                    }\n\n                    // Verifica empate\n                    if (jogo.tabuleiro.every(pos => !pos.includes(\"Ô∏è‚É£\"))) {\n                        await reply(sock, from,\n                            `ü§ù *JOGO DA VELHA - EMPATE!*\\n\\n` +\n                            `${tabuleiro}\\n\\n` +\n                            `üòÖ Deu velha! Ningu√©m ganhou!`\n                        );\n                        delete global.jogoDaVelha[from];\n                        return true;\n                    }\n\n                    // Alterna vez\n                    jogo.vezDe = sender === jogo.jogador1 ? jogo.jogador2 : jogo.jogador1;\n\n                    await reply(sock, from,\n                        `‚≠ï *JOGO DA VELHA*\\n\\n` +\n                        `${tabuleiro}\\n\\n` +\n                        `üéØ Vez de: @${jogo.vezDe.split('@')[0]}\\n` +\n                        `üí° Digite um n√∫mero de 1 a 9!`,\n                        [jogo.vezDe]\n                    );\n                    return true;\n                }\n            }\n        }\n\n        // Jogo da Forca\n        global.jogoDaForca = global.jogoDaForca || {};\n        if (global.jogoDaForca[from] && global.jogoDaForca[from].ativo) {\n            const jogo = global.jogoDaForca[from];\n            const letra = text.trim().toUpperCase();\n\n            // Verifica se √© uma letra v√°lida\n            if (letra.length === 1 && /[A-Z]/.test(letra)) {\n                if (jogo.letrasUsadas.includes(letra)) {\n                    await reply(sock, from, `‚ö†Ô∏è Letra **${letra}** j√° foi usada!`);\n                    return true;\n                }\n\n                jogo.letrasUsadas.push(letra);\n\n                if (jogo.palavra.includes(letra)) {\n                    // Acertou a letra\n                    let novaPalavraOculta = \"\";\n                    for (let i = 0; i < jogo.palavra.length; i++) {\n                        if (jogo.palavra[i] === letra || jogo.palavraOculta[i * 2] !== \"_\") {\n                            novaPalavraOculta += jogo.palavra[i] + \" \";\n                        } else {\n                            novaPalavraOculta += \"_ \";\n                        }\n                    }\n                    jogo.palavraOculta = novaPalavraOculta;\n\n                    // Verifica se ganhou\n                    if (!jogo.palavraOculta.includes(\"_\")) {\n                        await reply(sock, from,\n                            `üéâ *PARAB√âNS! VOC√ä GANHOU!*\\n\\n` +\n                            `üéØ Palavra: **${jogo.palavra}**\\n` +\n                            `‚úÖ Voc√™ adivinhou a palavra!\\n` +\n                            `üî§ Letras usadas: ${jogo.letrasUsadas.join(\", \")}`\n                        );\n                        delete global.jogoDaForca[from];\n                        return true;\n                    }\n\n                    await reply(sock, from,\n                        `‚úÖ *BOA! Letra encontrada!*\\n\\n` +\n                        `üìù Palavra: ${jogo.palavraOculta}\\n` +\n                        `‚ùå Erros: ${jogo.erros}/6\\n` +\n                        `üî§ Letras usadas: ${jogo.letrasUsadas.join(\", \")}`\n                    );\n                } else {\n                    // Errou a letra\n                    jogo.erros++;\n\n                    const desenhos = [\n                        \"```\\n  +---+\\n  |   |\\n      |\\n      |\\n      |\\n      |\\n=========```\",\n                        \"```\\n  +---+\\n  |   |\\n  O   |\\n      |\\n      |\\n      |\\n=========```\",\n                        \"```\\n  +---+\\n  |   |\\n  O   |\\n  |   |\\n      |\\n      |\\n=========```\",\n                        \"```\\n  +---+\\n  |   |\\n  O   |\\n /|   |\\n      |\\n      |\\n=========```\",\n                        \"```\\n  +---+\\n  |   |\\n  O   |\\n /|\\\\  |\\n      |\\n      |\\n=========```\",\n                        \"```\\n  +---+\\n  |   |\\n  O   |\\n /|\\\\  |\\n /    |\\n      |\\n=========```\",\n                        \"```\\n  +---+\\n  |   |\\n  O   |\\n /|\\\\  |\\n / \\\\  |\\n      |\\n=========```\"\n                    ];\n\n                    if (jogo.erros >= 6) {\n                        await reply(sock, from,\n                            `üíÄ *GAME OVER! VOC√ä PERDEU!*\\n\\n` +\n                            `${desenhos[6]}\\n\\n` +\n                            `üéØ A palavra era: **${jogo.palavra}**\\n` +\n                            `‚ùå Voc√™ foi enforcado!\\n` +\n                            `üî§ Letras usadas: ${jogo.letrasUsadas.join(\", \")}`\n                        );\n                        delete global.jogoDaForca[from];\n                        return true;\n                    }\n\n                    await reply(sock, from,\n                        `‚ùå *Letra n√£o encontrada!*\\n\\n` +\n                        `${desenhos[jogo.erros]}\\n\\n` +\n                        `üìù Palavra: ${jogo.palavraOculta}\\n` +\n                        `‚ùå Erros: ${jogo.erros}/6\\n` +\n                        `üî§ Letras usadas: ${jogo.letrasUsadas.join(\", \")}`\n                    );\n                }\n                return true;\n            }\n        }\n\n        return false;\n    } catch (error) {\n        console.error(\"‚ùå Erro ao processar jogada:\", error);\n        return false;\n    }\n}\n\n// Fun√ß√£o para processar mensagens do Akinator\nasync function processarAkinator(sock, text, from, normalized) {\n    try {\n        const gameIndex = akinator.map(i => i.id).indexOf(from);\n        if (gameIndex === -1 || !akinator[gameIndex].aki) return false;\n\n        const respostas = {\n            \"sim\": 0,\n            \"n√£o\": 1,\n            \"nao\": 1,\n            \"n√£o sei\": 2,\n            \"nao sei\": 2,\n            \"provavelmente sim\": 3,\n            \"provavelmente n√£o\": 4,\n            \"provavelmente nao\": 4\n        };\n\n        const resposta = text.toLowerCase().trim();\n        if (!(resposta in respostas)) return false;\n\n        const gameData = akinator[gameIndex];\n        const answer = respostas[resposta];\n\n        try {\n            await gameData.aki.step(answer);\n            gameData.step++;\n\n            if (gameData.aki.progress >= 85 || gameData.step >= 20) {\n                await gameData.aki.win();\n                const guess = gameData.aki.answers[0];\n\n                if (guess) {\n                    akinator[gameIndex].finish = 1;\n                    salvarAkinator();\n\n                    await sock.sendMessage(from, {\n                        image: { url: guess.absolute_picture_path || \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\" },\n                        caption: `üßû‚Äç‚ôÇÔ∏è *EU ACHO QUE √â...*\\n\\nüë§ **${guess.name}**\\nüìù **Descri√ß√£o:** ${guess.description}\\nüéØ **Confian√ßa:** ${Math.round(guess.proba * 100)}%\\n\\nü§î Acertei? Responda *sim* ou *n√£o*`,\n                        contextInfo: {\n                            forwardingScore: 100000,\n                            isForwarded: true,\n                            forwardedNewsletterMessageInfo: {\n                                newsletterJid: \"120363289739581116@newsletter\",\n                                newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                            }\n                        }\n                    });\n                } else {\n                    await reply(sock, from, \"üßû‚Äç‚ôÇÔ∏è Hmm... n√£o consegui adivinhar desta vez! Voc√™ venceu! üéâ\");\n                    akinator.splice(gameIndex, 1);\n                    salvarAkinator();\n                }\n            } else {\n                await reply(sock, from, `üßû‚Äç‚ôÇÔ∏è *PERGUNTA ${gameData.step + 1}:*\\n‚Ä¢ ${gameData.aki.question}\\n\\nüìä Progresso: ${Math.round(gameData.aki.progress)}%`);\n            }\n        } catch (err) {\n            console.error(\"‚ùå Erro no Akinator:\", err);\n            await reply(sock, from, \"‚ùå Erro no jogo do Akinator. Tente resetar com .resetaki\");\n        }\n\n        return true;\n    } catch (error) {\n        console.error(\"‚ùå Erro ao processar Akinator:\", error);\n        return false;\n    }\n}\n\n// Fun√ß√£o principal de setup dos listeners\nfunction setupListeners(sock) {\n    sock.ev.on(\"messages.upsert\", async ({ messages }) => {\n        try {\n            for (const m of messages) {\n                if (!m.message || m.key.fromMe) continue;\n\n                const messageId = m.key.id;\n                if (processedMessages.has(messageId)) continue;\n                processedMessages.add(messageId);\n\n                const { normalized, quoted } = normalizeMessage(m);\n                const text = getMessageText(normalized.message);\n                const from = normalized.key.remoteJid;\n\n                if (!text) continue;\n\n                // Log da mensagem\n                logMensagem(normalized, text);\n\n                // Processa anti-spam primeiro\n                const violacaoDetectada = await processarAntiSpam(sock, normalized);\n                if (violacaoDetectada) continue;\n\n                // Processa jogadas de jogos ativos\n                const jogadaProcessada = await processarJogadas(sock, text, from, normalized);\n                if (jogadaProcessada) continue;\n\n                // Processa Akinator\n                const akinatorProcessado = await processarAkinator(sock, text, from, normalized);\n                if (akinatorProcessado) continue;\n\n                // Processa comandos\n                const config = obterConfiguracoes();\n                if (text.startsWith(config.prefix)) {\n                    const args = text.slice(config.prefix.length).trim().split(/ +/);\n                    const command = args.shift()?.toLowerCase();\n\n                    if (command) {\n                        logMensagem(normalized, text, true);\n                        await handleCommand(sock, normalized, command, args, from, quoted);\n                    }\n                }\n            }\n        } catch (error) {\n            console.error(\"‚ùå Erro no processamento de mensagens:\", error);\n        }\n    });\n\n    // Listener para participantes adicionados/removidos\n    sock.ev.on(\"group-participants.update\", async ({ id, participants, action }) => {\n        try {\n            await processarListaNegra(sock, participants, id, action);\n        } catch (error) {\n            console.error(\"‚ùå Erro ao processar mudan√ßa de participantes:\", error);\n        }\n    });\n\n    console.log(\"‚úÖ Event listeners configurados com sucesso!\");\n}\n\n// Exporta a fun√ß√£o de setup\nmodule.exports = { setupListeners };\n","size_bytes":205182},"main.js":{"content":"#!/usr/bin/env node\n\n/**\n * WhatsApp Bot - Main Entry Point\n * This file handles the bot startup with proper error handling and reconnection logic\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Console colors for better output\nconst colors = {\n    reset: '\\x1b[0m',\n    bright: '\\x1b[1m',\n    red: '\\x1b[31m',\n    green: '\\x1b[32m',\n    yellow: '\\x1b[33m',\n    blue: '\\x1b[34m',\n    magenta: '\\x1b[35m',\n    cyan: '\\x1b[36m'\n};\n\nfunction log(message, color = colors.reset) {\n    console.log(`${color}${message}${colors.reset}`);\n}\n\nfunction logError(error) {\n    console.error(`${colors.red}‚ùå ERROR: ${error.message}${colors.reset}`);\n    if (process.env.DEBUG) {\n        console.error(error.stack);\n    }\n}\n\nfunction logInfo(message) {\n    log(`${colors.blue}‚ÑπÔ∏è  ${message}`, colors.blue);\n}\n\nfunction logSuccess(message) {\n    log(`${colors.green}‚úÖ ${message}`, colors.green);\n}\n\nfunction logWarning(message) {\n    log(`${colors.yellow}‚ö†Ô∏è  ${message}`, colors.yellow);\n}\n\nfunction ensureDirectoryExists(dir) {\n    if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true });\n        logInfo(`Created directory: ${dir}`);\n    }\n}\n\nfunction validateDependencies() {\n    const requiredDeps = [\n        '@whiskeysockets/baileys',\n        'axios',\n        'fs',\n        'path'\n    ];\n    \n    const packageJson = require('./package.json');\n    const installedDeps = { ...packageJson.dependencies, ...packageJson.devDependencies };\n    \n    for (const dep of requiredDeps) {\n        if (!installedDeps[dep] && dep !== 'fs' && dep !== 'path') {\n            throw new Error(`Required dependency \"${dep}\" is not installed. Run: npm install ${dep}`);\n        }\n    }\n    logSuccess('All dependencies validated');\n}\n\nasync function startBot() {\n    try {\n        logInfo('Starting WhatsApp Bot...');\n        \n        // Validate environment\n        validateDependencies();\n        \n        // Ensure connection directory exists\n        ensureDirectoryExists('./conexao');\n        \n        // Start the actual bot\n        require('./connect.js');\n        \n    } catch (error) {\n        logError(error);\n        process.exit(1);\n    }\n}\n\n// Handle process signals gracefully\nprocess.on('SIGINT', () => {\n    logWarning('Received SIGINT, shutting down gracefully...');\n    process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n    logWarning('Received SIGTERM, shutting down gracefully...');\n    process.exit(0);\n});\n\nprocess.on('uncaughtException', (error) => {\n    logError(error);\n    logError(new Error('Uncaught Exception - Bot will restart'));\n    process.exit(1);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n    logError(new Error(`Unhandled Rejection at: ${promise}, reason: ${reason}`));\n    logError(new Error('Unhandled Promise Rejection - Bot will restart'));\n    process.exit(1);\n});\n\n// Start the bot\nstartBot();","size_bytes":2873},"replit.md":{"content":"# WhatsApp Bot - NEEXT LTDA\n\n## Vis√£o Geral\nBot WhatsApp automatizado constru√≠do com Baileys, com sistema de antilink avan√ßado e funcionalidades de administra√ß√£o de grupos.\n\n## Funcionalidades Principais\n\n### ü§ñ Comandos do Bot\n- **`.ping`** - Verifica status do bot e informa√ß√µes do sistema\n- **`.hora`** - Mostra hor√°rio atual\n- **`.dono`** - Identifica o dono do bot\n- **`.marca`** - Menciona todos os membros do grupo (apenas em grupos)\n- **`.recado`** - Confirma que bot est√° ativo\n- **`.s`** - Converte imagem/v√≠deo para sticker\n- **`.hermitwhite`** - Cria ID no sistema NEEXT (requer dados pessoais)\n- **`prefixo`** - Mostra o prefixo do bot (sem prefixo)\n\n### ‚ö° Comandos Administrativos\n**Comandos exclusivos para administradores que exigem que o bot tamb√©m seja admin:**\n\n#### üîí Controle do Grupo\n- **`.fechargrupo`** ou **`.fechar`** - Fecha o grupo (apenas admins podem enviar mensagens)\n- **`.abrirgrupo`** ou **`.abrir`** - Abre o grupo (todos podem enviar mensagens)\n- **`.soloadmin`** ou **`.adminonly`** - Permite apenas admins editarem informa√ß√µes do grupo\n\n#### üóëÔ∏è Modera√ß√£o de Mensagens\n- **`.delmsg`**, **`.del`** ou **`.delete`** - Deleta mensagem marcada (use respondendo a uma mensagem)\n\n#### üîó Gerenciamento de Link\n- **`.resetlink`**, **`.resetarlink`** ou **`.novolink`** - Gera novo link de convite e invalida o anterior\n\n#### üë• Controle de Entrada\n- **`.ativarsolicitacao`**, **`.ativarjoin`** ou **`.reqon`** - Ativa aprova√ß√£o obrigat√≥ria para novos membros\n- **`.desativarsolicitacao`**, **`.desativarjoin`** ou **`.reqoff`** - Desativa aprova√ß√£o obrigat√≥ria\n\n#### ‚úèÔ∏è Edi√ß√£o do Grupo\n- **`.mudargrupo`**, **`.mudarnome`** ou **`.renamegroup [nome]`** - Altera o nome do grupo\n\n**Requisitos:**\n- ‚úÖ Usu√°rio deve ser admin do grupo\n- ‚úÖ Bot deve ser admin do grupo\n- ‚úÖ Funciona apenas em grupos\n- ‚ö†Ô∏è Se o bot n√£o for admin, ser√° exibido aviso espec√≠fico\n\n### üÜî Sistema de Cria√ß√£o de ID - NEEXT\nComando para criar IDs √∫nicos no sistema da NEEXT LTDA:\n\n#### Como Usar:\n- **`.hermitwhite [nome] [idade] [telefone] [instagram] [email]`** - Cria um novo ID\n\n#### Exemplo:\n```\n.hermitwhite Jo√£o Silva 25 5527999999999 @joao_silva joao@gmail.com\n```\n\n#### Valida√ß√µes:\n- ‚úÖ Todos os campos s√£o obrigat√≥rios\n- ‚úÖ Instagram deve incluir o @ (ex: @usuario)\n- ‚úÖ Telefone deve ter 10-15 d√≠gitos (ex: 5527999999999)\n- ‚úÖ Email deve ser v√°lido (ex: usuario@provedor.com)\n\n#### Recursos:\n- ‚úÖ Integra√ß√£o com API Google Sheets\n- ‚úÖ Gera√ß√£o autom√°tica de ID sequencial\n- ‚úÖ Valida√ß√£o completa de dados\n- ‚úÖ Mensagem de confirma√ß√£o com ID gerado\n- ‚úÖ Tratamento de erros robusto\n\n### üéÆ Jogo Akinator\nSistema de jogo interativo do Akinator (g√™nio da l√¢mpada):\n\n#### Como Usar:\n- **`.akinator`** - Inicia uma nova partida do jogo\n- **`.resetaki`** - Reseta/cancela a partida atual\n\n#### Como Jogar:\n1. Digite `.akinator` em um grupo para iniciar\n2. Responda as perguntas com: **Sim**, **N√£o**, **N√£o sei**, **Provavelmente sim** ou **Provavelmente n√£o**\n3. O Akinator tentar√° adivinhar o personagem que voc√™ est√° pensando\n4. Use `.resetaki` para cancelar o jogo a qualquer momento\n\n#### Recursos:\n- ‚úÖ Funciona apenas em grupos\n- ‚úÖ Uma partida por grupo por vez\n- ‚úÖ Controle de acesso por jogador\n- ‚úÖ Limite de uma partida por dia\n- ‚úÖ Sistema de reset para admins e quem iniciou o jogo\n- ‚úÖ Respostas inteligentes em portugu√™s\n- ‚ö†Ô∏è API pode estar sujeita a limita√ß√µes de Cloudflare\n\n### üõ°Ô∏è Sistema Antilink\nSistema completo de prote√ß√£o contra links em grupos:\n\n#### Como Usar:\n- **`.antilink on`** - Ativa antilink no grupo\n- **`.antilink off`** - Desativa antilink no grupo\n- **`.antilink`** - Verifica status atual\n\n#### Recursos:\n- ‚úÖ Detecta automaticamente links em mensagens\n- ‚úÖ Remove mensagens com links instantaneamente\n- ‚úÖ Protege admins e dono (n√£o remove suas mensagens)\n- ‚úÖ Configura√ß√£o por grupo (salva em JSON)\n- ‚úÖ Apenas admins podem ativar/desativar\n- ‚úÖ Feedback visual com rea√ß√µes e mensagens\n\n#### Links Detectados:\n- URLs com http/https\n- Links do WhatsApp (wa.me, chat.whatsapp.com)\n- Redes sociais (Instagram, Facebook, Twitter, TikTok, YouTube)\n- Telegram (t.me)\n- Discord (discord.gg)\n- E muito mais...\n\n### üîß Configura√ß√µes\nAs configura√ß√µes do bot est√£o em `settings/settings.json`:\n- **prefix**: Prefixo dos comandos (padr√£o: \".\")\n- **nomeDoBot**: Nome do bot\n- **numeroDoDono**: N√∫mero do dono do bot\n- **nickDoDono**: Apelido do dono\n\n### üìÅ Estrutura do Projeto\n- `main.js` - Script principal com tratamento de erros\n- `connect.js` - Gerenciamento de conex√£o WhatsApp\n- `index.js` - L√≥gica do bot e comandos\n- `settings/settings.json` - Configura√ß√µes do bot\n- `arquivos/` - Fun√ß√µes utilit√°rias e assets\n- `conexao/` - Arquivos de sess√£o WhatsApp (auto-gerados)\n\n### üöÄ Como Executar\nO bot √© executado automaticamente via Workflow do Replit:\n1. Conecta automaticamente ao WhatsApp\n2. Se primeira vez, solicita m√©todo de conex√£o (QR Code ou Pareamento)\n3. Processa mensagens e comandos em tempo real\n\n### üìä Logs e Monitoramento\n- Logs detalhados de todas as mensagens processadas\n- Identifica√ß√£o de comandos vs mensagens normais\n- Rastreamento de a√ß√µes do antilink\n- Tratamento de erros robusto\n\n### üîê Seguran√ßa\n- Arquivos de sess√£o exclu√≠dos do Git\n- Verifica√ß√£o de permiss√µes para comandos administrativos\n- Prote√ß√£o contra spam com cache de mensagens processadas\n\n## Altera√ß√µes Recentes\n- ‚úÖ Implementado sistema completo de antilink\n- ‚úÖ Adicionadas verifica√ß√µes de admin e dono\n- ‚úÖ Criado sistema de configura√ß√£o por grupo\n- ‚úÖ Melhorado tratamento de erros\n- ‚úÖ Adicionadas rea√ß√µes visuais aos comandos\n- ‚úÖ Configurado para funcionar no ambiente Replit\n- ‚úÖ Melhorada implementa√ß√£o do comando Pinterest\n- ‚úÖ Instaladas todas as depend√™ncias necess√°rias\n- ‚úÖ **NOVO**: Implementado jogo do Akinator com aki-api\n- ‚úÖ **NOVO**: Adicionados comandos .akinator e .resetaki\n- ‚úÖ **NOVO**: Sistema de gest√£o de partidas por grupo\n- ‚úÖ **NOVO**: Processamento inteligente de respostas do usu√°rio\n- ‚úÖ **NOVO**: Estrutura de banco de dados para jogos\n- ‚úÖ **RECENTE**: Implementados 8 comandos administrativos completos\n- ‚úÖ **RECENTE**: Sistema autom√°tico de contagem de comandos\n- ‚úÖ **RECENTE**: Controle total de grupos (abrir/fechar/resetar link)\n- ‚úÖ **RECENTE**: Modera√ß√£o avan√ßada (deletar mensagens, controlar entrada)\n- ‚úÖ **RECENTE**: Verifica√ß√µes robustas de permiss√µes admin\n\n## Estado Atual\n‚úÖ **Bot Online e Funcionando no Replit**\n‚úÖ **Antilink Implementado e Testado**\n‚úÖ **Todos os Comandos Operacionais**\n‚úÖ **Comando Pinterest Melhorado**\n‚úÖ **Workflow Configurado e Rodando**\n‚úÖ **Depend√™ncias Instaladas e Funcionando**\n‚úÖ **Stickers com Selinho Quotado Implementado**\n‚úÖ **Deployment Configurado para Produ√ß√£o (VM)**\n‚úÖ **Bot Conectado e Processando Comandos Ativamente**\n‚úÖ **Menu Principal Reformulado com Estat√≠sticas Din√¢micas**\n‚úÖ **Sistema de Configura√ß√£o Seguro Implementado**\n\n### üÜï Funcionalidades Recentes\n- **Menu Principal Avan√ßado**: Novo design com contadores de comandos, grupos e registros\n- **Configura√ß√£o de Seguran√ßa**: Template `.env.example` para configura√ß√£o segura\n- **Estat√≠sticas Din√¢micas**: Contagem autom√°tica de comandos, grupos e usu√°rios registrados\n- **Sistema de Cargo**: Detec√ß√£o autom√°tica de cargo (Dono, Admin, Membro)\n- **Sauda√ß√£o Inteligente**: Sauda√ß√µes baseadas no hor√°rio atual\n\n### üöÄ Ambiente de Produ√ß√£o\n- **Deployment Target**: VM (para conex√£o persistente)\n- **Comando de Produ√ß√£o**: `node main.js`\n- **Status**: Pronto para deploy\n\n## Configura√ß√£o para Replit\nEste projeto foi configurado para funcionar no ambiente Replit com as seguintes otimiza√ß√µes:\n\n### ‚úÖ Configura√ß√£o Realizada\n- **Workflow Configurado**: Bot executa via `node main.js` no console\n- **Depend√™ncias Instaladas**: Todas as depend√™ncias do package.json instaladas com sucesso\n- **Arquivos Corrompidos Corrigidos**: Removidos duplicatas e erros de sintaxe do index.js\n- **Configura√ß√£o de Seguran√ßa**: Settings.json configurado com valores seguros (placeholders)\n- **Estrutura de Pastas**: Todas as pastas necess√°rias criadas automaticamente\n\n### üîê Configura√ß√£o de Ambiente\nPara usar o bot, configure as seguintes vari√°veis de ambiente baseadas no arquivo `.env.example`:\n\n- `BOT_OWNER_NUMBER`: Seu n√∫mero de WhatsApp (formato: 5527999999999)\n- `BOT_OWNER_NICKNAME`: Seu apelido\n- `BOT_NAME`: Nome do bot\n- `BOT_PREFIX`: Prefixo dos comandos (padr√£o: .)\n- `BOT_PHOTO_URL`: URL da foto do bot\n\n### üöÄ Como Iniciar no Replit\n1. O bot inicia automaticamente quando o projeto √© executado\n2. Na primeira execu√ß√£o, escolha o m√©todo de conex√£o:\n   - **QR Code**: Para conectar via computador\n   - **Pareamento**: Para conectar via celular (digite seu n√∫mero)\n3. Ap√≥s conectar, o bot ficar√° online e processar√° comandos automaticamente\n\n### üìÅ Arquivos de Sess√£o\n- Pasta `conexao/`: Cont√©m arquivos de sess√£o do WhatsApp (gerados automaticamente)\n- Estes arquivos mant√™m a sess√£o ativa entre reinicializa√ß√µes\n- **Importante**: N√£o compartilhar estes arquivos pois cont√™m credenciais de acesso","size_bytes":9266},"start.sh":{"content":"#!/bin/bash\n\nGREEN='\\033[1;32m'\nBLUE='\\033[0;34m'\n\nwhile :\ndo\n    # Texto de conex√£o\n    printf \"${BLUE} NEEXT LTDA ùêÇùêéùêçùêÑùêÇùêìùêÄùêçùêÉùêé, ùêÄùêÜùêîùêÄùêëùêÉùêÑ\\n\"\n\n    # Chama index.js com par√¢metro opcional\n    if [ \"$1\" = \"sim\" ]; then\n        node index.js sim\n    elif [ \"$1\" = \"n√£o\" ]; then\n        node connect.js n√£o\n    else\n        node connect.js\n    fi\n\n    # Texto de inicializa√ß√£o\n    printf \"${GREEN}„Äé NEEXT LTDA „ÄèùêàùêçùêàùêÇùêàùêÄùêçùêÉùêé  ùêçùêéùêïùêÄùêåùêÑùêçùêìùêÑ\\n\"\n\n    sleep 1\ndone","size_bytes":560},"arquivos/exif.js":{"content":"const fs = require('fs');\nconst { writeExif } = require('./sticker.js');\n\n// Fun√ß√£o para converter imagem para WebP\nasync function imageToWebp(buffer, customMetadata = {}) {\n    try {\n        // Usa a fun√ß√£o existente do sticker.js\n        const media = { data: buffer, mimetype: 'image/jpeg' };\n        const metadata = { \n            packname: customMetadata.packname || \"NEEXT LTDA\", \n            author: customMetadata.author || \"NEEXT BOT\" \n        };\n        return await writeExif(media, metadata);\n    } catch (error) {\n        console.error('Erro ao converter imagem para WebP:', error);\n        throw error;\n    }\n}\n\n// Fun√ß√£o para converter v√≠deo para WebP\nasync function videoToWebp(buffer, customMetadata = {}) {\n    try {\n        // Usa a fun√ß√£o existente do sticker.js para v√≠deos\n        const media = { data: buffer, mimetype: 'video/mp4' };\n        const metadata = { \n            packname: customMetadata.packname || \"NEEXT LTDA\", \n            author: customMetadata.author || \"NEEXT BOT\" \n        };\n        return await writeExif(media, metadata);\n    } catch (error) {\n        console.error('Erro ao converter v√≠deo para WebP:', error);\n        throw error;\n    }\n}\n\n// Fun√ß√£o para escrever EXIF em imagens com dados personalizados\nasync function writeExifImg(buffer, options = {}) {\n    try {\n        // Marca como rename para usar APENAS valores do usu√°rio\n        const packname = options.packname;\n        const author = options.author;\n        const media = { data: buffer, mimetype: 'image/jpeg' };\n        const metadata = { packname, author, _isRename: true };\n        return await writeExif(media, metadata);\n    } catch (error) {\n        console.error('Erro ao escrever EXIF na imagem:', error);\n        throw error;\n    }\n}\n\n// Fun√ß√£o para escrever EXIF em v√≠deos com dados personalizados\nasync function writeExifVid(buffer, options = {}) {\n    try {\n        // Marca como rename para usar APENAS valores do usu√°rio\n        const packname = options.packname;\n        const author = options.author;\n        const media = { data: buffer, mimetype: 'video/mp4' };\n        const metadata = { packname, author, _isRename: true };\n        return await writeExif(media, metadata);\n    } catch (error) {\n        console.error('Erro ao escrever EXIF no v√≠deo:', error);\n        console.log('üîÑ Tentando processar como imagem est√°tica...');\n        \n        // Fallback: tenta processar como imagem se falhar como v√≠deo\n        try {\n            const packname = options.packname;\n            const author = options.author;\n            const media = { data: buffer, mimetype: 'image/webp' };\n            const metadata = { packname, author, _isRename: true };\n            return await writeExif(media, metadata);\n        } catch (fallbackError) {\n            console.error('‚ùå Fallback tamb√©m falhou:', fallbackError);\n            throw error; // Lan√ßa o erro original\n        }\n    }\n}\n\nmodule.exports = {\n    imageToWebp,\n    videoToWebp,\n    writeExifImg,\n    writeExifVid\n};","size_bytes":3027},"arquivos/rename.js":{"content":"const fs = require('fs-extra');\nconst {\nimageToWebp,\nvideoToWebp,\nwriteExifImg,\nwriteExifVid\n} = require('./exif');\nconst {\ngetBuffer\n} = require('./funcoes/function.js');\n\n// Selinho para usar como quoted nos stickers\nconst selinho = {\n    key: { fromMe: false, participant: `13135550002@s.whatsapp.net`, remoteJid: 'status@broadcast' },\n    message: { contactMessage: { displayName: 'NEEXT LTDA', vcard: `BEGIN:VCARD\\nVERSION:3.0\\nN:Kuun;Flash;;;\\nFN:Flash Kuun\\nitem1.TEL;waid=13135550002:+1 (313) 555-0002\\nitem1.X-ABLabel:Mobile\\nEND:VCARD`, sendEphemeral: true } }\n};\n\nconst sendImageAsSticker = async (conn, jid, path, quoted, options = {}) => {\nlet buff = Buffer.isBuffer(path) ? path : /^data:.*?\\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\\/\\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0);\n let buffer;\n // SEMPRE usa writeExifImg para preservar metadados personalizados\n buffer = await writeExifImg(buff, options);\n\n// ContextInfo para fazer aparecer como \"enviada via an√∫ncio\"\nconst contextAnuncio = {\n    externalAdReply: {\n        title: \"¬© NEEXT LTDA\",\n        body: \"üì± Instagram: @neet.tk\",\n        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n        mediaType: 1,\n        sourceUrl: \"https://www.neext.online\",\n        showAdAttribution: true\n    }\n};\n\nawait conn.sendMessage(jid, {\n    sticker: {url: buffer}, \n    contextInfo: contextAnuncio,\n    ...options\n}, {quoted: selinho})\nreturn buffer;\n};\n\n\n\nconst sendVideoAsSticker = async (conn, jid, path, quoted, options = {}) => {\nlet buff = Buffer.isBuffer(path) ? path : /^data:.*?\\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\\/\\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0);\n let buffer;\n // SEMPRE usa writeExifVid para preservar metadados personalizados\n buffer = await writeExifVid(buff, options);\n\n// ContextInfo para fazer aparecer como \"enviada via an√∫ncio\"\nconst contextAnuncio = {\n    externalAdReply: {\n        title: \"¬© NEEXT LTDA\",\n        body: \"üì± Instagram: @neet.tk\",\n        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n        mediaType: 1,\n        sourceUrl: \"https://www.neext.online\",\n        showAdAttribution: true\n    }\n};\n\nawait conn.sendMessage(jid, { \n    sticker: { url: buffer }, \n    contextInfo: contextAnuncio,\n    ...options \n}, { quoted: selinho })\nreturn buffer;\n}\n\nmodule.exports = {\nsendVideoAsSticker,\nsendImageAsSticker\n};","size_bytes":2586},"arquivos/sticker.js":{"content":"const fs = require(\"fs\");\nconst { tmpdir } = require(\"os\");\nconst path = require(\"path\");\nconst Crypto = require(\"crypto\");\nconst ff = require(\"fluent-ffmpeg\");\nconst webp = require(\"node-webpmux\");\n\n// Gera arquivo tempor√°rio\nfunction getRandomFile(ext) {\n    return path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}${ext}`);\n}\n\n// Converte Buffer para WebP preservando transpar√™ncia\nasync function bufferToWebp(buffer, isVideo = false, mimetype = null) {\n    // Detecta extens√£o correta baseada no mimetype para preservar transpar√™ncia\n    let inputExt;\n    if (isVideo) {\n        inputExt = \".mp4\";\n    } else if (mimetype) {\n        if (mimetype.includes('png')) inputExt = \".png\";\n        else if (mimetype.includes('webp')) inputExt = \".webp\";\n        else if (mimetype.includes('gif')) inputExt = \".gif\";\n        else inputExt = \".jpg\";\n    } else {\n        inputExt = \".jpg\";\n    }\n\n    const input = getRandomFile(inputExt);\n    const output = getRandomFile(\".webp\");\n\n    fs.writeFileSync(input, buffer);\n\n    await new Promise((resolve, reject) => {\n        const ffmpegCommand = ff(input)\n            .on(\"error\", (err) => {\n                // Cleanup input file on error\n                if (fs.existsSync(input)) fs.unlinkSync(input);\n                reject(err);\n            })\n            .on(\"end\", () => resolve());\n\n        if (isVideo) {\n            // Para v√≠deos: m√°ximo 6 segundos, 512px, preserva transpar√™ncia\n            ffmpegCommand\n                .duration(6)\n                .addOutputOptions([\n                    \"-vcodec\", \"libwebp\",\n                    \"-vf\", \"fps=15,scale=512:512:force_original_aspect_ratio=decrease,format=rgba,pad=512:512:(ow-iw)/2:(oh-ih)/2:color=0x00000000,setsar=1\",\n                    \"-loop\", \"0\",\n                    \"-preset\", \"default\",\n                    \"-an\",\n                    \"-vsync\", \"0\",\n                    \"-q:v\", \"80\",\n                    \"-lossless\", \"0\"\n                ]);\n        } else {\n            // Para imagens: 512px, preserva transpar√™ncia, sem fps\n            ffmpegCommand\n                .addOutputOptions([\n                    \"-vcodec\", \"libwebp\",\n                    \"-vf\", \"scale=512:512:force_original_aspect_ratio=decrease,format=rgba,pad=512:512:(ow-iw)/2:(oh-ih)/2:color=0x00000000,setsar=1\",\n                    \"-loop\", \"0\",\n                    \"-preset\", \"default\",\n                    \"-an\",\n                    \"-vsync\", \"0\",\n                    \"-q:v\", \"90\"\n                ]);\n        }\n\n        ffmpegCommand\n            .toFormat(\"webp\")\n            .save(output);\n    });\n\n    // Cleanup input file\n    if (fs.existsSync(input)) fs.unlinkSync(input);\n    return output;\n}\n\n// Fun√ß√£o writeExif para compatibilidade com index.js\nasync function writeExif(media, metadata) {\n    const { mimetype, data } = media;\n    \n    // Para comando RENAME: usa EXATAMENTE os valores fornecidos sem fallbacks\n    // Para outros comandos: usa fallbacks NEEXT se n√£o houver valores\n    let packname, author, categories;\n    \n    if (metadata._isRename) {\n        // Comando rename: usa APENAS os valores fornecidos pelo usu√°rio\n        packname = metadata.packname;\n        author = metadata.author;\n        categories = metadata.categories || [\"üòé\"];\n    } else {\n        // Outros comandos: pode usar fallbacks NEEXT\n        packname = metadata.packname || \"NEEXT LTDA\";\n        author = metadata.author || \"NEEXT BOT\";\n        categories = metadata.categories || [\"üòé\"];\n    }\n    \n    // Detecta se √© v√≠deo/GIF\n    const isVideo = mimetype && (\n        mimetype.includes('video') || \n        mimetype.includes('gif') ||\n        mimetype === 'image/gif'\n    );\n    \n    const webpFile = await bufferToWebp(data, isVideo, mimetype);\n    const img = new webp.Image();\n    await img.load(webpFile);\n\n    const json = {\n        \"sticker-pack-id\": `${packname}-${Date.now()}`,\n        \"sticker-pack-name\": packname,\n        \"sticker-pack-publisher\": author,\n        \"sticker-pack-categories\": categories\n    };\n\n    const exifAttr = Buffer.from([0x49,0x49,0x2A,0x00,0x08,0x00,0x00,0x00,0x01,0x00,0x41,0x57,0x07,0x00,0x00,0x00,0x00,0x00,0x16,0x00,0x00,0x00]);\n    const jsonBuff = Buffer.from(JSON.stringify(json), \"utf-8\");\n    const exif = Buffer.concat([exifAttr, jsonBuff]);\n    exif.writeUIntLE(jsonBuff.length, 14, 4);\n\n    img.exif = exif;\n    await img.save(webpFile);\n\n    return webpFile;\n}\n\n// Cria sticker e envia (vers√£o melhorada)\nasync function createSticker(buffer, sock, from, isVideo = false) {\n    try {\n        const agora = new Date();\n        const dataHora = `${agora.toLocaleDateString('pt-BR')} ${agora.toLocaleTimeString('pt-BR')}`;\n        \n        const webpFile = await writeExif(\n            { mimetype: isVideo ? 'video/mp4' : 'image/jpeg', data: buffer },\n            { \n                packname: \"NEEXT LTDA\", \n                author: `NEEXT BOT - ${dataHora}`, \n                categories: [\"üî•\"] \n            }\n        );\n        \n        const stickerBuffer = fs.readFileSync(webpFile);\n        await sock.sendMessage(from, { sticker: stickerBuffer });\n        fs.unlinkSync(webpFile);\n        \n        console.log(\"‚úÖ Figurinha criada com sucesso!\");\n    } catch (err) {\n        console.log(\"‚ùå Erro ao criar figurinha:\", err);\n        await sock.sendMessage(from, { text: \"‚ùå Erro ao criar figurinha.\" });\n    }\n}\n\nmodule.exports = { createSticker, writeExif };","size_bytes":5439},"menus/menu.js":{"content":"// menu.js - Sistema de menus organizados do bot NEEXT LTDA\n\n// Fun√ß√£o para obter configura√ß√µes atualizadas em tempo real\nfunction obterConfiguracoes() {\n    delete require.cache[require.resolve('../settings/settings.json')];\n    return require('../settings/settings.json');\n}\n\n// Importa fun√ß√µes utilit√°rias\nconst { obterSaudacao, contarGrupos, contarComandos } = require('../arquivos/funcoes/function.js');\nconst { obterEstatisticas } = require('../arquivos/registros.js');\n\n// Fun√ß√£o para determinar cargo do usu√°rio\nasync function obterCargoUsuario(sock, from, sender) {\n    try {\n        // Verifica se √© o dono\n        const config = obterConfiguracoes();\n        const numeroDono = config.numeroDoDono + \"@s.whatsapp.net\";\n        if (sender === numeroDono) {\n            return \"üëë Dono\";\n        }\n\n        // Se estiver em grupo, verifica se √© admin\n        if (from.endsWith('@g.us') || from.endsWith('@lid')) {\n            try {\n                const groupMetadata = await sock.groupMetadata(from);\n                const participant = groupMetadata.participants.find(p => p.id === sender);\n                if (participant && (participant.admin === 'admin' || participant.admin === 'superadmin')) {\n                    return \"üõ°Ô∏è Admin\";\n                }\n            } catch (err) {\n                // Se der erro, assume membro\n            }\n        }\n\n        return \"üë§ Membro\";\n    } catch (err) {\n        return \"üë§ Membro\";\n    }\n}\n\n// ========================\n// MENU PRINCIPAL - NOVO FORMATO\n// ========================\nasync function obterMenuPrincipal(sock, from, sender, pushName) {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    \n    try {\n        // Obter informa√ß√µes din√¢micas\n        const saudacao = obterSaudacao();\n        const totalComandos = contarComandos();\n        const totalGrupos = await contarGrupos(sock);\n        const estatisticasRegistros = obterEstatisticas();\n        const cargoUsuario = await obterCargoUsuario(sock, from, sender);\n        const nomeUsuario = pushName || \"Usu√°rio\";\n        \n        return `${saudacao}! üëã\n\n‚ï≠‚îÄ‚îÄ„Äî ñ¶π‚àòÃ•‚∏Ω‚Éü INFORMA√á√ïES „Äï‚îÄ‚îÄ‚™©\n‚îÇ ñ¶π‚àòÃ•‚∏ΩüéØ‚Éü Prefixo: „Äå ${prefix} „Äç\n‚îÇ ñ¶π‚àòÃ•‚∏Ωüìä‚Éü Total de Comandos: ${totalComandos}\n‚îÇ ñ¶π‚àòÃ•‚∏Ωü§ñ‚Éü Nome do Bot: ${nomeDoBot}\n‚îÇ ñ¶π‚àòÃ•‚∏Ωüë§‚Éü Usu√°rio: ${nomeUsuario}\n‚îÇ ñ¶π‚àòÃ•‚∏Ωüõ†Ô∏è‚Éü Vers√£o: ^7.0.0-rc.3\n‚îÇ ñ¶π‚àòÃ•‚∏Ωüëë‚Éü Dono: ${nickDoDono}\n‚îÇ ñ¶π‚àòÃ•‚∏Ωüìà‚Éü Total de Grupos: ${totalGrupos}\n‚îÇ ñ¶π‚àòÃ•‚∏Ωüìù‚Éü Total Registrado: ${estatisticasRegistros.totalRegistros}\n‚îÇ ñ¶π‚àòÃ•‚∏ΩüéóÔ∏è‚Éü Cargo: ${cargoUsuario.split(' ')[1]}\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚™®\n\n‚ï≠‚îÄ‚îÄ„Äî MENUS DISPON√çVEIS „Äï‚îÄ‚îÄ‚™©\n‚îÇ ñßà‚àòÃ•‚∏Ωüè†‚Éü menuPrincipal\n‚îÇ ñßà‚àòÃ•‚∏Ωüé¨‚Éü menudownload\n‚îÇ ñßà‚àòÃ•‚∏ΩüñºÔ∏è‚Éü menufigurinhas\n‚îÇ ñßà‚àòÃ•‚∏Ωüîû‚Éü menuhentai\n‚îÇ ñßà‚àòÃ•‚∏Ωüõ†Ô∏è‚Éü menuadm\n‚îÇ ñßà‚àòÃ•‚∏Ωüëë‚Éü menudono\n‚îÇ ñßà‚àòÃ•‚∏Ωüéâ‚Éü menubrincadeira\n‚îÇ ñßà‚àòÃ•‚∏Ωüßë‚Äçü§ù‚Äçüßë‚Éü menuMembro\n‚îÇ ñßà‚àòÃ•‚∏ΩüéÆ‚Éü menuGamer\n‚îÇ ñßà‚àòÃ•‚∏Ωüåê‚Éü menuNeext\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚™®\n\n¬© NEEXT LTDA`;\n    } catch (error) {\n        console.error('Erro ao gerar menu principal:', error);\n        // Fallback para menu simples\n        return `ü§ñ *${nomeDoBot} - MENU PRINCIPAL*\\n\\nüìã *CATEGORIAS DISPON√çVEIS:*\\n\\nüë• \\`${prefix}menumembro\\` - Comandos para membros\\nüõ°Ô∏è \\`${prefix}menuadmin\\` - Comandos administrativos\\nüëë \\`${prefix}menudono\\` - Comandos do dono\\n\\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n¬© NEEXT LTDA - ${nickDoDono}`;\n    }\n}\n\n// ========================\n// MENU MEMBRO (comandos b√°sicos)\n// ========================\nfunction obterMenuMembro() {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    return `\nüë• *COMANDOS PARA MEMBROS*\n\nü§ñ *INFORMA√á√ïES DO BOT:*\n‚Ä¢ \\`${prefix}ping\\` - Status e informa√ß√µes do sistema\n‚Ä¢ \\`${prefix}hora\\` - Hor√°rio atual\n‚Ä¢ \\`${prefix}dono\\` - Informa√ß√µes do dono\n‚Ä¢ \\`${prefix}recado\\` - Confirma que o bot est√° ativo\n‚Ä¢ \\`prefixo\\` - Mostra o prefixo atual\n\nüìù *UTILIT√ÅRIOS:*\n‚Ä¢ \\`${prefix}status [texto]\\` - Atualiza status do bot\n‚Ä¢ \\`${prefix}rg\\` - Registra-se no sistema do bot\n‚Ä¢ \\`${prefix}hermitwhite [dados]\\` - Cria ID no sistema NEEXT\n\nüè∑Ô∏è *STICKERS:*\n‚Ä¢ \\`${prefix}s\\` - Converte m√≠dia em sticker\n‚Ä¢ \\`${prefix}rename [pack|author]\\` - Renomeia sticker\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬© NEEXT LTDA - ${nickDoDono}\n`;\n}\n\n// ========================\n// MENU ADMIN (comandos administrativos)\n// ========================\nfunction obterMenuAdmin() {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    return `\nüõ°Ô∏è *COMANDOS ADMINISTRATIVOS*\n\nüë• *GERENCIAMENTO DE GRUPO:*\n‚Ä¢ \\`${prefix}marca\\` - Menciona todos os membros\n‚Ä¢ \\`${prefix}fechargrupo\\` / \\`${prefix}fechar\\` - Fecha o grupo\n‚Ä¢ \\`${prefix}abrirgrupo\\` / \\`${prefix}abrir\\` - Abre o grupo\n‚Ä¢ \\`${prefix}mudargrupo [nome]\\` - Altera nome do grupo\n‚Ä¢ \\`${prefix}resetlink\\` - Gera novo link do grupo\n\nüóëÔ∏è *MODERA√á√ÉO:*\n‚Ä¢ \\`${prefix}del\\` - Deleta mensagem marcada\n‚Ä¢ \\`${prefix}ativarsolicitacao\\` - Ativa aprova√ß√£o de membros\n‚Ä¢ \\`${prefix}desativarsolicitacao\\` - Desativa aprova√ß√£o\n‚Ä¢ \\`${prefix}soloadmin\\` - Apenas admins editam grupo\n\n‚öôÔ∏è *CONFIGURA√á√ïES:*\n‚Ä¢ \\`${prefix}antilink on/off\\` - Liga/desliga antilink\n‚Ä¢ \\`${prefix}modogamer on/off\\` - Liga/desliga modo gamer\n‚Ä¢ \\`${prefix}rpg on/off\\` - Liga/desliga sistema RPG\n\nüìä *STATUS:*\n‚Ä¢ \\`${prefix}grupo-status\\` - Status do grupo\n‚Ä¢ \\`${prefix}status-anti\\` - Status sistemas anti-spam\n\n‚ö†Ô∏è *Requer: Admin do grupo + Bot admin*\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬© NEEXT LTDA - ${nickDoDono}\n`;\n}\n\n// ========================\n// MENU DONO (comandos exclusivos)\n// ========================\nfunction obterMenuDono() {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    return `\nüëë *COMANDOS DO DONO*\n\n‚öôÔ∏è *CONFIGURA√á√ïES DO BOT:*\n‚Ä¢ \\`${prefix}trocar-prefixo [novo]\\` - Altera prefixo\n‚Ä¢ \\`${prefix}trocar-nome [novo]\\` - Altera nome do bot\n‚Ä¢ \\`${prefix}trocar-nick [novo]\\` - Altera nick do dono\n‚Ä¢ \\`${prefix}configurar-bot\\` - Guia de configura√ß√µes\n\nüîß *CONTROLE TOTAL:*\n‚Ä¢ Todos os comandos de admin funcionam\n‚Ä¢ Bypass de todas as restri√ß√µes\n‚Ä¢ Controle completo sobre configura√ß√µes\n\n‚ö†Ô∏è *Acesso exclusivo para: ${nickDoDono}*\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬© NEEXT LTDA - ${nickDoDono}\n`;\n}\n\n// ========================\n// MENU DOWNLOAD (m√≠dia e downloads)\n// ========================\nfunction obterMenuDownload() {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    return `\nüì• *DOWNLOADS E M√çDIA*\n\nüéµ *M√öSICA:*\n‚Ä¢ \\`${prefix}play [nome]\\` - Busca m√∫sica no YouTube\n\nüì∑ *IMAGENS:*\n‚Ä¢ \\`${prefix}pinterest [busca]\\` - Imagens do Pinterest\n‚Ä¢ \\`${prefix}brat [texto]\\` - Gera imagem BRAT\n\nüì± *REDES SOCIAIS:*\n‚Ä¢ \\`${prefix}ig [link]\\` - Download Instagram\n‚Ä¢ \\`${prefix}instagram [link]\\` - Download Instagram\n\nüè∑Ô∏è *STICKERS:*\n‚Ä¢ \\`${prefix}s\\` - Criar sticker de m√≠dia\n‚Ä¢ \\`${prefix}rename [pack|author]\\` - Editar sticker\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬© NEEXT LTDA - ${nickDoDono}\n`;\n}\n\n// ========================\n// MENU GAMER (jogos e entretenimento)\n// ========================\nfunction obterMenuGamer() {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    return `\nüéÆ *JOGOS E ENTRETENIMENTO*\n\n‚ö†Ô∏è *Requer \\`${prefix}modogamer on\\` ativo no grupo*\n\nüéØ *JOGOS INTERATIVOS:*\n‚Ä¢ \\`${prefix}jogodavelha @user\\` - Jogo da velha\n‚Ä¢ \\`${prefix}roletarussa @user\\` - Roleta russa\n‚Ä¢ \\`${prefix}disparar\\` - Atirar na roleta russa\n‚Ä¢ \\`${prefix}resetjogodavelha\\` - Reset jogo da velha\n‚Ä¢ \\`${prefix}resetroleta\\` - Reset roleta russa\n\nüé≤ *DIVERS√ÉO:*\n‚Ä¢ \\`${prefix}eununca\\` - Eu nunca poll\n‚Ä¢ \\`${prefix}impostor\\` - Escolhe impostor aleat√≥rio\n\nüí• *A√á√ïES DIVERTIDAS:*\n‚Ä¢ \\`${prefix}tapa @user\\` - Dar tapa\n‚Ä¢ \\`${prefix}matar @user\\` - Matar algu√©m\n‚Ä¢ \\`${prefix}atirar @user\\` - Atirar em algu√©m\n‚Ä¢ \\`${prefix}atropelar @user\\` - Atropelar\n‚Ä¢ \\`${prefix}beijar @user\\` - Beijar algu√©m\n‚Ä¢ \\`${prefix}prender @user\\` - Prender algu√©m\n‚Ä¢ \\`${prefix}sarra @user\\` - Sarrar em algu√©m\n‚Ä¢ \\`${prefix}dedo @user\\` - Mostrar dedo\n\nüìä *RANKINGS DIVERTIDOS:*\n‚Ä¢ \\`${prefix}rankcorno\\` - Rank dos cornos\n‚Ä¢ \\`${prefix}rankgay\\` - Rank dos gays\n‚Ä¢ \\`${prefix}ranklesbica\\` - Rank das l√©sbicas\n‚Ä¢ \\`${prefix}rankburro\\` - Rank dos burros\n‚Ä¢ \\`${prefix}rankfeio\\` - Rank dos feios\n‚Ä¢ \\`${prefix}rankbonito\\` - Rank dos bonitos\n‚Ä¢ \\`${prefix}rankfumante\\` - Rank dos fumantes\n‚Ä¢ \\`${prefix}rankmaconheiro\\` - Rank dos maconheiros\n‚Ä¢ \\`${prefix}rankpobre\\` - Rank dos pobres\n‚Ä¢ \\`${prefix}ranksad\\` - Rank dos tristes\n‚Ä¢ \\`${prefix}rankemo\\` - Rank dos emos\n‚Ä¢ \\`${prefix}rankcasal\\` - Rank de casais\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬© NEEXT LTDA - ${nickDoDono}\n`;\n}\n\n// ========================\n// MENU ADM (todos os comandos de administradores)\n// ========================\nfunction obterMenuAdm() {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    return `\nüõ°Ô∏è *COMANDOS DE ADMINISTRADORES*\n\n‚ö†Ô∏è *Requer: Admin do grupo + Bot admin*\n\nüîó *SISTEMA ANTI-SPAM:*\n‚Ä¢ \\`${prefix}x9 on/off\\` - Anti-X9 Monitor\n‚Ä¢ \\`${prefix}antilink on/off\\` - Anti-links\n‚Ä¢ \\`${prefix}anticontato on/off\\` - Anti-contatos\n‚Ä¢ \\`${prefix}antidocumento on/off\\` - Anti-documentos\n‚Ä¢ \\`${prefix}antivideo on/off\\` - Anti-v√≠deos\n‚Ä¢ \\`${prefix}antiaudio on/off\\` - Anti-√°udios\n‚Ä¢ \\`${prefix}antisticker on/off\\` - Anti-stickers\n‚Ä¢ \\`${prefix}antiflod on/off\\` - Anti-flood\n‚Ä¢ \\`${prefix}antifake on/off\\` - Anti-n√∫meros fake\n\nüìã *LISTA NEGRA:*\n‚Ä¢ \\`${prefix}listanegra add @user\\` - Adicionar usu√°rio\n‚Ä¢ \\`${prefix}listanegra remove @user\\` - Remover usu√°rio\n‚Ä¢ \\`${prefix}listanegra list\\` - Ver lista negra\n\nüóëÔ∏è *MODERA√á√ÉO:*\n‚Ä¢ \\`${prefix}del\\` - Deleta mensagem marcada\n‚Ä¢ \\`${prefix}marca\\` - Menciona todos os membros\n\nüîí *CONTROLE DO GRUPO:*\n‚Ä¢ \\`${prefix}fechargrupo\\` - Fecha o grupo\n‚Ä¢ \\`${prefix}abrirgrupo\\` - Abre o grupo\n‚Ä¢ \\`${prefix}mudargrupo [nome]\\` - Altera nome do grupo\n‚Ä¢ \\`${prefix}soloadmin\\` - S√≥ admin edita grupo\n‚Ä¢ \\`${prefix}resetlink\\` - Gera novo link do grupo\n\nüë• *CONTROLE DE ENTRADA:*\n‚Ä¢ \\`${prefix}ativarsolicitacao\\` - Ativa aprova√ß√£o\n‚Ä¢ \\`${prefix}desativarsolicitacao\\` - Desativa aprova√ß√£o\n\nüéÆ *CONFIGURA√á√ïES:*\n‚Ä¢ \\`${prefix}modogamer on/off\\` - Modo gamer\n‚Ä¢ \\`${prefix}grupo-status\\` - Status do grupo\n\nüì∏ *PERSONALIZA√á√ÉO:*\n‚Ä¢ \\`${prefix}fotodogrupo\\` - Troca foto do grupo\n‚Ä¢ \\`${prefix}fotodobot\\` - Troca foto do bot\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬© NEEXT LTDA - ${nickDoDono}\n`;\n}\n\n// ========================\n// MENU ANTI-SPAM\n// ========================\nfunction obterMenuAnti() {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    return `\nüõ°Ô∏è *SISTEMA ANTI-SPAM*\n\n‚ö†Ô∏è *Requer: Admin + Bot admin*\n\nüîó *PROTE√á√ïES DISPON√çVEIS:*\n‚Ä¢ \\`${prefix}antilink on/off\\` - Anti-links\n‚Ä¢ \\`${prefix}anticontato on/off\\` - Anti-contatos\n‚Ä¢ \\`${prefix}antidocumento on/off\\` - Anti-documentos\n‚Ä¢ \\`${prefix}antivideo on/off\\` - Anti-v√≠deos\n‚Ä¢ \\`${prefix}antiaudio on/off\\` - Anti-√°udios\n‚Ä¢ \\`${prefix}antisticker on/off\\` - Anti-stickers\n‚Ä¢ \\`${prefix}antiflod on/off\\` - Anti-flood\n‚Ä¢ \\`${prefix}antifake on/off\\` - Anti-n√∫meros fake\n‚Ä¢ \\`${prefix}x9 on/off\\` - Anti-X9\n\nüìã *LISTA NEGRA:*\n‚Ä¢ \\`${prefix}listanegra add @user\\` - Adicionar √† lista\n‚Ä¢ \\`${prefix}listanegra remove @user\\` - Remover da lista\n‚Ä¢ \\`${prefix}listanegra list\\` - Ver lista negra\n\nüìä *STATUS:*\n‚Ä¢ \\`${prefix}status-anti\\` - Ver todas as prote√ß√µes ativas\n\nüî¥ *A√á√ÉO: Delete autom√°tico + Ban (se bot for admin)*\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬© NEEXT LTDA - ${nickDoDono}\n`;\n}\n\n// ========================\n// MENU RPG (sistema NeextCity)\n// ========================\nfunction obterMenuRPG() {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    return `\nüí∞ *SISTEMA RPG - NEEXTCITY*\n\n‚ö†Ô∏è *Requer \\`${prefix}rpg on\\` ativo no grupo*\n\nüë§ *CADASTRO:*\n‚Ä¢ \\`${prefix}registrar [nome] [banco]\\` - Registrar no RPG\n\nüíº *TRABALHOS:*\n‚Ä¢ \\`${prefix}pescar\\` - Pescar para ganhar gold\n‚Ä¢ \\`${prefix}minerar\\` - Minerar recursos\n‚Ä¢ \\`${prefix}trabalhar\\` - Trabalhar por gold\n\nüé∞ *JOGOS:*\n‚Ä¢ \\`${prefix}tigrinho [valor]\\` - Ca√ßa-n√≠quel\n‚Ä¢ \\`${prefix}assalto @user\\` - Assaltar jogador\n\nüìä *INFORMA√á√ïES:*\n‚Ä¢ \\`${prefix}saldo\\` - Ver seu saldo e stats\n‚Ä¢ \\`${prefix}rank\\` - Ranking dos mais ricos\n\nüí° *Ganhe gold, compre itens e domine NeextCity!*\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬© NEEXT LTDA - ${nickDoDono}\n`;\n}\n\n// ========================\n// MENU STICKERS (figurinhas)\n// ========================\nfunction obterMenuSticker() {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    return `\nüè∑Ô∏è *MENU DE STICKERS*\n\n‚ú® *CRIAR STICKERS:*\n‚Ä¢ \\`${prefix}s\\` - Converte m√≠dia em sticker\n‚Ä¢ \\`${prefix}sticker\\` - Criar sticker de imagem/v√≠deo\n‚Ä¢ \\`${prefix}attp [texto]\\` - Sticker de texto animado\n‚Ä¢ \\`${prefix}ttp [texto]\\` - Sticker de texto simples\n\nüé® *EDITAR STICKERS:*\n‚Ä¢ \\`${prefix}rename [pack|author]\\` - Renomear sticker\n‚Ä¢ \\`${prefix}take [pack] [author]\\` - Roubar sticker\n‚Ä¢ \\`${prefix}toimg\\` - Converter sticker em imagem\n\nüé≠ *STICKERS ESPECIAIS:*\n‚Ä¢ \\`${prefix}emoji [emoji]\\` - Sticker de emoji\n‚Ä¢ \\`${prefix}semoji [emoji]\\` - Sticker emoji simples\n\nüìù *COMO USAR:*\n‚Ä¢ Envie uma imagem/v√≠deo com \\`${prefix}s\\`\n‚Ä¢ Marque um sticker e use \\`${prefix}take\\`\n‚Ä¢ Use \\`${prefix}rename\\` para personalizar\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬© NEEXT LTDA - ${nickDoDono}\n`;\n}\n\n// ========================\n// MENU BRINCADEIRAS (coming soon)\n// ========================\nfunction obterMenuBrincadeira() {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    return `\nüéâ *MENU BRINCADEIRAS*\n\n‚ö†Ô∏è *EM DESENVOLVIMENTO*\n\nüöß Este menu est√° sendo finalizado e em breve ter√°:\n\nüé≠ **Comandos de Divers√£o:**\n‚Ä¢ Roleta de perguntas\n‚Ä¢ Verdade ou desafio\n‚Ä¢ Simulador de namorados\n‚Ä¢ Gerador de casais aleat√≥rios\n\nüé≤ **Intera√ß√µes Divertidas:**\n‚Ä¢ Perguntas para o grupo\n‚Ä¢ Desafios aleat√≥rios\n‚Ä¢ Brincadeiras de grupo\n\nüìÖ **Status:** Em desenvolvimento\n‚è∞ **Previs√£o:** Pr√≥xima atualiza√ß√£o\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬© NEEXT LTDA - ${nickDoDono}\n`;\n}\n\n// ========================\n// MENU HENTAI (coming soon)\n// ========================\nfunction obterMenuHentai() {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    return `\nüîû *MENU HENTAI*\n\n‚ö†Ô∏è *EM DESENVOLVIMENTO*\n\nüöß Este menu est√° sendo finalizado e em breve ter√°:\n\nüé® **Conte√∫do Art√≠stico:**\n‚Ä¢ Imagens de anime\n‚Ä¢ Wallpapers tem√°ticos\n‚Ä¢ Arte digital\n\n‚ö†Ô∏è **Importante:**\n‚Ä¢ Conte√∫do ser√° adequado √†s diretrizes\n‚Ä¢ Uso respons√°vel obrigat√≥rio\n‚Ä¢ Apenas em grupos privados\n\nüìÖ **Status:** Em desenvolvimento\n‚è∞ **Previs√£o:** Pr√≥xima atualiza√ß√£o\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬© NEEXT LTDA - ${nickDoDono}\n`;\n}\n\n// ========================\n// MENU DONO AVAN√áADO (coming soon)\n// ========================\nfunction obterMenuDonoAvancado() {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    return `\nüëë *MENU DONO AVAN√áADO*\n\n‚ö†Ô∏è *EM DESENVOLVIMENTO*\n\nüöß Este menu est√° sendo finalizado e em breve ter√°:\n\nüîß **Controle Total:**\n‚Ä¢ Backup de configura√ß√µes\n‚Ä¢ Gerenciamento de grupos em massa\n‚Ä¢ Logs detalhados do sistema\n‚Ä¢ Controle de usu√°rios globais\n\n‚öôÔ∏è **Configura√ß√µes Avan√ßadas:**\n‚Ä¢ Auto-modera√ß√£o inteligente\n‚Ä¢ Respostas autom√°ticas personalizadas\n‚Ä¢ Sistema de recompensas\n\nüìÖ **Status:** Em desenvolvimento\n‚è∞ **Previs√£o:** Pr√≥xima atualiza√ß√£o\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬© NEEXT LTDA - ${nickDoDono}\n`;\n}\n\n// ========================\n// GUIA DE CONFIGURA√á√ÉO\n// ========================\nfunction obterConfigurarBot() {\n    const { prefix, nomeDoBot, nickDoDono } = obterConfiguracoes();\n    return `\n‚öôÔ∏è *CONFIGURAR BOT - GUIA COMPLETO*\n\nüîß *COMANDOS DE CONFIGURA√á√ÉO (Apenas Dono):*\n\nüìù *ALTERAR PREFIXO:*\n\\`${prefix}trocar-prefixo [novo]\\`\n*Exemplo:* \\`${prefix}trocar-prefixo !\\`\n*Resultado:* Prefixo mudar√° de \"${prefix}\" para \"!\"\n\nü§ñ *ALTERAR NOME DO BOT:*\n\\`${prefix}trocar-nome [novo nome]\\`\n*Exemplo:* \\`${prefix}trocar-nome MeuBot Incr√≠vel\\`\n*Resultado:* Nome mudar√° de \"${nomeDoBot}\"\n\nüë§ *ALTERAR NICK DO DONO:*\n\\`${prefix}trocar-nick [novo nick]\\`\n*Exemplo:* \\`${prefix}trocar-nick Administrador\\`\n*Resultado:* Nick mudar√° de \"${nickDoDono}\"\n\nüìã *CONFIGURA√á√ïES ATUAIS:*\n‚Ä¢ **Prefixo:** ${prefix}\n‚Ä¢ **Nome do Bot:** ${nomeDoBot}\n‚Ä¢ **Nick do Dono:** ${nickDoDono}\n\n‚ö†Ô∏è *IMPORTANTE:*\n‚Ä¢ Apenas o dono pode usar esses comandos\n‚Ä¢ As mudan√ßas s√£o aplicadas instantaneamente\n‚Ä¢ Configura√ß√µes s√£o salvas automaticamente\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n¬© NEEXT LTDA - ${nickDoDono}\n`;\n}\n\nmodule.exports = {\n    obterMenuPrincipal,\n    obterMenuMembro,\n    obterMenuAdmin,\n    obterMenuAdm,\n    obterMenuDono,\n    obterMenuDownload,\n    obterMenuGamer,\n    obterMenuAnti,\n    obterMenuRPG,\n    obterMenuSticker,\n    obterMenuBrincadeira,\n    obterMenuHentai,\n    obterMenuDonoAvancado,\n    obterConfigurarBot\n};","size_bytes":17723},"arquivos/funcoes/function.js":{"content":"// ---------------------------\n// Pacotes\n// ---------------------------\nconst cfonts = require(\"cfonts\");\n\n// ---------------------------\n// Configura√ß√µes do Bot\n// ---------------------------\nconst settings = require(\"../../settings/settings.json\");\nconst prefix = settings.prefix || \".\";\nconst botNome = settings.nomeDoBot || \"NEEXT BOT\";\n\n// ---------------------------\n// Banner do bot\n// ---------------------------\nfunction mostrarBanner() {\n    console.clear();\n\n    // NEEXT em roxo s√≥lido\n    cfonts.say(\"NEEXT\", {\n        font: \"block\",\n        align: \"center\",\n        colors: [\"#800080\"], // roxo real\n        background: \"transparent\",\n        letterSpacing: 1,\n        space: true\n    });\n\n    // LTDA em roxo s√≥lido\n    cfonts.say(\"LTDA\", {\n        font: \"block\",\n        align: \"center\",\n        colors: [\"#800080\"], // roxo real\n        background: \"transparent\",\n        letterSpacing: 1,\n        space: true\n    });\n\n    console.log(\"\\n\");\n}\n\n// ---------------------------\n// Logs simples (sem duplica√ß√£o e sem criar arquivos)\n// ---------------------------\nconst mensagensRegistradas = new Set();\n\nfunction logMensagem(m, text = \"\", isCommand = false) {\n    const fromMe = m?.key?.fromMe || false;\n    const jid = m?.key?.remoteJid || \"\";\n    const isGroup = jid.endsWith(\"@g.us\") || jid.endsWith(\"@lid\");\n    const sender = (m?.key?.participant || jid)?.split(\"@\")[0] || \"desconhecido\";\n    const pushName = m?.pushName || \"Sem nome\";\n\n    const conteudo = text || (() => {\n        if (m?.message?.conversation) return m.message.conversation;\n        if (m?.message?.extendedTextMessage?.text) return m.message.extendedTextMessage.text;\n        if (m?.message?.imageMessage?.caption) return m.message.imageMessage.caption;\n        if (m?.message?.videoMessage?.caption) return m.message.videoMessage.caption;\n        return \"[conte√∫do n√£o suportado]\";\n    })();\n\n    // Evita duplica√ß√£o\n    const logKey = `${fromMe}-${jid}-${conteudo}`;\n    if (mensagensRegistradas.has(logKey)) return;\n    mensagensRegistradas.add(logKey);\n\n    const tipo = isCommand || (conteudo.startsWith(prefix)) ? \"[COMANDO]\" : \"[MENSAGEM]\";\n    const local = isGroup ? \"GRUPO\" : \"PV\";\n    const remetente = `${pushName} (${sender})${fromMe ? \" [EU]\" : \"\"}`;\n\n    const logText = `\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n${tipo} ${local}\nDe: ${remetente}\nConte√∫do: ${conteudo}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;\n\n    console.log(logText);\n}\n\n// ---------------------------\n// Fun√ß√£o para buscar buffer de URL\n// ---------------------------\nasync function getBuffer(url) {\n    try {\n        const response = await require('axios').get(url, { responseType: 'arraybuffer' });\n        return Buffer.from(response.data);\n    } catch (error) {\n        console.error('Erro ao buscar buffer da URL:', error);\n        throw error;\n    }\n}\n\n// Fun√ß√£o para formatar JID\nfunction formatJid(jid) {\n    return String(jid || \"\").replace(/@s\\.whatsapp\\.net|@g\\.us|@lid/g,'');\n}\n\n// ---------------------------\n// Fun√ß√£o para sauda√ß√£o baseada no hor√°rio\n// ---------------------------\nfunction obterSaudacao() {\n    const moment = require('moment-timezone');\n    const hora = moment().tz('America/Sao_Paulo').hour();\n    \n    if (hora >= 6 && hora < 12) {\n        return \"üåÖ Bom dia\";\n    } else if (hora >= 12 && hora < 18) {\n        return \"‚òÄÔ∏è Boa tarde\";\n    } else if (hora >= 18 && hora < 24) {\n        return \"üåô Boa noite\";\n    } else {\n        return \"üåÉ Boa madrugada\";\n    }\n}\n\n// ---------------------------\n// Fun√ß√£o para contar grupos\n// ---------------------------\nasync function contarGrupos(sock) {\n    try {\n        const grupos = await sock.groupFetchAllParticipating();\n        return Object.keys(grupos).length;\n    } catch (error) {\n        console.error('Erro ao contar grupos:', error);\n        return 0;\n    }\n}\n\n// ---------------------------\n// Fun√ß√£o para contar comandos automaticamente\n// ---------------------------\nfunction contarComandos() {\n    try {\n        const fs = require('fs');\n        const path = require('path');\n        \n        // L√™ o arquivo index.js\n        const indexPath = path.join(__dirname, '../../index.js');\n        const indexContent = fs.readFileSync(indexPath, 'utf8');\n        \n        // Procura por todos os cases no switch da fun√ß√£o handleCommand\n        const casePattern = /case\\s+\"([^\"]+)\"/g;\n        const matches = [];\n        let match;\n        \n        while ((match = casePattern.exec(indexContent)) !== null) {\n            // Evita duplicatas e ignora cases internos como break cases\n            if (!matches.includes(match[1])) {\n                matches.push(match[1]);\n            }\n        }\n        \n        console.log(`üìä Total de comandos encontrados automaticamente: ${matches.length}`);\n        return matches.length;\n    } catch (error) {\n        console.error('‚ùå Erro ao contar comandos automaticamente:', error);\n        // Fallback para contagem manual se houver erro\n        return 25; // estimativa atual\n    }\n}\n\n// ---------------------------\n// Exporta√ß√µes\n// ---------------------------\nmodule.exports = {\n    mostrarBanner,\n    logMensagem,\n    formatJid,\n    getBuffer,\n    obterSaudacao,\n    contarGrupos,\n    contarComandos\n};","size_bytes":5361},"arquivos/antispam.js":{"content":"// Sistema Anti-Spam Completo para WhatsApp Bot\nconst fs = require('fs');\nconst path = require('path');\n\n// Diret√≥rios do sistema\nconst GRUPOS_DIR = path.join(__dirname, '../database/grupos/ativadogrupo');\nconst CACHE_FLOOD = new Map(); // Cache para controle de flood\n\n// Utilit√°rios\nfunction formatGroupId(groupId) {\n    return groupId.replace('@g.us', '').replace('@lid', '').replace(/[^a-zA-Z0-9]/g, '_');\n}\n\n// Verifica se n√∫mero √© brasileiro\nfunction isNumeroBrasileiro(jid) {\n    if (!jid || typeof jid !== 'string') return false;\n    \n    // Remove o @s.whatsapp.net para pegar apenas o n√∫mero\n    const numero = jid.replace('@s.whatsapp.net', '');\n    \n    // Verifica se come√ßa com 55 (c√≥digo do Brasil)\n    // Formatos aceitos: 55XXXXXXXXXXX (13 d√≠gitos) ou 5511XXXXXXXXX (12 d√≠gitos para alguns casos)\n    const brasileiroRegex = /^55[1-9][0-9]{8,9}$/;\n    \n    return brasileiroRegex.test(numero);\n}\n\nfunction getGroupConfigPath(groupId) {\n    const formattedId = formatGroupId(groupId);\n    return path.join(GRUPOS_DIR, `${formattedId}.json`);\n}\n\n// Carrega configura√ß√£o de um grupo\nfunction carregarConfigGrupo(groupId) {\n    try {\n        const configPath = getGroupConfigPath(groupId);\n        if (!fs.existsSync(configPath)) {\n            return {\n                antilink: false,\n                anticontato: false,\n                antidocumento: false,\n                antivideo: false,\n                antiaudio: false,\n                antisticker: false,\n                antiflod: false,\n                antifake: false,\n                x9: false,\n                modogamer: false,\n                listanegra: [],\n                floodConfig: {\n                    maxMensagens: 5,\n                    tempoSegundos: 10\n                }\n            };\n        }\n        const data = fs.readFileSync(configPath, 'utf-8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`‚ùå Erro ao carregar config do grupo ${groupId}:`, err);\n        return null;\n    }\n}\n\n// Salva configura√ß√£o de um grupo\nfunction salvarConfigGrupo(groupId, config) {\n    try {\n        // Garante que o diret√≥rio existe\n        if (!fs.existsSync(GRUPOS_DIR)) {\n            fs.mkdirSync(GRUPOS_DIR, { recursive: true });\n        }\n        \n        const configPath = getGroupConfigPath(groupId);\n        fs.writeFileSync(configPath, JSON.stringify(config, null, 2));\n        return true;\n    } catch (err) {\n        console.error(`‚ùå Erro ao salvar config do grupo ${groupId}:`, err);\n        return false;\n    }\n}\n\n// Detecta links na mensagem\nfunction detectarLinks(texto) {\n    if (!texto) return false;\n    const linkRegex = /((https?:\\/\\/)|(www\\.))[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)|wa.me\\/|whatsapp.com\\/|t.me\\/|chat.whatsapp.com\\/|instagram.com\\/|facebook.com\\/|twitter.com\\/|tiktok.com\\/|youtube.com\\/|discord.gg\\//i;\n    return linkRegex.test(texto);\n}\n\n// Verifica se √© contact/contato\nfunction isContactMessage(message) {\n    return !!(message.contactMessage || message.contactsArrayMessage);\n}\n\n// Verifica se √© documento\nfunction isDocumentMessage(message) {\n    return !!(message.documentMessage);\n}\n\n// Verifica se √© v√≠deo\nfunction isVideoMessage(message) {\n    return !!(message.videoMessage);\n}\n\n// Verifica se √© √°udio\nfunction isAudioMessage(message) {\n    return !!(message.audioMessage || message.pttMessage);\n}\n\n// Verifica se √© sticker\nfunction isStickerMessage(message) {\n    return !!(message.stickerMessage);\n}\n\n// Controle de flood\nfunction verificarFlood(userId, groupId, config) {\n    if (!config.antiflod) return false;\n    \n    const key = `${groupId}_${userId}`;\n    const agora = Date.now();\n    const limite = config.floodConfig.tempoSegundos * 1000;\n    \n    if (!CACHE_FLOOD.has(key)) {\n        CACHE_FLOOD.set(key, []);\n    }\n    \n    const mensagens = CACHE_FLOOD.get(key);\n    \n    // Remove mensagens antigas\n    const mensagensRecentes = mensagens.filter(timestamp => agora - timestamp < limite);\n    \n    // Adiciona nova mensagem\n    mensagensRecentes.push(agora);\n    CACHE_FLOOD.set(key, mensagensRecentes);\n    \n    // Verifica se excedeu o limite\n    return mensagensRecentes.length > config.floodConfig.maxMensagens;\n}\n\n// Limpa cache de flood periodicamente\nsetInterval(() => {\n    const agora = Date.now();\n    for (const [key, mensagens] of CACHE_FLOOD.entries()) {\n        const mensagensRecentes = mensagens.filter(timestamp => agora - timestamp < 60000); // 1 minuto\n        if (mensagensRecentes.length === 0) {\n            CACHE_FLOOD.delete(key);\n        } else {\n            CACHE_FLOOD.set(key, mensagensRecentes);\n        }\n    }\n}, 60000);\n\n// Verifica se usu√°rio est√° na lista negra\nfunction isUsuarioListaNegra(userId, groupId) {\n    const config = carregarConfigGrupo(groupId);\n    if (!config || !config.listanegra) return false;\n    return config.listanegra.includes(userId);\n}\n\n// Adiciona usu√°rio √† lista negra\nfunction adicionarListaNegra(userId, groupId) {\n    const config = carregarConfigGrupo(groupId);\n    if (!config) return false;\n    \n    if (!config.listanegra) config.listanegra = [];\n    \n    if (!config.listanegra.includes(userId)) {\n        config.listanegra.push(userId);\n        return salvarConfigGrupo(groupId, config);\n    }\n    return true; // J√° estava na lista\n}\n\n// Remove usu√°rio da lista negra\nfunction removerListaNegra(userId, groupId) {\n    const config = carregarConfigGrupo(groupId);\n    if (!config || !config.listanegra) return false;\n    \n    const index = config.listanegra.indexOf(userId);\n    if (index > -1) {\n        config.listanegra.splice(index, 1);\n        return salvarConfigGrupo(groupId, config);\n    }\n    return true; // N√£o estava na lista\n}\n\n// Ativa/desativa funcionalidade anti\nfunction toggleAntiFeature(groupId, feature, estado) {\n    const config = carregarConfigGrupo(groupId);\n    if (!config) return false;\n    \n    const validFeatures = ['antilink', 'anticontato', 'antidocumento', 'antivideo', 'antiaudio', 'antisticker', 'antiflod', 'antifake', 'x9'];\n    \n    if (!validFeatures.includes(feature)) return false;\n    \n    if (estado === 'on' || estado === 'ativar' || estado === '1') {\n        config[feature] = true;\n    } else if (estado === 'off' || estado === 'desativar' || estado === '0') {\n        config[feature] = false;\n    } else {\n        return config[feature]; // Retorna estado atual\n    }\n    \n    return salvarConfigGrupo(groupId, config) ? config[feature] : false;\n}\n\n// Processa mensagem para verificar viola√ß√µes\nfunction processarMensagem(message, groupId, userId) {\n    const config = carregarConfigGrupo(groupId);\n    if (!config) return { violacao: false };\n    \n    const violations = [];\n    \n    // Extrai texto da mensagem\n    let texto = '';\n    if (message.conversation) texto = message.conversation;\n    if (message.extendedTextMessage?.text) texto = message.extendedTextMessage.text;\n    if (message.imageMessage?.caption) texto = message.imageMessage.caption;\n    if (message.videoMessage?.caption) texto = message.videoMessage.caption;\n    \n    // Verifica antilink\n    if (config.antilink && detectarLinks(texto)) {\n        violations.push('antilink');\n    }\n    \n    // Verifica anticontato\n    if (config.anticontato && isContactMessage(message)) {\n        violations.push('anticontato');\n    }\n    \n    // Verifica antidocumento\n    if (config.antidocumento && isDocumentMessage(message)) {\n        violations.push('antidocumento');\n    }\n    \n    // Verifica antivideo\n    if (config.antivideo && isVideoMessage(message)) {\n        violations.push('antivideo');\n    }\n    \n    // Verifica antiaudio\n    if (config.antiaudio && isAudioMessage(message)) {\n        violations.push('antiaudio');\n    }\n    \n    // Verifica antisticker\n    if (config.antisticker && isStickerMessage(message)) {\n        violations.push('antisticker');\n    }\n    \n    // Verifica antiflod\n    if (verificarFlood(userId, groupId, config)) {\n        violations.push('antiflod');\n    }\n    \n    return {\n        violacao: violations.length > 0,\n        tipos: violations,\n        config\n    };\n}\n\n// Exporta todas as fun√ß√µes\nmodule.exports = {\n    // Gerenciamento de configura√ß√£o\n    carregarConfigGrupo,\n    salvarConfigGrupo,\n    \n    // Toggle de funcionalidades\n    toggleAntiFeature,\n    \n    // Lista negra\n    isUsuarioListaNegra,\n    adicionarListaNegra,\n    removerListaNegra,\n    \n    // Processamento\n    processarMensagem,\n    \n    // Detec√ß√µes espec√≠ficas\n    detectarLinks,\n    isContactMessage,\n    isDocumentMessage,\n    isVideoMessage,\n    isAudioMessage,\n    isStickerMessage,\n    verificarFlood,\n    isNumeroBrasileiro,\n    \n    // Utilit√°rios\n    formatGroupId,\n    getGroupConfigPath\n};","size_bytes":8754},"arquivos/rpg.js":{"content":"// Sistema de RPG - NeextCity ENHANCED\nconst fs = require('fs');\nconst path = require('path');\n\n// Caminho para o arquivo de dados do RPG\nconst rpgDataFile = path.join(__dirname, '../database/grupos/rpg_data.json');\nconst moment = require('moment-timezone');\n\n// Sistema de Mutex simples para evitar race conditions\nlet rpgLock = false;\n\nasync function withLock(fn) {\n    while (rpgLock) {\n        await new Promise(resolve => setTimeout(resolve, 10));\n    }\n    rpgLock = true;\n    try {\n        return await fn();\n    } finally {\n        rpgLock = false;\n    }\n}\n\n// Limites di√°rios configur√°veis\nconst DAILY_LIMITS = {\n    pesca: 10,\n    mineracao: 8,\n    trabalho: 6,\n    caca: 5,\n    agricultura: 7,\n    entrega: 4,\n    corrida: 3,\n    coleta: 15\n};\n\n// Sistema de configura√ß√µes din√¢micas\nfunction obterConfiguracoes() {\n    try {\n        delete require.cache[require.resolve('../settings/settings.json')];\n        return require('../settings/settings.json');\n    } catch (err) {\n        console.error(\"‚ùå Erro ao carregar configura√ß√µes RPG:\", err);\n        return {\n            prefix: \".\",\n            nomeDoBot: \"WhatsApp Bot\",\n            nickDoDono: \"Owner\",\n            numeroDoDono: \"5500000000000\"\n        };\n    }\n}\n\n// Bancos dispon√≠veis\nconst bancos = [\n    { id: 'caixa', nome: 'üè¶ Caixa Econ√¥mica Federal', emoji: 'üè¶' },\n    { id: 'santander', nome: 'üî¥ Santander', emoji: 'üî¥' },\n    { id: 'nubank', nome: 'üíú Nubank', emoji: 'üíú' },\n    { id: 'bradesco', nome: 'üîµ Bradesco', emoji: 'üîµ' },\n    { id: 'itau', nome: 'üü† Ita√∫', emoji: 'üü†' },\n    { id: 'bb', nome: 'üü° Banco do Brasil', emoji: 'üü°' },\n    { id: 'pix', nome: 'üì± PIX', emoji: 'üì±' },\n    { id: 'inter', nome: 'üß° Inter', emoji: 'üß°' }\n];\n\n// ==================== SISTEMA DE LOJA ====================\n// Cat√°logo completo de itens para compra\nconst catalogoItens = {\n    // PROPRIEDADES\n    propriedades: {\n        casa_simples: {\n            id: 'casa_simples',\n            nome: 'üè† Casa Simples',\n            preco: 5000,\n            categoria: 'propriedades',\n            descricao: 'Uma casa b√°sica para morar',\n            emoji: 'üè†',\n            beneficio: 'Renda passiva: +50 gold/dia'\n        },\n        casa_luxo: {\n            id: 'casa_luxo', \n            nome: 'üèòÔ∏è Casa de Luxo',\n            preco: 15000,\n            categoria: 'propriedades',\n            descricao: 'Uma mans√£o elegante',\n            emoji: 'üèòÔ∏è',\n            beneficio: 'Renda passiva: +150 gold/dia'\n        },\n        fazenda: {\n            id: 'fazenda',\n            nome: 'üöú Fazenda',\n            preco: 25000,\n            categoria: 'propriedades', \n            descricao: 'Terra para agricultura e cria√ß√£o',\n            emoji: 'üöú',\n            beneficio: 'Permite agricultura e cria√ß√£o'\n        },\n        posto_gasolina: {\n            id: 'posto_gasolina',\n            nome: '‚õΩ Posto de Gasolina',\n            preco: 35000,\n            categoria: 'propriedades',\n            descricao: 'Neg√≥cio lucrativo',\n            emoji: '‚õΩ',\n            beneficio: 'Renda passiva: +300 gold/dia'\n        }\n    },\n    // ANIMAIS E CRIA√á√ÉO\n    animais: {\n        galinha: {\n            id: 'galinha',\n            nome: 'üêî Galinha',\n            preco: 500,\n            categoria: 'animais',\n            descricao: 'Produz ovos diariamente',\n            emoji: 'üêî',\n            beneficio: 'Produz 3 ovos/dia (30 gold cada)'\n        },\n        pato: {\n            id: 'pato',\n            nome: 'ü¶Ü Pato', \n            preco: 800,\n            categoria: 'animais',\n            descricao: 'Pato para cria√ß√£o',\n            emoji: 'ü¶Ü',\n            beneficio: 'Produz carne valiosa'\n        },\n        cavalo: {\n            id: 'cavalo',\n            nome: 'üêé Cavalo',\n            preco: 8000,\n            categoria: 'animais',\n            descricao: 'Para corridas e transporte',\n            emoji: 'üêé',\n            beneficio: 'Permite corridas e +50% velocidade entrega'\n        },\n        gato: {\n            id: 'gato', \n            nome: 'üê± Gato',\n            preco: 200,\n            categoria: 'animais',\n            descricao: 'Companheiro fiel',\n            emoji: 'üê±',\n            beneficio: 'Traz sorte (+5% chance cr√≠tico)'\n        },\n        cachorro: {\n            id: 'cachorro',\n            nome: 'üê∂ Cachorro',\n            preco: 300,\n            categoria: 'animais', \n            descricao: 'Melhor amigo do homem',\n            emoji: 'üê∂',\n            beneficio: 'Protege contra assaltos (+20% defesa)'\n        },\n        vaca: {\n            id: 'vaca',\n            nome: 'üêÑ Vaca',\n            preco: 2500,\n            categoria: 'animais',\n            descricao: 'Produz leite fresco',\n            emoji: 'üêÑ',\n            beneficio: 'Produz 5 litros leite/dia (25 gold cada)'\n        },\n        porco: {\n            id: 'porco',\n            nome: 'üê∑ Porco', \n            preco: 1200,\n            categoria: 'animais',\n            descricao: 'Cria√ß√£o rent√°vel',\n            emoji: 'üê∑',\n            beneficio: 'Renda de 80 gold/dia'\n        }\n    },\n    // FERRAMENTAS E UPGRADES\n    ferramentas: {\n        vara_ouro: {\n            id: 'vara_ouro',\n            nome: 'üé£ Vara de Ouro',\n            preco: 3000,\n            categoria: 'ferramentas',\n            descricao: 'Vara de pesca premium',\n            emoji: 'üé£',\n            beneficio: '+25% chance peixes raros'\n        },\n        picareta_diamante: {\n            id: 'picareta_diamante',\n            nome: '‚õèÔ∏è Picareta de Diamante',\n            preco: 4500,\n            categoria: 'ferramentas',\n            descricao: 'Ferramenta de minera√ß√£o suprema',\n            emoji: '‚õèÔ∏è',\n            beneficio: '+30% chance minerais valiosos'\n        },\n        trator: {\n            id: 'trator',\n            nome: 'üöú Trator',\n            preco: 12000,\n            categoria: 'ferramentas',\n            descricao: 'Para agricultura avan√ßada',\n            emoji: 'üöú',\n            beneficio: '+50% produ√ß√£o agr√≠cola'\n        }\n    },\n    // VE√çCULOS\n    veiculos: {\n        bike: {\n            id: 'bike',\n            nome: 'üö≤ Bicicleta',\n            preco: 800,\n            categoria: 'veiculos',\n            descricao: 'Transporte b√°sico',\n            emoji: 'üö≤', \n            beneficio: '+10% velocidade trabalhos'\n        },\n        moto: {\n            id: 'moto',\n            nome: 'üèçÔ∏è Motocicleta',\n            preco: 5000,\n            categoria: 'veiculos',\n            descricao: 'Para entregas r√°pidas',\n            emoji: 'üèçÔ∏è',\n            beneficio: 'Habilita trabalho entregador'\n        },\n        carro: {\n            id: 'carro',\n            nome: 'üöó Carro',\n            preco: 20000,\n            categoria: 'veiculos',\n            descricao: 'Autom√≥vel confort√°vel',\n            emoji: 'üöó',\n            beneficio: 'Habilita trabalho uber (+200 gold/viagem)'\n        },\n        carro_esportivo: {\n            id: 'carro_esportivo',\n            nome: 'üèéÔ∏è Carro Esportivo',\n            preco: 80000,\n            categoria: 'veiculos',\n            descricao: 'Velocidade e estilo',\n            emoji: 'üèéÔ∏è',\n            beneficio: 'Corridas de rua (+1000 gold/vit√≥ria)'\n        },\n        caminhao: {\n            id: 'caminhao',\n            nome: 'üöõ Caminh√£o',\n            preco: 45000,\n            categoria: 'veiculos',\n            descricao: 'Para cargas pesadas',\n            emoji: 'üöõ',\n            beneficio: 'Trabalho caminhoneiro (+500 gold/viagem)'\n        },\n        barco: {\n            id: 'barco',\n            nome: 'üõ•Ô∏è Barco',\n            preco: 150000,\n            categoria: 'veiculos',\n            descricao: 'Navega√ß√£o de luxo',\n            emoji: 'üõ•Ô∏è',\n            beneficio: 'Trabalho capit√£o (+600 gold/viagem)'\n        },\n        aviao: {\n            id: 'aviao',\n            nome: '‚úàÔ∏è Avi√£o Particular',\n            preco: 500000,\n            categoria: 'veiculos',\n            descricao: 'Luxo m√°ximo nos c√©us',\n            emoji: '‚úàÔ∏è',\n            beneficio: 'Trabalho piloto (+800 gold/voo)'\n        }\n    },\n    \n    // NEG√ìCIOS E EMPRESAS\n    negocios: {\n        lanchonete: {\n            id: 'lanchonete',\n            nome: 'üçî Lanchonete',\n            preco: 50000,\n            categoria: 'negocios',\n            descricao: 'Neg√≥cio de alimenta√ß√£o',\n            emoji: 'üçî',\n            beneficio: 'Renda passiva: +400 gold/dia'\n        },\n        academia: {\n            id: 'academia',\n            nome: 'üí™ Academia',\n            preco: 80000,\n            categoria: 'negocios',\n            descricao: 'Centro de fitness',\n            emoji: 'üí™',\n            beneficio: 'Renda passiva: +600 gold/dia'\n        },\n        empresa: {\n            id: 'empresa',\n            nome: 'üè¢ Empresa',\n            preco: 200000,\n            categoria: 'negocios',\n            descricao: 'Grande corpora√ß√£o',\n            emoji: 'üè¢',\n            beneficio: 'Habilita trabalho CEO (+1200 gold/dia)'\n        },\n        banco: {\n            id: 'banco',\n            nome: 'üè¶ Banco',\n            preco: 1000000,\n            categoria: 'negocios',\n            descricao: 'Institui√ß√£o financeira',\n            emoji: 'üè¶',\n            beneficio: 'Renda passiva: +5000 gold/dia'\n        }\n    },\n    \n    // TECNOLOGIA E SETUP\n    tecnologia: {\n        smartphone: {\n            id: 'smartphone',\n            nome: 'üì± Smartphone',\n            preco: 2000,\n            categoria: 'tecnologia',\n            descricao: 'Celular moderno',\n            emoji: 'üì±',\n            beneficio: '+10% efici√™ncia em trabalhos'\n        },\n        computador: {\n            id: 'computador',\n            nome: 'üíª Computador',\n            preco: 8000,\n            categoria: 'tecnologia',\n            descricao: 'PC para trabalho',\n            emoji: 'üíª',\n            beneficio: 'Habilita trabalho programador'\n        },\n        setup_stream: {\n            id: 'setup_stream',\n            nome: 'üìπ Setup de Stream',\n            preco: 25000,\n            categoria: 'tecnologia',\n            descricao: 'Equipamentos para streaming',\n            emoji: 'üìπ',\n            beneficio: 'Habilita trabalho streamer (+300 gold/stream)'\n        },\n        servidor: {\n            id: 'servidor',\n            nome: 'üñ•Ô∏è Servidor',\n            preco: 100000,\n            categoria: 'tecnologia',\n            descricao: 'Servidor dedicado',\n            emoji: 'üñ•Ô∏è',\n            beneficio: 'Renda passiva: +1000 gold/dia'\n        }\n    }\n};\n\n// Peixes dispon√≠veis para pesca\nconst peixes = [\n    { nome: 'Peixe Dourado', valor: 250, raridade: 'lendario', emoji: 'üê†', chance: 2 },\n    { nome: 'Salm√£o', valor: 180, raridade: 'epico', emoji: 'üêü', chance: 5 },\n    { nome: 'Atum', valor: 120, raridade: 'raro', emoji: 'üêü', chance: 10 },\n    { nome: 'Sardinha', valor: 80, raridade: 'comum', emoji: 'üêü', chance: 25 },\n    { nome: 'Til√°pia', valor: 60, raridade: 'comum', emoji: 'üêü', chance: 30 },\n    { nome: 'Bagre', valor: 40, raridade: 'comum', emoji: 'üêü', chance: 28 }\n];\n\n// Animais para ca√ßa\nconst animaisCaca = [\n    { nome: 'Javali', valor: 300, raridade: 'lendario', emoji: 'üêó', chance: 3 },\n    { nome: 'Veado', valor: 200, raridade: 'epico', emoji: 'ü¶å', chance: 8 },\n    { nome: 'Coelho', valor: 100, raridade: 'raro', emoji: 'üê∞', chance: 15 },\n    { nome: 'Pato Selvagem', valor: 80, raridade: 'comum', emoji: 'ü¶Ü', chance: 30 },\n    { nome: 'Perdiz', valor: 60, raridade: 'comum', emoji: 'üê¶', chance: 44 }\n];\n\n// Cultivos para agricultura\nconst cultivos = [\n    { nome: 'Milho', valor: 120, tempo: 60, emoji: 'üåΩ', categoria: 'cereal' },\n    { nome: 'Tomate', valor: 100, tempo: 45, emoji: 'üçÖ', categoria: 'verdura' },\n    { nome: 'Batata', valor: 80, tempo: 90, emoji: 'ü•î', categoria: 'tub√©rculo' },\n    { nome: 'Cenoura', valor: 70, tempo: 30, emoji: 'ü•ï', categoria: 'verdura' },\n    { nome: 'Alface', valor: 50, tempo: 20, emoji: 'ü•¨', categoria: 'folha' }\n];\n\n// Minerais dispon√≠veis para minera√ß√£o\nconst minerais = [\n    { nome: 'Diamante', valor: 500, raridade: 'lendario', emoji: 'üíé', chance: 1 },\n    { nome: 'Ouro', valor: 300, raridade: 'epico', emoji: 'ü•á', chance: 3 },\n    { nome: 'Prata', valor: 200, raridade: 'raro', emoji: 'ü•à', chance: 8 },\n    { nome: 'Ferro', valor: 100, raridade: 'comum', emoji: '‚ö°', chance: 25 },\n    { nome: 'Cobre', valor: 60, raridade: 'comum', emoji: 'üü§', chance: 35 },\n    { nome: 'Carv√£o', valor: 30, raridade: 'comum', emoji: '‚ö´', chance: 28 }\n];\n\n// Trabalhos dispon√≠veis  \nconst trabalhos = [\n    { nome: 'Programador', salario: 150, emoji: 'üíª', requisito: null },\n    { nome: 'M√©dico', salario: 200, emoji: 'üë®‚Äç‚öïÔ∏è', requisito: null },\n    { nome: 'Professor', salario: 120, emoji: 'üë®‚Äçüè´', requisito: null },\n    { nome: 'Vendedor', salario: 100, emoji: 'üë®‚Äçüíº', requisito: null },\n    { nome: 'Motorista', salario: 80, emoji: 'üöó', requisito: null },\n    { nome: 'Seguran√ßa', salario: 90, emoji: 'üõ°Ô∏è', requisito: null },\n    { nome: 'Entregador', salario: 120, emoji: 'üèçÔ∏è', requisito: 'moto' },\n    { nome: 'Uber', salario: 200, emoji: 'üöó', requisito: 'carro' },\n    { nome: 'Caminhoneiro', salario: 500, emoji: 'üöõ', requisito: 'caminhao' },\n    { nome: 'Fazendeiro', salario: 180, emoji: 'üöú', requisito: 'fazenda' },\n    { nome: 'Piloto', salario: 800, emoji: '‚úàÔ∏è', requisito: 'aviao' },\n    { nome: 'Capit√£o de Barco', salario: 600, emoji: 'üõ•Ô∏è', requisito: 'barco' },\n    { nome: 'CEO', salario: 1200, emoji: 'üè¢', requisito: 'empresa' },\n    { nome: 'Streamer', salario: 300, emoji: 'üìπ', requisito: 'setup_stream' }\n];\n\n// Cursos e educa√ß√£o dispon√≠veis\nconst cursos = [\n    { nome: 'Ensino M√©dio', salario: 50, duracao: 30, emoji: 'üéì', nivel: 1 },\n    { nome: 'Curso T√©cnico', salario: 100, duracao: 45, emoji: 'üîß', nivel: 2 },\n    { nome: 'Gradua√ß√£o', salario: 200, duracao: 60, emoji: 'üë®‚Äçüéì', nivel: 3 },\n    { nome: 'P√≥s-Gradua√ß√£o', salario: 350, duracao: 90, emoji: 'üéñÔ∏è', nivel: 4 },\n    { nome: 'Mestrado', salario: 500, duracao: 120, emoji: 'üìú', nivel: 5 },\n    { nome: 'Doutorado', salario: 800, duracao: 180, emoji: 'üèÜ', nivel: 6 }\n];\n\n// Investimentos dispon√≠veis\nconst investimentos = [\n    { nome: 'Poupan√ßa', multiplicador: 1.05, risco: 5, emoji: 'üè¶', minimo: 1000 },\n    { nome: 'Tesouro Direto', multiplicador: 1.15, risco: 10, emoji: 'üèõÔ∏è', minimo: 2000 },\n    { nome: 'CDB', multiplicador: 1.25, risco: 15, emoji: 'üí≥', minimo: 5000 },\n    { nome: 'A√ß√µes', multiplicador: 1.50, risco: 40, emoji: 'üìà', minimo: 10000 },\n    { nome: 'Forex', multiplicador: 2.00, risco: 60, emoji: 'üí±', minimo: 20000 },\n    { nome: 'Crypto', multiplicador: 3.00, risco: 80, emoji: '‚Çø', minimo: 15000 }\n];\n\n// Imagens do sistema\nconst imagens = {\n    pesca: [\n        'https://i.ibb.co/TMyLLC3R/41c684278e9f0d135ebc9e256b48868a.jpg',\n        'https://i.ibb.co/DXvzXGn/20d09f32ae9946cd9ea3157f9c15185a.jpg'\n    ],\n    mineracao: [\n        'https://i.ibb.co/zWsQKzYn/fd4e0eac6d004504ca5a16413fa90ad6.jpg', \n        'https://i.ibb.co/5hyff8B4/3b938d5b6b50323e58414c9edb72053b.jpg'\n    ],\n    tigrinho: [\n        'https://i.ibb.co/xG9QxjD/tigrinho-cassino-1.jpg',\n        'https://i.ibb.co/yNpL4zV/tigrinho-cassino-2.jpg',\n        'https://i.ibb.co/RQfvXdt/tigrinho-perdeu-tudo.jpg'\n    ],\n    trabalho: [\n        'https://i.ibb.co/hL8tKyS/trabalho-escritorio.jpg',\n        'https://i.ibb.co/QdR4fVp/trabalho-construcao.jpg'\n    ],\n    caca: [\n        'https://i.ibb.co/mNvLFzD/cacador-floresta.jpg',\n        'https://i.ibb.co/KWp2YjS/caca-animais.jpg' \n    ],\n    agricultura: [\n        'https://i.ibb.co/yX8bJgT/fazenda-plantacao.jpg',\n        'https://i.ibb.co/VHGKqNf/agricultura-colheita.jpg'\n    ],\n    loja: [\n        'https://i.ibb.co/pWqKbZR/loja-neext-city.jpg',\n        'https://i.ibb.co/dMfQxYG/compras-rpg.jpg'\n    ],\n    pix: [\n        'https://i.ibb.co/XsRtKgD/pix-transferencia.jpg',\n        'https://i.ibb.co/qjPgHmW/pix-banco.jpg'\n    ],\n    corrida: [\n        'https://i.ibb.co/kDgHtNm/corrida-cavalos.jpg',\n        'https://i.ibb.co/7Y4pbLz/hipismo-corrida.jpg'\n    ]\n};\n\n// Frases motivacionais\nconst frasesMotivacionais = [\n    'üí™ Continue trabalhando duro!',\n    'üåü Voc√™ est√° no caminho certo!',\n    'üöÄ Rumo ao sucesso em NeextCity!',\n    'üí∞ O dinheiro n√£o dorme!',\n    'üèÜ Seja o melhor de NeextCity!'\n];\n\n// Carrega dados do RPG\nfunction carregarDadosRPG() {\n    try {\n        if (!fs.existsSync(rpgDataFile)) {\n            const dir = path.dirname(rpgDataFile);\n            if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });\n            fs.writeFileSync(rpgDataFile, JSON.stringify({ grupos: {}, jogadores: {} }, null, 2));\n        }\n        const data = fs.readFileSync(rpgDataFile, 'utf-8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('‚ùå Erro ao carregar dados RPG:', err);\n        return { grupos: {}, jogadores: {} };\n    }\n}\n\n// Fun√ß√£o para garantir estrutura completa do usu√°rio\nfunction ensureUserDefaults(usuario) {\n    const hoje = moment().tz('America/Sao_Paulo').format('YYYY-MM-DD');\n    \n    return {\n        nome: usuario.nome || 'Jogador',\n        banco: usuario.banco || bancos[0],\n        saldo: usuario.saldo || 100,\n        registrado: usuario.registrado || new Date().toISOString(),\n        \n        // Invent√°rio e propriedades\n        inventario: usuario.inventario || {},\n        propriedades: usuario.propriedades || {},\n        \n        // Contadores de atividades\n        pescasFeitas: usuario.pescasFeitas || 0,\n        mineracoesFeitas: usuario.mineracoesFeitas || 0,\n        trabalhosFeitos: usuario.trabalhosFeitos || 0,\n        assaltosFeitos: usuario.assaltosFeitos || 0,\n        cacasFeitas: usuario.cacasFeitas || 0,\n        agriculturasFeitas: usuario.agriculturasFeitas || 0,\n        entregasFeitas: usuario.entregasFeitas || 0,\n        corridasFeitas: usuario.corridasFeitas || 0,\n        coletasFeitas: usuario.coletasFeitas || 0,\n        estudosFeitos: usuario.estudosFeitos || 0,\n        investimentosFeitos: usuario.investimentosFeitos || 0,\n        apostasFeitas: usuario.apostasFeitas || 0,\n        \n        // √öltima vez que fez cada atividade\n        ultimaPesca: usuario.ultimaPesca || 0,\n        ultimaMineracao: usuario.ultimaMineracao || 0,\n        ultimoTrabalho: usuario.ultimoTrabalho || 0,\n        ultimoAssalto: usuario.ultimoAssalto || 0,\n        ultimaCaca: usuario.ultimaCaca || 0,\n        ultimaAgricultura: usuario.ultimaAgricultura || 0,\n        ultimaEntrega: usuario.ultimaEntrega || 0,\n        ultimaCorrida: usuario.ultimaCorrida || 0,\n        ultimaColeta: usuario.ultimaColeta || 0,\n        ultimoEstudo: usuario.ultimoEstudo || 0,\n        ultimoInvestimento: usuario.ultimoInvestimento || 0,\n        ultimaAposta: usuario.ultimaAposta || 0,\n        \n        // Sistema de limites di√°rios\n        limites: usuario.limites || {},\n        limitesData: usuario.limitesData || hoje,\n        \n        // Cultivos em andamento\n        cultivos: usuario.cultivos || [],\n        \n        // Hist√≥rico de PIX\n        pixEnviados: usuario.pixEnviados || [],\n        pixRecebidos: usuario.pixRecebidos || [],\n        \n        // Sistema educacional\n        educacao: usuario.educacao || {\n            nivel: 0,\n            cursosCompletos: [],\n            estudandoAtualmente: null\n        },\n        \n        // Investimentos ativos\n        investimentosAtivos: usuario.investimentosAtivos || [],\n        \n        // Estat√≠sticas especiais\n        totalGanho: usuario.totalGanho || 0,\n        totalGasto: usuario.totalGasto || 0,\n        maiorGanho: usuario.maiorGanho || 0,\n        tigrinhoJogadas: usuario.tigrinhoJogadas || 0,\n        tigrinhoPerdas: usuario.tigrinhoPerdas || 0\n    };\n}\n\n// Reseta limites di√°rios se necess√°rio\nfunction resetDailyLimitsIfNeeded(usuario) {\n    const hoje = moment().tz('America/Sao_Paulo').format('YYYY-MM-DD');\n    \n    if (usuario.limitesData !== hoje) {\n        usuario.limites = {};\n        usuario.limitesData = hoje;\n        \n        // Coleta autom√°tica de renda passiva\n        let rendaPassiva = 0;\n        if (usuario.propriedades) {\n            Object.keys(usuario.propriedades).forEach(propId => {\n                const item = catalogoItens.propriedades[propId];\n                if (item && item.beneficio.includes('Renda passiva')) {\n                    const valor = parseInt(item.beneficio.match(/\\d+/)?.[0] || 0);\n                    rendaPassiva += valor * (usuario.propriedades[propId] || 1);\n                }\n            });\n        }\n        \n        if (rendaPassiva > 0) {\n            usuario.saldo += rendaPassiva;\n            usuario.totalGanho += rendaPassiva;\n        }\n    }\n    \n    return usuario;\n}\n\n// Salva dados do RPG\nfunction salvarDadosRPG(data) {\n    try {\n        fs.writeFileSync(rpgDataFile, JSON.stringify(data, null, 2));\n        return true;\n    } catch (err) {\n        console.error('‚ùå Erro ao salvar dados RPG:', err);\n        return false;\n    }\n}\n\n// Verifica se RPG est√° ativo no grupo\nfunction isRPGAtivo(groupId) {\n    const dados = carregarDadosRPG();\n    return dados.grupos[groupId]?.ativo || false;\n}\n\n// Ativa/desativa RPG no grupo\nfunction toggleRPG(groupId, ativo) {\n    const dados = carregarDadosRPG();\n    if (!dados.grupos[groupId]) {\n        dados.grupos[groupId] = { ativo: false, jogadores: [] };\n    }\n    dados.grupos[groupId].ativo = ativo;\n    return salvarDadosRPG(dados);\n}\n\n// Verifica se usu√°rio est√° registrado\nfunction isUsuarioRegistrado(userId) {\n    const dados = carregarDadosRPG();\n    return !!dados.jogadores[userId];\n}\n\n// Registra novo usu√°rio\nfunction registrarUsuario(userId, nome, bancoId) {\n    return withLock(async () => {\n        const dados = carregarDadosRPG();\n        const banco = bancos.find(b => b.id === bancoId);\n        if (!banco) return false;\n\n        const novoUsuario = {\n            nome: nome,\n            banco: banco,\n            saldo: 100 // Saldo inicial\n        };\n\n        dados.jogadores[userId] = ensureUserDefaults(novoUsuario);\n        return salvarDadosRPG(dados);\n    });\n}\n\n// Obt√©m dados do usu√°rio\nfunction obterDadosUsuario(userId) {\n    const dados = carregarDadosRPG();\n    let usuario = dados.jogadores[userId];\n    if (!usuario) return null;\n    \n    usuario = ensureUserDefaults(usuario);\n    usuario = resetDailyLimitsIfNeeded(usuario);\n    \n    return usuario;\n}\n\n// ==================== SISTEMA PIX ====================\n// Fun√ß√£o para transferir dinheiro entre jogadores\nfunction pixTransferir(deUserId, paraUserId, valor, deNome, paraNome) {\n    return withLock(async () => {\n        const dados = carregarDadosRPG();\n        \n        let usuarioDe = dados.jogadores[deUserId];\n        let usuarioPara = dados.jogadores[paraUserId];\n        \n        if (!usuarioDe) return { erro: 'Voc√™ n√£o est√° registrado no RPG' };\n        if (!usuarioPara) return { erro: 'Destinat√°rio n√£o est√° registrado no RPG' };\n        \n        usuarioDe = ensureUserDefaults(usuarioDe);\n        usuarioPara = ensureUserDefaults(usuarioPara);\n        \n        if (deUserId === paraUserId) return { erro: 'N√£o √© poss√≠vel transferir para si mesmo' };\n        if (valor <= 0) return { erro: 'Valor deve ser positivo' };\n        if (valor < 10) return { erro: 'Valor m√≠nimo para PIX √© 10 Gold' };\n        if (usuarioDe.saldo < valor) return { erro: `Saldo insuficiente. Voc√™ tem ${usuarioDe.saldo} Gold` };\n        \n        // Taxa de 2% para transfer√™ncias\n        const taxa = Math.floor(valor * 0.02);\n        const valorFinal = valor - taxa;\n        \n        // Realiza a transfer√™ncia\n        usuarioDe.saldo -= valor;\n        usuarioPara.saldo += valorFinal;\n        \n        // Registra no hist√≥rico\n        const agora = new Date().toISOString();\n        const pixEnviado = {\n            para: paraUserId,\n            paraNome: paraNome || usuarioPara.nome,\n            valor: valor,\n            taxa: taxa,\n            valorFinal: valorFinal,\n            data: agora\n        };\n        \n        const pixRecebido = {\n            de: deUserId,\n            deNome: deNome || usuarioDe.nome,\n            valor: valorFinal,\n            data: agora\n        };\n        \n        usuarioDe.pixEnviados.push(pixEnviado);\n        usuarioPara.pixRecebidos.push(pixRecebido);\n        \n        // Limita hist√≥rico a 50 transa√ß√µes\n        if (usuarioDe.pixEnviados.length > 50) usuarioDe.pixEnviados.shift();\n        if (usuarioPara.pixRecebidos.length > 50) usuarioPara.pixRecebidos.shift();\n        \n        dados.jogadores[deUserId] = usuarioDe;\n        dados.jogadores[paraUserId] = usuarioPara;\n        \n        salvarDadosRPG(dados);\n        \n        return {\n            sucesso: true,\n            valor: valor,\n            taxa: taxa,\n            valorFinal: valorFinal,\n            saldoRemetente: usuarioDe.saldo,\n            saldoDestinatario: usuarioPara.saldo,\n            mensagem: `üí∏ **PIX REALIZADO COM SUCESSO!** ‚úÖ\\n\\n` +\n                     `üë§ **De:** ${usuarioDe.nome}\\n` +\n                     `üë§ **Para:** ${usuarioPara.nome}\\n` +\n                     `üí∞ **Valor:** ${valor} Gold\\n` +\n                     `üí≥ **Taxa (2%):** ${taxa} Gold\\n` +\n                     `‚úÖ **Recebido:** ${valorFinal} Gold\\n\\n` +\n                     `üè¶ **Seu saldo atual:** ${usuarioDe.saldo} Gold\\n\\n` +\n                     `‚è∞ **Data:** ${new Date().toLocaleString('pt-BR')}`\n        };\n    });\n}\n\n// Atualiza saldo do usu√°rio\nfunction atualizarSaldo(userId, novoSaldo) {\n    return withLock(async () => {\n        const dados = carregarDadosRPG();\n        if (dados.jogadores[userId]) {\n            dados.jogadores[userId].saldo = novoSaldo;\n            return salvarDadosRPG(dados);\n        }\n        return false;\n    });\n}\n\n// ==================== SISTEMA DE LOJA ====================\n// Comprar item da loja\nfunction comprarItem(userId, itemId, quantidade = 1) {\n    return withLock(async () => {\n        const dados = carregarDadosRPG();\n        let usuario = dados.jogadores[userId];\n        if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n        \n        usuario = ensureUserDefaults(usuario);\n        \n        // Procura o item em todas as categorias\n        let item = null;\n        let categoria = null;\n        \n        Object.keys(catalogoItens).forEach(cat => {\n            if (catalogoItens[cat][itemId]) {\n                item = catalogoItens[cat][itemId];\n                categoria = cat;\n            }\n        });\n        \n        if (!item) return { erro: 'Item n√£o encontrado na loja' };\n        \n        const custoTotal = item.preco * quantidade;\n        if (usuario.saldo < custoTotal) {\n            return { erro: `Saldo insuficiente! Voc√™ precisa de ${custoTotal} Gold (tem ${usuario.saldo} Gold)` };\n        }\n        \n        // Realiza a compra\n        usuario.saldo -= custoTotal;\n        usuario.totalGasto += custoTotal;\n        \n        if (categoria === 'propriedades') {\n            usuario.propriedades[itemId] = (usuario.propriedades[itemId] || 0) + quantidade;\n        } else {\n            usuario.inventario[itemId] = (usuario.inventario[itemId] || 0) + quantidade;\n        }\n        \n        dados.jogadores[userId] = usuario;\n        salvarDadosRPG(dados);\n        \n        return {\n            sucesso: true,\n            item: item,\n            quantidade: quantidade,\n            custoTotal: custoTotal,\n            saldo: usuario.saldo,\n            mensagem: `üõí **COMPRA REALIZADA!** ‚úÖ\\n\\n` +\n                     `${item.emoji} **${item.nome}**\\n` +\n                     `üì¶ **Quantidade:** ${quantidade}\\n` +\n                     `üí∞ **Custo total:** ${custoTotal} Gold\\n` +\n                     `üí° **Benef√≠cio:** ${item.beneficio}\\n\\n` +\n                     `üè¶ **Saldo restante:** ${usuario.saldo} Gold`,\n            imagem: imagens.loja[Math.floor(Math.random() * imagens.loja.length)]\n        };\n    });\n}\n\n// Listar itens da loja por categoria\nfunction listarLoja(categoria = null) {\n    const config = obterConfiguracoes();\n    let mensagem = 'üè™ **LOJA NEEXTCITY** üè™\\n\\n';\n    \n    if (categoria && catalogoItens[categoria]) {\n        const itens = catalogoItens[categoria];\n        mensagem += `üìÇ **Categoria: ${categoria.toUpperCase()}**\\n\\n`;\n        \n        Object.values(itens).forEach(item => {\n            mensagem += `${item.emoji} **${item.nome}**\\n`;\n            mensagem += `   üí∞ **Pre√ßo:** ${item.preco} Gold\\n`;\n            mensagem += `   üí° **Benef√≠cio:** ${item.beneficio}\\n`;\n            mensagem += `   üõí **Comprar:** \\`${config.prefix}comprar ${item.id}\\`\\n\\n`;\n        });\n    } else {\n        mensagem += 'üìÇ **CATEGORIAS DISPON√çVEIS:**\\n\\n';\n        mensagem += 'üè† **Propriedades** - Casas, fazendas, postos\\n';\n        mensagem += `   \\`${config.prefix}loja propriedades\\`\\n\\n`;\n        mensagem += 'üêæ **Animais** - Galinhas, cavalos, gatos\\n';\n        mensagem += `   \\`${config.prefix}loja animais\\`\\n\\n`;\n        mensagem += 'üîß **Ferramentas** - Varas, picaretas, tratores\\n';\n        mensagem += `   \\`${config.prefix}loja ferramentas\\`\\n\\n`;\n        mensagem += 'üöó **Ve√≠culos** - Bikes, motos, carros\\n';\n        mensagem += `   \\`${config.prefix}loja veiculos\\`\\n\\n`;\n        mensagem += `üí° **Para comprar:** \\`${config.prefix}comprar [item_id]\\`\\n`;\n    }\n    \n    return {\n        mensagem: mensagem,\n        imagem: imagens.loja[Math.floor(Math.random() * imagens.loja.length)]\n    };\n}\n\n// Ver invent√°rio do jogador\nfunction verInventario(userId) {\n    const dados = carregarDadosRPG();\n    let usuario = dados.jogadores[userId];\n    if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n    \n    usuario = ensureUserDefaults(usuario);\n    \n    let mensagem = `üì¶ **INVENT√ÅRIO DE ${usuario.nome.toUpperCase()}** üì¶\\n\\n`;\n    mensagem += `üí∞ **Saldo:** ${usuario.saldo} Gold\\n\\n`;\n    \n    // Propriedades\n    if (Object.keys(usuario.propriedades).length > 0) {\n        mensagem += 'üè† **PROPRIEDADES:**\\n';\n        Object.entries(usuario.propriedades).forEach(([itemId, qtd]) => {\n            const item = catalogoItens.propriedades[itemId];\n            if (item) {\n                mensagem += `   ${item.emoji} **${item.nome}** (${qtd}x)\\n`;\n            }\n        });\n        mensagem += '\\n';\n    }\n    \n    // Invent√°rio geral\n    if (Object.keys(usuario.inventario).length > 0) {\n        mensagem += 'üì¶ **ITENS:**\\n';\n        Object.entries(usuario.inventario).forEach(([itemId, qtd]) => {\n            // Procura o item em todas as categorias\n            let item = null;\n            Object.values(catalogoItens).forEach(categoria => {\n                if (categoria[itemId]) {\n                    item = categoria[itemId];\n                }\n            });\n            \n            if (item) {\n                mensagem += `   ${item.emoji} **${item.nome}** (${qtd}x)\\n`;\n            }\n        });\n        mensagem += '\\n';\n    }\n    \n    if (Object.keys(usuario.propriedades).length === 0 && Object.keys(usuario.inventario).length === 0) {\n        const config = obterConfiguracoes();\n        mensagem += 'üì≠ **Invent√°rio vazio!**\\n\\n';\n        mensagem += `üõí **Visite a loja:** \\`${config.prefix}loja\\`\\n`;\n    }\n    \n    return { mensagem: mensagem };\n}\n\n// Verifica cooldown\nfunction verificarCooldown(ultimaAcao, tempoEspera) {\n    const agora = Date.now();\n    const tempoRestante = (ultimaAcao + tempoEspera) - agora;\n    return tempoRestante > 0 ? tempoRestante : 0;\n}\n\n// Verifica limite di√°rio\nfunction verificarLimiteDiario(usuario, atividade) {\n    const limiteMax = DAILY_LIMITS[atividade] || 10;\n    const usoAtual = usuario.limites[atividade] || 0;\n    \n    if (usoAtual >= limiteMax) {\n        return {\n            excedido: true,\n            atual: usoAtual,\n            maximo: limiteMax,\n            restantes: 0\n        };\n    }\n    \n    return {\n        excedido: false,\n        atual: usoAtual,\n        maximo: limiteMax,\n        restantes: limiteMax - usoAtual\n    };\n}\n\n// Incrementa uso di√°rio\nfunction incrementarLimiteDiario(usuario, atividade) {\n    if (!usuario.limites) usuario.limites = {};\n    usuario.limites[atividade] = (usuario.limites[atividade] || 0) + 1;\n}\n\n// Formata tempo restante\nfunction formatarTempo(milissegundos) {\n    const segundos = Math.ceil(milissegundos / 1000);\n    const minutos = Math.floor(segundos / 60);\n    const seg = segundos % 60;\n    \n    if (minutos > 0) {\n        return `${minutos}m ${seg}s`;\n    }\n    return `${seg}s`;\n}\n\n// Sistema de Pesca\nfunction pescar(userId) {\n    const dados = carregarDadosRPG();\n    const usuario = dados.jogadores[userId];\n    if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n\n    // Verifica cooldown (5 minutos)\n    const cooldown = verificarCooldown(usuario.ultimaPesca, 5 * 60 * 1000);\n    if (cooldown > 0) {\n        return { \n            erro: 'Cooldown', \n            tempo: formatarTempo(cooldown),\n            mensagem: `üé£ Voc√™ precisa esperar **${formatarTempo(cooldown)}** para pescar novamente!`\n        };\n    }\n\n    // Chance de falha (anzol quebrar, etc.)\n    const chancefalha = Math.random() * 100;\n    if (chancefalha < 15) {\n        usuario.ultimaPesca = Date.now();\n        salvarDadosRPG(dados);\n        \n        const falhas = [\n            'üé£ Seu anzol quebrou! Que azar...',\n            'üé£ O peixe escapou! Tente novamente mais tarde.',\n            'üé£ Sua linha de pesca se embara√ßou!',\n            'üé£ Voc√™ n√£o conseguiu pescar nada desta vez.',\n            'üé£ Um peixe grande levou sua isca!'\n        ];\n        \n        return {\n            sucesso: false,\n            mensagem: falhas[Math.floor(Math.random() * falhas.length)],\n            imagem: imagens.pesca[Math.floor(Math.random() * imagens.pesca.length)]\n        };\n    }\n\n    // Determina qual peixe foi pescado\n    const rand = Math.random() * 100;\n    let chanceAcumulada = 0;\n    let peixePescado = null;\n\n    for (const peixe of peixes) {\n        chanceAcumulada += peixe.chance;\n        if (rand <= chanceAcumulada) {\n            peixePescado = peixe;\n            break;\n        }\n    }\n\n    if (!peixePescado) peixePescado = peixes[peixes.length - 1];\n\n    // Atualiza dados do usu√°rio\n    usuario.saldo += peixePescado.valor;\n    usuario.ultimaPesca = Date.now();\n    usuario.pescasFeitas++;\n    salvarDadosRPG(dados);\n\n    const raridadeEmoji = {\n        'lendario': 'üåü',\n        'epico': 'üíú',\n        'raro': 'üíô',\n        'comum': '‚ö™'\n    };\n\n    return {\n        sucesso: true,\n        peixe: peixePescado,\n        mensagem: `üé£ **PESCA REALIZADA!**\\n\\n` +\n                 `${raridadeEmoji[peixePescado.raridade]} **${peixePescado.nome}** ${peixePescado.emoji}\\n` +\n                 `üí∞ **+${peixePescado.valor} Gold**\\n` +\n                 `üè¶ **Saldo:** ${usuario.saldo} Gold\\n` +\n                 `üé£ **Pescas feitas:** ${usuario.pescasFeitas}`,\n        imagem: imagens.pesca[Math.floor(Math.random() * imagens.pesca.length)]\n    };\n}\n\n// Sistema de Minera√ß√£o\nfunction minerar(userId) {\n    const dados = carregarDadosRPG();\n    const usuario = dados.jogadores[userId];\n    if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n\n    // Verifica cooldown (7 minutos)\n    const cooldown = verificarCooldown(usuario.ultimaMineracao, 7 * 60 * 1000);\n    if (cooldown > 0) {\n        return { \n            erro: 'Cooldown', \n            tempo: formatarTempo(cooldown),\n            mensagem: `‚õèÔ∏è Voc√™ precisa esperar **${formatarTempo(cooldown)}** para minerar novamente!`\n        };\n    }\n\n    // Chance de falha (picareta quebrar, etc.)\n    const chancefalha = Math.random() * 100;\n    if (chancefalha < 20) {\n        usuario.ultimaMineracao = Date.now();\n        salvarDadosRPG(dados);\n        \n        const falhas = [\n            '‚õèÔ∏è Sua picareta quebrou na pedra!',\n            '‚õèÔ∏è Voc√™ n√£o encontrou nada nesta √°rea.',\n            '‚õèÔ∏è A mina desabou! Que azar...',\n            '‚õèÔ∏è Voc√™ se cansou e n√£o conseguiu minerar.',\n            '‚õèÔ∏è A rocha estava muito dura!'\n        ];\n        \n        return {\n            sucesso: false,\n            mensagem: falhas[Math.floor(Math.random() * falhas.length)],\n            imagem: imagens.mineracao[Math.floor(Math.random() * imagens.mineracao.length)]\n        };\n    }\n\n    // Determina qual mineral foi encontrado\n    const rand = Math.random() * 100;\n    let chanceAcumulada = 0;\n    let mineralEncontrado = null;\n\n    for (const mineral of minerais) {\n        chanceAcumulada += mineral.chance;\n        if (rand <= chanceAcumulada) {\n            mineralEncontrado = mineral;\n            break;\n        }\n    }\n\n    if (!mineralEncontrado) mineralEncontrado = minerais[minerais.length - 1];\n\n    // Atualiza dados do usu√°rio\n    usuario.saldo += mineralEncontrado.valor;\n    usuario.ultimaMineracao = Date.now();\n    usuario.mineracoesFeitas++;\n    salvarDadosRPG(dados);\n\n    const raridadeEmoji = {\n        'lendario': 'üåü',\n        'epico': 'üíú',\n        'raro': 'üíô',\n        'comum': '‚ö™'\n    };\n\n    return {\n        sucesso: true,\n        mineral: mineralEncontrado,\n        mensagem: `‚õèÔ∏è **MINERA√á√ÉO REALIZADA!**\\n\\n` +\n                 `${raridadeEmoji[mineralEncontrado.raridade]} **${mineralEncontrado.nome}** ${mineralEncontrado.emoji}\\n` +\n                 `üí∞ **+${mineralEncontrado.valor} Gold**\\n` +\n                 `üè¶ **Saldo:** ${usuario.saldo} Gold\\n` +\n                 `‚õèÔ∏è **Minera√ß√µes feitas:** ${usuario.mineracoesFeitas}`,\n        imagem: imagens.mineracao[Math.floor(Math.random() * imagens.mineracao.length)]\n    };\n}\n\n// Sistema de Trabalho\nfunction trabalhar(userId) {\n    const dados = carregarDadosRPG();\n    const usuario = dados.jogadores[userId];\n    if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n\n    // Verifica cooldown (10 minutos)\n    const cooldown = verificarCooldown(usuario.ultimoTrabalho, 10 * 60 * 1000);\n    if (cooldown > 0) {\n        return { \n            erro: 'Cooldown', \n            tempo: formatarTempo(cooldown),\n            mensagem: `üíº Voc√™ precisa esperar **${formatarTempo(cooldown)}** para trabalhar novamente!`\n        };\n    }\n\n    // Escolhe trabalho aleat√≥rio\n    const trabalho = trabalhos[Math.floor(Math.random() * trabalhos.length)];\n    \n    // Atualiza dados do usu√°rio\n    usuario.saldo += trabalho.salario;\n    usuario.ultimoTrabalho = Date.now();\n    usuario.trabalhosFeitos++;\n    salvarDadosRPG(dados);\n\n    return {\n        sucesso: true,\n        trabalho: trabalho,\n        mensagem: `üíº **TRABALHO REALIZADO!**\\n\\n` +\n                 `${trabalho.emoji} **${trabalho.nome}**\\n` +\n                 `üí∞ **+${trabalho.salario} Gold**\\n` +\n                 `üè¶ **Saldo:** ${usuario.saldo} Gold\\n` +\n                 `üíº **Trabalhos feitos:** ${usuario.trabalhosFeitos}`\n    };\n}\n\n// JOGO DO TIGRINHO APRIMORADO - ROUBA 50% DO DINHEIRO!\nfunction jogarTigrinho(userId, aposta) {\n    return withLock(async () => {\n        const dados = carregarDadosRPG();\n        let usuario = dados.jogadores[userId];\n        if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n        \n        usuario = ensureUserDefaults(usuario);\n        usuario = resetDailyLimitsIfNeeded(usuario);\n        \n        if (aposta < 10) return { erro: 'Aposta m√≠nima √© 10 Gold' };\n        if (aposta > usuario.saldo) return { erro: 'Saldo insuficiente' };\n        \n        // Sistema predat√≥rio: apenas 15% de chance de ganhar!\n        const chanceGanhar = Math.random() * 100;\n        const simbolos = ['üêÖ', 'üçé', 'üçí', 'üçã', 'üîî', 'üíé', 'üé∞', '‚≠ê'];\n        \n        let resultado, ganhou, premioFinal = 0, perdaExtra = 0;\n        \n        usuario.tigrinhoJogadas++;\n        \n        if (chanceGanhar <= 15) { // Apenas 15% de chance de ganhar\n            // GANHOU - mas pouco\n            ganhou = true;\n            resultado = [simbolos[0], simbolos[0], simbolos[0]]; // For√ßar combina√ß√£o\n            \n            if (chanceGanhar <= 2) {\n                // Jackpot ultra raro (2%)\n                multiplicador = 3;\n                resultado = ['üíé', 'üíé', 'üíé'];\n            } else if (chanceGanhar <= 5) {\n                // Tigrinho raro (3%)\n                multiplicador = 2;\n                resultado = ['üêÖ', 'üêÖ', 'üêÖ'];\n            } else {\n                // Ganho pequeno (10%)\n                multiplicador = 1.2;\n                resultado = ['‚≠ê', '‚≠ê', '‚≠ê'];\n            }\n            \n            premioFinal = Math.floor(aposta * multiplicador);\n            usuario.saldo = usuario.saldo - aposta + premioFinal;\n            usuario.totalGanho += (premioFinal - aposta);\n            \n        } else {\n            // PERDEU - e perde MUITO!\n            ganhou = false;\n            usuario.tigrinhoPerdas++;\n            \n            // Gera resultado perdedor\n            resultado = [\n                simbolos[Math.floor(Math.random() * simbolos.length)],\n                simbolos[Math.floor(Math.random() * simbolos.length)],\n                simbolos[Math.floor(Math.random() * simbolos.length)]\n            ];\n            \n            // Garantir que n√£o seja uma combina√ß√£o vencedora\n            while (resultado[0] === resultado[1] && resultado[1] === resultado[2]) {\n                resultado[2] = simbolos[Math.floor(Math.random() * simbolos.length)];\n            }\n            \n            // AQUI EST√Å A ARMADILHA: Perde a aposta + 50% do saldo restante!\n            const saldoRestante = usuario.saldo - aposta;\n            perdaExtra = Math.floor(saldoRestante * 0.5); // 50% do saldo restante\n            \n            usuario.saldo -= aposta + perdaExtra;\n            usuario.totalGasto += aposta + perdaExtra;\n            \n            // N√£o deixa ficar negativo\n            if (usuario.saldo < 0) {\n                perdaExtra += usuario.saldo; // Ajusta a perda extra\n                usuario.saldo = 0;\n            }\n        }\n        \n        dados.jogadores[userId] = usuario;\n        salvarDadosRPG(dados);\n        \n        const config = obterConfiguracoes();\n        \n        return {\n            sucesso: true,\n            ganhou: ganhou,\n            resultado: resultado,\n            aposta: aposta,\n            premio: premioFinal,\n            perdaExtra: perdaExtra,\n            saldo: usuario.saldo,\n            imagem: imagens.tigrinho[ganhou ? 0 : Math.floor(Math.random() * 2) + 1],\n            mensagem: `üé∞ **JOGO DO TIGRINHO** üêÖ\\n\\n` +\n                     `üé≤ [ ${resultado.join(' | ')} ]\\n\\n` +\n                     (ganhou ? \n                        `üéâ **PARAB√âNS! VOC√ä GANHOU!** üéä\\nüí∞ **Ganho:** +${premioFinal - aposta} Gold\\n` :\n                        `üíÄ **VOC√ä PERDEU TUDO!** üò≠\\nüí∏ **Aposta perdida:** -${aposta} Gold\\n` +\n                        (perdaExtra > 0 ? `üî• **TIGRINHO ROUBOU 50%:** -${perdaExtra} Gold\\n` : '') +\n                        `‚ö†Ô∏è **O Tigrinho √© viciante e rouba seu dinheiro!**\\n`\n                     ) +\n                     `üè¶ **Saldo atual:** ${usuario.saldo} Gold\\n` +\n                     `üéØ **Jogadas:** ${usuario.tigrinhoJogadas} | üìâ **Perdas:** ${usuario.tigrinhoPerdas}\\n\\n` +\n                     (usuario.saldo < 100 ? `‚ö†Ô∏è **CUIDADO:** Seu saldo est√° baixo! Use \\`${config.prefix}trabalhar\\` ou \\`${config.prefix}pescar\\` para recuperar!` : \n                     `üí° **Dica:** Pare enquanto ainda tem dinheiro! Use \\`${config.prefix}rank\\` para ver os mais ricos!`)\n        };\n    });\n}\n\n// Sistema de Assalto\nfunction assaltar(userId, targetId) {\n    const dados = carregarDadosRPG();\n    const usuario = dados.jogadores[userId];\n    const alvo = dados.jogadores[targetId];\n    \n    if (!usuario) return { erro: 'Voc√™ n√£o est√° registrado' };\n    if (!alvo) return { erro: 'Usu√°rio alvo n√£o est√° registrado' };\n    if (userId === targetId) return { erro: 'Voc√™ n√£o pode assaltar a si mesmo' };\n\n    // Verifica cooldown (15 minutos)\n    const cooldown = verificarCooldown(usuario.ultimoAssalto, 15 * 60 * 1000);\n    if (cooldown > 0) {\n        return { \n            erro: 'Cooldown', \n            tempo: formatarTempo(cooldown),\n            mensagem: `üî´ Voc√™ precisa esperar **${formatarTempo(cooldown)}** para assaltar novamente!`\n        };\n    }\n\n    if (alvo.saldo < 50) return { erro: 'O alvo n√£o tem Gold suficiente para ser assaltado (m√≠nimo 50)' };\n\n    // Chance de sucesso (60%)\n    const sucesso = Math.random() < 0.6;\n    const valorAssaltado = Math.floor(alvo.saldo * 0.2); // 20% do saldo do alvo\n\n    usuario.ultimoAssalto = Date.now();\n    usuario.assaltosFeitos++;\n\n    if (sucesso) {\n        usuario.saldo += valorAssaltado;\n        alvo.saldo -= valorAssaltado;\n        \n        salvarDadosRPG(dados);\n        \n        return {\n            sucesso: true,\n            assalto: true,\n            valor: valorAssaltado,\n            mensagem: `üî´ **ASSALTO BEM-SUCEDIDO!**\\n\\n` +\n                     `üí∞ **+${valorAssaltado} Gold** roubados de ${alvo.nome}\\n` +\n                     `üè¶ **Seu saldo:** ${usuario.saldo} Gold\\n` +\n                     `üî´ **Assaltos feitos:** ${usuario.assaltosFeitos}`\n        };\n    } else {\n        // Falha no assalto - perde 30 Gold como multa\n        const multa = Math.min(30, usuario.saldo);\n        usuario.saldo -= multa;\n        \n        salvarDadosRPG(dados);\n        \n        return {\n            sucesso: true,\n            assalto: false,\n            multa: multa,\n            mensagem: `üî´ **ASSALTO FALHOU!**\\n\\n` +\n                     `üö® Voc√™ foi pego e pagou **${multa} Gold** de multa!\\n` +\n                     `üè¶ **Seu saldo:** ${usuario.saldo} Gold\\n` +\n                     `üî´ **Assaltos feitos:** ${usuario.assaltosFeitos}`\n        };\n    }\n}\n\n// Sistema de Ranking\nfunction obterRanking() {\n    const dados = carregarDadosRPG();\n    const jogadores = Object.entries(dados.jogadores)\n        .map(([id, dados]) => ({ id, ...dados }))\n        .sort((a, b) => b.saldo - a.saldo)\n        .slice(0, 10); // Top 10\n\n    if (jogadores.length === 0) {\n        return { mensagem: 'üìä Nenhum jogador registrado ainda!' };\n    }\n\n    let ranking = 'üèÜ **RANKING DOS MAIS RICOS - NEEXTCITY**\\n\\n';\n    \n    jogadores.forEach((jogador, index) => {\n        const posicao = index + 1;\n        const medal = posicao === 1 ? 'ü•á' : posicao === 2 ? 'ü•à' : posicao === 3 ? 'ü•â' : `${posicao}¬∞`;\n        \n        ranking += `${medal} **${jogador.nome}**\\n`;\n        ranking += `   ${jogador.banco.emoji} ${jogador.banco.nome}\\n`;\n        ranking += `   üí∞ ${jogador.saldo} Gold\\n\\n`;\n    });\n\n    return { mensagem: ranking };\n}\n\n// ==================== SISTEMA DE EDUCA√á√ÉO ====================\n// Fun√ß√£o para estudar\nfunction estudar(userId) {\n    return withLock(async () => {\n        const dados = carregarDadosRPG();\n        let usuario = dados.jogadores[userId];\n        if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n        \n        usuario = ensureUserDefaults(usuario);\n        \n        // Verifica cooldown (20 minutos)\n        const cooldown = verificarCooldown(usuario.ultimoEstudo, 20 * 60 * 1000);\n        if (cooldown > 0) {\n            return { \n                erro: 'Cooldown', \n                tempo: formatarTempo(cooldown),\n                mensagem: `üìö Voc√™ precisa esperar **${formatarTempo(cooldown)}** para estudar novamente!`\n            };\n        }\n        \n        // Verifica se j√° est√° estudando um curso\n        if (usuario.educacao.estudandoAtualmente) {\n            const cursoAtual = cursos.find(c => c.nome === usuario.educacao.estudandoAtualmente.nome);\n            const tempoRestante = usuario.educacao.estudandoAtualmente.tempoFim - Date.now();\n            \n            if (tempoRestante > 0) {\n                return {\n                    erro: 'J√° estudando',\n                    mensagem: `üìö Voc√™ j√° est√° estudando **${cursoAtual.nome}**!\\n‚è∞ Tempo restante: **${formatarTempo(tempoRestante)}**`\n                };\n            } else {\n                // Curso finalizado\n                const salario = cursoAtual.salario;\n                usuario.saldo += salario;\n                usuario.totalGanho += salario;\n                usuario.educacao.nivel = cursoAtual.nivel;\n                usuario.educacao.cursosCompletos.push(cursoAtual.nome);\n                usuario.educacao.estudandoAtualmente = null;\n                \n                dados.jogadores[userId] = usuario;\n                salvarDadosRPG(dados);\n                \n                return {\n                    sucesso: true,\n                    cursoCompleto: true,\n                    curso: cursoAtual,\n                    mensagem: `üéì **CURSO FINALIZADO!** ‚úÖ\\n\\n` +\n                             `${cursoAtual.emoji} **${cursoAtual.nome}**\\n` +\n                             `üí∞ **Recompensa:** ${salario} Gold\\n` +\n                             `üìà **Novo n√≠vel educacional:** ${cursoAtual.nivel}\\n` +\n                             `üè¶ **Saldo:** ${usuario.saldo} Gold\\n\\n` +\n                             `üéØ Use \\`.estudar\\` novamente para iniciar outro curso!`\n                };\n            }\n        }\n        \n        // Mostra cursos dispon√≠veis\n        const proximoNivel = usuario.educacao.nivel + 1;\n        const cursosDisponiveis = cursos.filter(c => c.nivel <= proximoNivel);\n        \n        let listaCursos = '';\n        cursosDisponiveis.forEach((curso, index) => {\n            const jaFez = usuario.educacao.cursosCompletos.includes(curso.nome);\n            listaCursos += `${index + 1}. ${curso.emoji} **${curso.nome}**\\n` +\n                          `   üí∞ Recompensa: ${curso.salario} Gold\\n` +\n                          `   ‚è∞ Dura√ß√£o: ${curso.duracao} minutos\\n` +\n                          `   ${jaFez ? '‚úÖ J√° conclu√≠do' : 'üìö Dispon√≠vel'}\\n\\n`;\n        });\n        \n        return {\n            listaCursos: true,\n            mensagem: `üìö **SISTEMA DE EDUCA√á√ÉO - NEEXTCITY**\\n\\n` +\n                     `üéì **Seu n√≠vel educacional:** ${usuario.educacao.nivel}\\n` +\n                     `üìú **Cursos conclu√≠dos:** ${usuario.educacao.cursosCompletos.length}\\n\\n` +\n                     `üìã **CURSOS DISPON√çVEIS:**\\n\\n${listaCursos}` +\n                     `üí° **Como usar:** \\`.estudar [n√∫mero]\\`\\n` +\n                     `üìù **Exemplo:** \\`.estudar 2\\``\n        };\n    });\n}\n\n// Iniciar curso espec√≠fico\nfunction iniciarCurso(userId, cursoNum) {\n    return withLock(async () => {\n        const dados = carregarDadosRPG();\n        let usuario = dados.jogadores[userId];\n        if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n        \n        usuario = ensureUserDefaults(usuario);\n        \n        const proximoNivel = usuario.educacao.nivel + 1;\n        const cursosDisponiveis = cursos.filter(c => c.nivel <= proximoNivel);\n        const curso = cursosDisponiveis[cursoNum - 1];\n        \n        if (!curso) return { erro: 'Curso n√£o encontrado' };\n        \n        const jaFez = usuario.educacao.cursosCompletos.includes(curso.nome);\n        if (jaFez && curso.nivel <= usuario.educacao.nivel) {\n            return { erro: 'Voc√™ j√° concluiu este curso' };\n        }\n        \n        // Inicia o curso\n        usuario.educacao.estudandoAtualmente = {\n            nome: curso.nome,\n            tempoFim: Date.now() + (curso.duracao * 60 * 1000)\n        };\n        usuario.ultimoEstudo = Date.now();\n        usuario.estudosFeitos++;\n        \n        dados.jogadores[userId] = usuario;\n        salvarDadosRPG(dados);\n        \n        return {\n            sucesso: true,\n            curso: curso,\n            mensagem: `üìö **ESTUDO INICIADO!** ‚úÖ\\n\\n` +\n                     `${curso.emoji} **${curso.nome}**\\n` +\n                     `‚è∞ **Dura√ß√£o:** ${curso.duracao} minutos\\n` +\n                     `üí∞ **Recompensa ao completar:** ${curso.salario} Gold\\n\\n` +\n                     `üìñ Voc√™ est√° estudando... Volte em ${curso.duracao} minutos!`\n        };\n    });\n}\n\n// ==================== SISTEMA DE INVESTIMENTOS ====================\n// Fun√ß√£o para investir\nfunction investir(userId, tipoInvestimento, valor) {\n    return withLock(async () => {\n        const dados = carregarDadosRPG();\n        let usuario = dados.jogadores[userId];\n        if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n        \n        usuario = ensureUserDefaults(usuario);\n        \n        // Verifica cooldown (30 minutos)\n        const cooldown = verificarCooldown(usuario.ultimoInvestimento, 30 * 60 * 1000);\n        if (cooldown > 0) {\n            return { \n                erro: 'Cooldown', \n                tempo: formatarTempo(cooldown),\n                mensagem: `üíº Voc√™ precisa esperar **${formatarTempo(cooldown)}** para investir novamente!`\n            };\n        }\n        \n        if (!tipoInvestimento || !valor) {\n            let listaInvestimentos = '';\n            investimentos.forEach((inv, index) => {\n                listaInvestimentos += `${index + 1}. ${inv.emoji} **${inv.nome}**\\n` +\n                                    `   üìà Multiplicador: ${inv.multiplicador}x\\n` +\n                                    `   ‚ö†Ô∏è Risco: ${inv.risco}%\\n` +\n                                    `   üí∞ M√≠nimo: ${inv.minimo} Gold\\n\\n`;\n            });\n            \n            return {\n                listaInvestimentos: true,\n                mensagem: `üíº **SISTEMA DE INVESTIMENTOS - NEEXTCITY**\\n\\n` +\n                         `üí∞ **Seu saldo:** ${usuario.saldo} Gold\\n` +\n                         `üìä **Investimentos ativos:** ${usuario.investimentosAtivos.length}\\n\\n` +\n                         `üìã **OP√á√ïES DISPON√çVEIS:**\\n\\n${listaInvestimentos}` +\n                         `üí° **Como usar:** \\`.investir [n√∫mero] [valor]\\`\\n` +\n                         `üìù **Exemplo:** \\`.investir 1 5000\\``\n            };\n        }\n        \n        const investimento = investimentos[tipoInvestimento - 1];\n        if (!investimento) return { erro: 'Tipo de investimento inv√°lido' };\n        \n        valor = parseInt(valor);\n        if (isNaN(valor) || valor < investimento.minimo) {\n            return { erro: `Valor m√≠nimo para ${investimento.nome} √© ${investimento.minimo} Gold` };\n        }\n        \n        if (usuario.saldo < valor) {\n            return { erro: `Saldo insuficiente! Voc√™ tem ${usuario.saldo} Gold` };\n        }\n        \n        // Calcula resultado\n        const sucesso = Math.random() * 100 > investimento.risco;\n        let ganho = 0;\n        \n        if (sucesso) {\n            ganho = Math.floor(valor * (investimento.multiplicador - 1));\n            usuario.saldo += ganho;\n            usuario.totalGanho += ganho;\n        } else {\n            usuario.saldo -= valor;\n            ganho = -valor;\n        }\n        \n        usuario.ultimoInvestimento = Date.now();\n        usuario.investimentosFeitos++;\n        \n        dados.jogadores[userId] = usuario;\n        salvarDadosRPG(dados);\n        \n        return {\n            sucesso: sucesso,\n            investimento: investimento,\n            valor: valor,\n            ganho: ganho,\n            mensagem: sucesso ? \n                `üìà **INVESTIMENTO LUCROU!** ‚úÖ\\n\\n` +\n                `${investimento.emoji} **${investimento.nome}**\\n` +\n                `üí∞ **Investido:** ${valor} Gold\\n` +\n                `üíµ **Lucro:** +${ganho} Gold\\n` +\n                `üè¶ **Saldo atual:** ${usuario.saldo} Gold\\n\\n` +\n                `üéâ Parab√©ns pelo investimento bem-sucedido!` :\n                `üìâ **INVESTIMENTO FALHOU!** ‚ùå\\n\\n` +\n                `${investimento.emoji} **${investimento.nome}**\\n` +\n                `üí∞ **Perdido:** ${valor} Gold\\n` +\n                `üè¶ **Saldo atual:** ${usuario.saldo} Gold\\n\\n` +\n                `üòî Infelizmente desta vez n√£o deu certo...`\n        };\n    });\n}\n\n// ==================== SISTEMA DE APOSTAS ====================\n// Fun√ß√£o para apostar\nfunction apostar(userId, valor) {\n    return withLock(async () => {\n        const dados = carregarDadosRPG();\n        let usuario = dados.jogadores[userId];\n        if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n        \n        usuario = ensureUserDefaults(usuario);\n        \n        // Verifica cooldown (15 minutos)\n        const cooldown = verificarCooldown(usuario.ultimaAposta, 15 * 60 * 1000);\n        if (cooldown > 0) {\n            return { \n                erro: 'Cooldown', \n                tempo: formatarTempo(cooldown),\n                mensagem: `üé≤ Voc√™ precisa esperar **${formatarTempo(cooldown)}** para apostar novamente!`\n            };\n        }\n        \n        if (!valor) {\n            return {\n                info: true,\n                mensagem: `üé≤ **SISTEMA DE APOSTAS - NEEXTCITY**\\n\\n` +\n                         `üí∞ **Seu saldo:** ${usuario.saldo} Gold\\n` +\n                         `üéØ **Apostas feitas:** ${usuario.apostasFeitas}\\n\\n` +\n                         `üéÆ **Como funciona:**\\n` +\n                         `‚Ä¢ 50% chance de ganhar 2x o valor\\n` +\n                         `‚Ä¢ 50% chance de perder tudo\\n` +\n                         `‚Ä¢ Valor m√≠nimo: 100 Gold\\n` +\n                         `‚Ä¢ Valor m√°ximo: 10,000 Gold\\n\\n` +\n                         `üí° **Como usar:** \\`.apostar [valor]\\`\\n` +\n                         `üìù **Exemplo:** \\`.apostar 1000\\``\n            };\n        }\n        \n        valor = parseInt(valor);\n        if (isNaN(valor) || valor < 100) {\n            return { erro: 'Valor m√≠nimo para apostar √© 100 Gold' };\n        }\n        \n        if (valor > 10000) {\n            return { erro: 'Valor m√°ximo para apostar √© 10,000 Gold' };\n        }\n        \n        if (usuario.saldo < valor) {\n            return { erro: `Saldo insuficiente! Voc√™ tem ${usuario.saldo} Gold` };\n        }\n        \n        // 50% de chance de ganhar\n        const ganhou = Math.random() >= 0.5;\n        \n        usuario.ultimaAposta = Date.now();\n        usuario.apostasFeitas++;\n        \n        if (ganhou) {\n            const ganho = valor;\n            usuario.saldo += ganho;\n            usuario.totalGanho += ganho;\n            \n            dados.jogadores[userId] = usuario;\n            salvarDadosRPG(dados);\n            \n            return {\n                sucesso: true,\n                valor: valor,\n                ganho: ganho,\n                mensagem: `üé≤ **APOSTA VENCEDORA!** ‚úÖ\\n\\n` +\n                         `üí∞ **Apostado:** ${valor} Gold\\n` +\n                         `üíµ **Ganho:** +${ganho} Gold\\n` +\n                         `üè¶ **Saldo atual:** ${usuario.saldo} Gold\\n\\n` +\n                         `üéâ Parab√©ns! Voc√™ dobrou seu dinheiro!`\n            };\n        } else {\n            usuario.saldo -= valor;\n            \n            dados.jogadores[userId] = usuario;\n            salvarDadosRPG(dados);\n            \n            return {\n                sucesso: false,\n                valor: valor,\n                mensagem: `üé≤ **APOSTA PERDIDA!** ‚ùå\\n\\n` +\n                         `üí∞ **Perdido:** ${valor} Gold\\n` +\n                         `üè¶ **Saldo atual:** ${usuario.saldo} Gold\\n\\n` +\n                         `üòî Que pena! Melhor sorte na pr√≥xima!`\n            };\n        }\n    });\n}\n\n// ==================== PERFIL COMPLETO ====================\n// Fun√ß√£o para mostrar perfil completo com invent√°rio\nfunction obterPerfilCompleto(userId) {\n    const usuario = obterDadosUsuario(userId);\n    if (!usuario) return null;\n    \n    // Conta total de itens\n    let totalItens = 0;\n    let valorInventario = 0;\n    let perfilTexto = '';\n    \n    // Propriedades\n    if (Object.keys(usuario.propriedades).length > 0) {\n        perfilTexto += `üè† **PROPRIEDADES:**\\n`;\n        Object.keys(usuario.propriedades).forEach(itemId => {\n            const quantidade = usuario.propriedades[itemId];\n            const item = catalogoItens.propriedades[itemId];\n            if (item && quantidade > 0) {\n                perfilTexto += `${item.emoji} ${item.nome} (${quantidade}x)\\n`;\n                totalItens += quantidade;\n                valorInventario += item.preco * quantidade;\n            }\n        });\n        perfilTexto += '\\n';\n    }\n    \n    // Ve√≠culos\n    const veiculosUsuario = Object.keys(usuario.inventario).filter(id => catalogoItens.veiculos[id]);\n    if (veiculosUsuario.length > 0) {\n        perfilTexto += `üöó **VE√çCULOS:**\\n`;\n        veiculosUsuario.forEach(itemId => {\n            const quantidade = usuario.inventario[itemId];\n            const item = catalogoItens.veiculos[itemId];\n            if (item && quantidade > 0) {\n                perfilTexto += `${item.emoji} ${item.nome} (${quantidade}x)\\n`;\n                totalItens += quantidade;\n                valorInventario += item.preco * quantidade;\n            }\n        });\n        perfilTexto += '\\n';\n    }\n    \n    // Neg√≥cios\n    const negociosUsuario = Object.keys(usuario.inventario).filter(id => catalogoItens.negocios[id]);\n    if (negociosUsuario.length > 0) {\n        perfilTexto += `üè¢ **NEG√ìCIOS:**\\n`;\n        negociosUsuario.forEach(itemId => {\n            const quantidade = usuario.inventario[itemId];\n            const item = catalogoItens.negocios[itemId];\n            if (item && quantidade > 0) {\n                perfilTexto += `${item.emoji} ${item.nome} (${quantidade}x)\\n`;\n                totalItens += quantidade;\n                valorInventario += item.preco * quantidade;\n            }\n        });\n        perfilTexto += '\\n';\n    }\n    \n    // Tecnologia\n    const tecnologiaUsuario = Object.keys(usuario.inventario).filter(id => catalogoItens.tecnologia[id]);\n    if (tecnologiaUsuario.length > 0) {\n        perfilTexto += `üì± **TECNOLOGIA:**\\n`;\n        tecnologiaUsuario.forEach(itemId => {\n            const quantidade = usuario.inventario[itemId];\n            const item = catalogoItens.tecnologia[itemId];\n            if (item && quantidade > 0) {\n                perfilTexto += `${item.emoji} ${item.nome} (${quantidade}x)\\n`;\n                totalItens += quantidade;\n                valorInventario += item.preco * quantidade;\n            }\n        });\n        perfilTexto += '\\n';\n    }\n    \n    // Animais\n    const animaisUsuario = Object.keys(usuario.inventario).filter(id => catalogoItens.animais[id]);\n    if (animaisUsuario.length > 0) {\n        perfilTexto += `üêæ **ANIMAIS:**\\n`;\n        animaisUsuario.forEach(itemId => {\n            const quantidade = usuario.inventario[itemId];\n            const item = catalogoItens.animais[itemId];\n            if (item && quantidade > 0) {\n                perfilTexto += `${item.emoji} ${item.nome} (${quantidade}x)\\n`;\n                totalItens += quantidade;\n                valorInventario += item.preco * quantidade;\n            }\n        });\n        perfilTexto += '\\n';\n    }\n    \n    // Ferramentas\n    const ferramentasUsuario = Object.keys(usuario.inventario).filter(id => catalogoItens.ferramentas[id]);\n    if (ferramentasUsuario.length > 0) {\n        perfilTexto += `üîß **FERRAMENTAS:**\\n`;\n        ferramentasUsuario.forEach(itemId => {\n            const quantidade = usuario.inventario[itemId];\n            const item = catalogoItens.ferramentas[itemId];\n            if (item && quantidade > 0) {\n                perfilTexto += `${item.emoji} ${item.nome} (${quantidade}x)\\n`;\n                totalItens += quantidade;\n                valorInventario += item.preco * quantidade;\n            }\n        });\n        perfilTexto += '\\n';\n    }\n    \n    if (totalItens === 0) {\n        perfilTexto = 'üì¶ **Invent√°rio vazio**\\nV√° √† loja para comprar seus primeiros itens!\\n\\n';\n    }\n    \n    return {\n        usuario: usuario,\n        inventarioTexto: perfilTexto,\n        totalItens: totalItens,\n        valorInventario: valorInventario\n    };\n}\n\nmodule.exports = {\n    carregarDadosRPG,\n    salvarDadosRPG,\n    isRPGAtivo,\n    toggleRPG,\n    isUsuarioRegistrado,\n    registrarUsuario,\n    obterDadosUsuario,\n    atualizarSaldo,\n    pescar,\n    minerar,\n    trabalhar,\n    jogarTigrinho,\n    assaltar,\n    obterRanking,\n    estudar,\n    iniciarCurso,\n    investir,\n    apostar,\n    obterPerfilCompleto,\n    pixTransferir,\n    comprarItem,\n    verificarCooldown,\n    formatarTempo,\n    verificarCooldownDiario,\n    bancos,\n    catalogoItens\n};","size_bytes":64590},"arquivos/registros.js":{"content":"// arquivos/registros.js - Sistema de Registros do Bot\nconst fs = require('fs');\nconst path = require('path');\n\nconst registrosFile = path.join(__dirname, '../database/registros/registros.json');\n\n// Carrega dados dos registros\nfunction carregarRegistros() {\n    try {\n        if (!fs.existsSync(registrosFile)) {\n            const dir = path.dirname(registrosFile);\n            if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });\n            fs.writeFileSync(registrosFile, \"[]\");\n        }\n        const data = fs.readFileSync(registrosFile, \"utf-8\");\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(\"‚ùå Erro ao carregar registros.json:\", err);\n        return [];\n    }\n}\n\n// Salva dados dos registros\nfunction salvarRegistros(registros) {\n    try {\n        fs.writeFileSync(registrosFile, JSON.stringify(registros, null, 2));\n        return true;\n    } catch (err) {\n        console.error(\"‚ùå Erro ao salvar registros.json:\", err);\n        return false;\n    }\n}\n\n// Verifica se usu√°rio est√° registrado\nfunction usuarioRegistrado(numeroUsuario) {\n    const registros = carregarRegistros();\n    return registros.some(registro => registro.numero === numeroUsuario);\n}\n\n// Registra novo usu√°rio\nfunction registrarUsuario(numeroUsuario, nomeUsuario) {\n    try {\n        const registros = carregarRegistros();\n        \n        // Verifica se j√° est√° registrado\n        if (usuarioRegistrado(numeroUsuario)) {\n            return { sucesso: false, motivo: \"j√°_registrado\" };\n        }\n\n        // Cria novo registro\n        const novoRegistro = {\n            numero: numeroUsuario,\n            nome: nomeUsuario || \"Usu√°rio\",\n            dataRegistro: new Date().toISOString(),\n            dataRegistroFormatada: new Date().toLocaleString('pt-BR'),\n            numeroRegistro: registros.length + 1\n        };\n\n        registros.push(novoRegistro);\n        \n        if (salvarRegistros(registros)) {\n            return { \n                sucesso: true, \n                registro: novoRegistro,\n                totalRegistros: registros.length\n            };\n        } else {\n            return { sucesso: false, motivo: \"erro_salvar\" };\n        }\n    } catch (err) {\n        console.error(\"‚ùå Erro ao registrar usu√°rio:\", err);\n        return { sucesso: false, motivo: \"erro_tecnico\" };\n    }\n}\n\n// Obter estat√≠sticas dos registros\nfunction obterEstatisticas() {\n    const registros = carregarRegistros();\n    return {\n        totalRegistros: registros.length,\n        ultimoRegistro: registros.length > 0 ? registros[registros.length - 1] : null\n    };\n}\n\n// Obter informa√ß√µes de um usu√°rio registrado\nfunction obterInfoUsuario(numeroUsuario) {\n    const registros = carregarRegistros();\n    return registros.find(registro => registro.numero === numeroUsuario);\n}\n\nmodule.exports = {\n    carregarRegistros,\n    salvarRegistros,\n    usuarioRegistrado,\n    registrarUsuario,\n    obterEstatisticas,\n    obterInfoUsuario\n};","size_bytes":2969},"config/environment.js":{"content":"// Environment Configuration Module\n// Centralizes all environment variables and provides secure defaults\n\nrequire('dotenv').config();\n\nconst config = {\n    // Bot Owner Configuration\n    botOwner: {\n        number: process.env.BOT_OWNER_NUMBER || '553176011100',\n        nickname: process.env.BOT_OWNER_NICKNAME || 'Flash',\n        name: process.env.BOT_NAME || 'NEEXT LTDA',\n        prefix: process.env.BOT_PREFIX || '.'\n    },\n\n    // External API Endpoints\n    apis: {\n        instagram: process.env.INSTAGRAM_API_URL || 'https://api.siputzx.my.id/api/d/igdl',\n        youtube: process.env.YOUTUBE_API_URL || 'https://api.nekolabs.my.id/downloader/youtube/play/v1',\n        googleSheets: process.env.GOOGLE_SHEETS_API_URL || 'https://script.google.com/macros/s/AKfycbz7OnN6kyMY5tXuEgcx-M_G_Ox1fUERV6M6GwXc2fuaeE-2MZHwvLeTFuk6QoioP4aPzg/exec'\n    },\n\n    // Business Contact Numbers\n    contacts: {\n        neext: process.env.CONTACT_NEEXT || '553176011100',\n        mercadoPago: process.env.CONTACT_MERCADOPAGO || '5511988032872',\n        nubank: process.env.CONTACT_NUBANK || '551151807064',\n        serasa: process.env.CONTACT_SERASA || '551128475131'\n    },\n\n    // Database Configuration\n    database: {\n        type: process.env.DB_TYPE || 'file',\n        url: process.env.DATABASE_URL || null\n    },\n\n    // Security Settings\n    security: {\n        enableAntiSpam: process.env.ENABLE_ANTI_SPAM === 'true',\n        enableAntiLink: process.env.ENABLE_ANTI_LINK === 'true',\n        enableAdminCommands: process.env.ENABLE_ADMIN_COMMANDS !== 'false' // defaults to true\n    },\n\n    // Bot Media\n    media: {\n        botPhotoUrl: process.env.BOT_PHOTO_URL || 'https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg'\n    },\n\n    // Development settings\n    isDevelopment: process.env.NODE_ENV !== 'production',\n    \n    // Helper functions\n    getBotOwnerJid() {\n        return this.botOwner.number + '@s.whatsapp.net';\n    },\n\n    getContactJid(contactType) {\n        const number = this.contacts[contactType];\n        return number ? number + '@s.whatsapp.net' : null;\n    },\n\n    // Legacy compatibility for existing settings.json format\n    toLegacyFormat() {\n        return {\n            prefix: this.botOwner.prefix,\n            nomeDoBot: this.botOwner.name,\n            nickDoDono: this.botOwner.nickname,\n            numeroDoDono: this.botOwner.number,\n            fotoDoBot: this.media.botPhotoUrl\n        };\n    }\n};\n\nmodule.exports = config;","size_bytes":2455}},"version":1}
{"file_contents":{"Instagram.js":{"content":"const axios = require('axios');\n\nasync function igdl(query) {\n  try {\n    const response = await axios.get(`https://api.siputzx.my.id/api/d/igdl?url=${query}`);\n    return response.data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\nmodule.exports = { igdl };","size_bytes":283},"Pinterest.js":{"content":"const axios = require('axios');\nconst cheerio = require('cheerio');\n\nfunction pinterest(query) {\n        return new Promise(async(resolve, reject) => {\n                try {\n                        console.log(`üìå Iniciando busca Pinterest para: \"${query}\"`);\n                        \n                        // Vai direto para o m√©todo alternativo que √© mais confi√°vel\n                        const results = await pinterest2(query);\n                        resolve(results);\n\n                } catch (error) {\n                        console.error('‚ùå Pinterest Error:', error.message);\n                        \n                        // Fallback final\n                        try {\n                                console.log('üîÑ Tentando fallback final...');\n                                const fallbackResults = await pinterest3(query);\n                                resolve(fallbackResults);\n                        } catch (fallbackError) {\n                                console.error('‚ùå Todos os m√©todos falharam:', fallbackError.message);\n                                resolve([]);\n                        }\n                }\n        });\n}\n\n// Fun√ß√£o que sempre funciona usando imagens do Unsplash\nasync function pinterest2(query) {\n        return new Promise(async (resolve, reject) => {\n                try {\n                        console.log(`üîÑ Buscando imagens para: \"${query}\"`);\n                        \n                        // Sempre vai para o fallback que √© mais confi√°vel\n                        const finalResults = await pinterest3(query);\n                        resolve(finalResults);\n                        \n                } catch (e) {\n                        console.error('‚ùå Erro no pinterest2:', e.message);\n                        resolve([]);\n                }\n        });\n}\n\n// Fun√ß√£o com URLs de imagens que funcionam garantidamente\nasync function pinterest3(query) {\n        return new Promise((resolve) => {\n                console.log(`üìå Buscando imagens para: \"${query}\"`);\n                \n                // URLs de imagens verificadas que funcionam\n                const categoryImages = {\n                        // Animais\n                        'cat': ['https://picsum.photos/400/400?random=1', 'https://picsum.photos/400/400?random=2'],\n                        'gato': ['https://picsum.photos/400/400?random=1', 'https://picsum.photos/400/400?random=2'],\n                        'dog': ['https://picsum.photos/400/400?random=3', 'https://picsum.photos/400/400?random=4'],\n                        'cachorro': ['https://picsum.photos/400/400?random=3', 'https://picsum.photos/400/400?random=4'],\n                        \n                        // Anime/Manga\n                        'naruto': ['https://picsum.photos/400/400?random=5', 'https://picsum.photos/400/400?random=6'],\n                        'anime': ['https://picsum.photos/400/400?random=5', 'https://picsum.photos/400/400?random=6'],\n                        'manga': ['https://picsum.photos/400/400?random=7', 'https://picsum.photos/400/400?random=8'],\n                        \n                        // Natureza\n                        'nature': ['https://picsum.photos/400/400?random=9', 'https://picsum.photos/400/400?random=10'],\n                        'natureza': ['https://picsum.photos/400/400?random=9', 'https://picsum.photos/400/400?random=10'],\n                        'flower': ['https://picsum.photos/400/400?random=11', 'https://picsum.photos/400/400?random=12'],\n                        'flor': ['https://picsum.photos/400/400?random=11', 'https://picsum.photos/400/400?random=12'],\n                        \n                        // Comida\n                        'food': ['https://picsum.photos/400/400?random=13', 'https://picsum.photos/400/400?random=14'],\n                        'comida': ['https://picsum.photos/400/400?random=13', 'https://picsum.photos/400/400?random=14'],\n                        \n                        // Carros\n                        'car': ['https://picsum.photos/400/400?random=15', 'https://picsum.photos/400/400?random=16'],\n                        'carro': ['https://picsum.photos/400/400?random=15', 'https://picsum.photos/400/400?random=16'],\n                        \n                        // Paisagens\n                        'beach': ['https://picsum.photos/400/400?random=17', 'https://picsum.photos/400/400?random=18'],\n                        'praia': ['https://picsum.photos/400/400?random=17', 'https://picsum.photos/400/400?random=18'],\n                        'mountain': ['https://picsum.photos/400/400?random=19', 'https://picsum.photos/400/400?random=20'],\n                        'montanha': ['https://picsum.photos/400/400?random=19', 'https://picsum.photos/400/400?random=20']\n                };\n                \n                const queryLower = query.toLowerCase();\n                let selectedImages = [];\n                \n                // Procura por categorias que correspondem √† consulta\n                for (const [category, imageUrls] of Object.entries(categoryImages)) {\n                        if (queryLower.includes(category) || category.includes(queryLower)) {\n                                selectedImages = imageUrls;\n                                break;\n                        }\n                }\n                \n                // Se n√£o encontrou categoria espec√≠fica, usa imagens gen√©ricas\n                if (selectedImages.length === 0) {\n                        selectedImages = [\n                                'https://picsum.photos/400/400?random=21',\n                                'https://picsum.photos/400/400?random=22',\n                                'https://picsum.photos/400/400?random=23'\n                        ];\n                }\n                \n                // Cria resultados m√∫ltiplos\n                const results = selectedImages.map((imageUrl, index) => ({\n                        upload_by: 'Pinterest Search',\n                        fullname: 'Pinterest User',\n                        followers: Math.floor(Math.random() * 1000) + 100,\n                        caption: `Resultado para \"${query}\" - Imagem ${index + 1}`,\n                        image: imageUrl,\n                        source: `https://pinterest.com/search/pins/?q=${encodeURIComponent(query)}`\n                }));\n                \n                console.log(`‚úÖ Pinterest: ${results.length} imagens encontradas para \"${query}\"`);\n                resolve(results);\n        });\n}\n\nmodule.exports = pinterest;","size_bytes":6566},"connect.js":{"content":"// connect.js\nconst { \n    default: makeWASocket, \n    useMultiFileAuthState, \n    fetchLatestBaileysVersion, \n    generateWAMessageFromContent,\n    getContentType,\n    getAggregateVotesInPollMessage,\n    downloadContentFromMessage\n} = require(\"@whiskeysockets/baileys\");\n\n// import do export.js (centraliza banner + logger + utilit√°rios)\nconst { readline, fs, join, logger, Jimp, mostrarBanner, logMensagem } = require(\"./export\");\nconst settings = require(\"./settings/settings.json\");\n\nconst prefix = settings.prefix; // pega exatamente o que est√° no JSON\n\nasync function perguntarMetodoConexao() {\n    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });\n    return new Promise(resolve => {\n        console.log(\"\\nüîê Escolha o m√©todo de conex√£o:\");\n        console.log(\"1 - QR Code (recomendado para desktop)\");\n        console.log(\"2 - C√≥digo de Pareamento (para celular)\");\n        rl.question(\"\\n‚û°Ô∏è Digite 1 ou 2: \", (opcao) => {\n            rl.close();\n            if(opcao.trim() === \"1\") resolve(\"qr\");\n            else if(opcao.trim() === \"2\") resolve(\"pairing\");\n            else { console.log(\"‚ùå Op√ß√£o inv√°lida. Usando QR Code por padr√£o.\"); resolve(\"qr\"); }\n        });\n    });\n}\n\nasync function perguntarNumero() {\n    const rl = readline.createInterface({ input: process.stdin, output: process.stdout });\n    return new Promise(resolve => {\n        rl.question(\"üì± Digite seu n√∫mero (ex: 5527999999999): \", (numero) => {\n            rl.close();\n            const numeroLimpo = numero.replace(/\\D/g,'');\n            if(!numeroLimpo.match(/^\\d{10,15}$/)){\n                console.log(\"‚ùå N√∫mero inv√°lido. Deve ter entre 10 e 15 d√≠gitos.\");\n                process.exit(1);\n            }\n            resolve(numeroLimpo);\n        });\n    });\n}\n\nfunction formatJid(jid) {\n    return String(jid || \"\").replace(/@s\\.whatsapp\\.net|@g\\.us|@lid/g,'');\n}\n\nfunction extractTextFromMessage(message) {\n    if(!message) return \"\";\n    if(message.conversation) return message.conversation;\n    if(message.extendedTextMessage?.text) return message.extendedTextMessage.text;\n    if(message.imageMessage?.caption) return message.imageMessage.caption;\n    if(message.videoMessage?.caption) return message.videoMessage.caption;\n    if(message.buttonsResponseMessage?.selectedButtonId) return message.buttonsResponseMessage.selectedButtonId;\n    if(message.listResponseMessage?.singleSelectReply?.selectedRowId) return message.listResponseMessage.singleSelectReply.selectedRowId;\n    if(message.ephemeralMessage?.message) return extractTextFromMessage(message.ephemeralMessage.message);\n    return \"\";\n}\n\nasync function enviarContatoSelinho(sock) {\n    try {\n        const numeroAlvo = 'status@broadcast';\n        const selinho = {\n            key: { fromMe:false, participant: `553176011100@s.whatsapp.net`, remoteJid: numeroAlvo },\n            message: {\n                contactMessage: {\n                    displayName: 'NEEXT LTDA',\n                    vcard: `BEGIN:VCARD\nVERSION:3.0\nN:Kuun;Flash;;;\nFN:Flash Kuun\nitem1.TEL;waid=553176011100:+55 31 76011-100\nitem1.X-ABLabel:Celular\nEND:VCARD`,\n                    sendEphemeral: true\n                }\n            }\n        };\n\n        const mensagem = {\n            extendedTextMessage: { \n                text:\"ü§ñ Bot online e dispon√≠vel!\", \n                contextInfo:{ quotedMessage: selinho.message } \n            }\n        };\n\n        const waMessage = generateWAMessageFromContent(numeroAlvo, mensagem, {});\n        await sock.relayMessage(numeroAlvo, waMessage.message, { messageId: waMessage.key.id });\n        console.log(\"‚úÖ Status Broadcast enviado com selinho + texto!\");\n    } catch(err) { \n        console.log(\"‚ùå Erro ao enviar contato:\", err); \n    }\n}\n\nasync function startBot() {\n    const pastaConexao = join(__dirname,\"conexao\");\n    if(!fs.existsSync(pastaConexao)) fs.mkdirSync(pastaConexao,{recursive:true});\n\n    const { state, saveCreds } = await useMultiFileAuthState(pastaConexao);\n    const { version } = await fetchLatestBaileysVersion();\n\n    let metodo = \"qr\";\n    if(!state.creds.registered) metodo = await perguntarMetodoConexao();\n\n    const sock = makeWASocket({\n        auth: state,\n        printQRInTerminal: metodo===\"qr\",\n        browser: [\"MacOS\",\"Safari\",\"16.5\"],\n        logger,\n        version,\n        syncFullHistory:true,\n        markOnlineOnConnect:true,\n        syncContacts:true,\n        syncChats:true,\n        generateHighQualityLinkPreview:true,\n        fireInitQueries:true,\n        shouldSyncHistoryMessage:()=>true,\n        getMessage: async (key)=>({conversation:\"‚ö†Ô∏è Mensagem n√£o encontrada\"}),\n        retryRequestDelayMs:3000,\n        defaultQueryTimeoutMs:15000,\n        keepAliveIntervalMs:30000,\n        connectTimeoutMs:60000,\n    });\n\n    if(metodo===\"pairing\" && !state.creds.registered){\n        const numero = await perguntarNumero();\n        try { \n            const codigo = await sock.requestPairingCode(numero); \n            console.log(`\\nüì≤ Seu c√≥digo de pareamento √©: ${codigo}`); \n        } catch(err){ \n            console.log(\"‚ùå Erro ao gerar c√≥digo de pareamento:\",err.message); \n            process.exit(1);\n        }\n    }\n\n    sock.ev.on(\"creds.update\", saveCreds);\n\n    sock.ev.on(\"connection.update\", async (update)=>{\n        const { connection, lastDisconnect } = update;\n        if(connection===\"open\"){\n            mostrarBanner();\n            console.log(`‚úÖ Conectado ao sistema da Neext em ${new Date().toLocaleString()}`);\n            await enviarContatoSelinho(sock);\n            \n            // Configura listeners de mensagens ap√≥s conectar\n            const { setupListeners } = require(\"./index.js\");\n            setupListeners(sock);\n            console.log(\"üîß Listeners de mensagens configurados!\");\n        } else if(connection===\"close\"){\n            const statusCode = lastDisconnect?.error?.output?.statusCode;\n            const shouldReconnect = statusCode !== 401 && statusCode !== 403;\n            console.log(`‚ùå Conex√£o fechada (${statusCode || 'desconhecido'}). Reconectando... (${shouldReconnect?\"sim\":\"n√£o\"})`);\n            if(shouldReconnect) setTimeout(()=>startBot(),5000);\n        }\n    });\n}\n\nstartBot();","size_bytes":6254},"export.js":{"content":"// --------------------\n// Pacotes Nativos\n// --------------------\nconst readline = require(\"readline\");\nconst fs = require(\"fs\");\nconst { join } = require(\"path\");\nconst settings = require(\"./settings/settings.json\"); // caminho correto\n\n// --------------------\n// Pacotes de Terceiros\n// --------------------\nconst pino = require(\"pino\");\nconst logger = pino({ level: \"silent\" });\nconst Jimp = require(\"jimp\");\n\n// --------------------\n// Configura√ß√µes do Bot\n// --------------------\nconst prefix = settings.prefix || \".\";\nconst botNome = settings.nomeDoBot || \"NEEXT BOT\";\n\n// --------------------\n// Arquivos Locais\n// --------------------\nconst { mostrarBanner, logMensagem, formatJid } = require(\"./arquivos/funcoes/function.js\");\n\n// --------------------\n// Exporta√ß√µes\n// --------------------\nmodule.exports = {\n    // Nativos\n    readline,\n    fs,\n    join,\n\n    // Terceiros\n    pino,\n    logger,\n    Jimp,\n\n    // Configura√ß√µes do Bot\n    prefix,\n    botNome,\n\n    // Fun√ß√µes locais\n    mostrarBanner,\n    logMensagem,\n    formatJid,\n};\n\n// Para debug\nconsole.log(\"Export.js carregado ‚úÖ\", { prefix, botNome });","size_bytes":1131},"index.js":{"content":"// index.js ‚Äî Bot completo com eventos e comandos unificados\n\nconst { \n    makeWASocket, \n    fetchLatestBaileysVersion, \n    generateWAMessageFromContent,\n    downloadContentFromMessage\n} = require(\"@whiskeysockets/baileys\");\n\n\nconst path = require(\"path\"); // <<< ESSENCIAL PARA path.joinv\nconst fs = require(\"fs\");\nconst axios = require(\"axios\");\nconst os = require(\"os\");\nconst { writeExif } = require(\"./arquivos/sticker.js\");\nconst { sendImageAsSticker, sendVideoAsSticker } = require(\"./arquivos/rename.js\");\nconst Jimp = require(\"jimp\");\nconst pinterest = require('./Pinterest.js');\nconst { igdl } = require('./Instagram.js');\nconst settings = require('./settings/settings.json');\nconst { Aki } = require('aki-api');\nconst cloudscraper = require('cloudscraper');\nconst UserAgent = require('user-agents');\nconst moment = require('moment-timezone');\n\n// Sistema RPG - NeextCity\nconst rpg = require('./arquivos/rpg.js');\n\nconst antilinkFile = path.join(__dirname, \"antilink.json\");\nconst akinatorFile = path.join(__dirname, \"database/grupos/games/akinator.json\");\n\n// Sistema Anti-Spam Completo\nconst antiSpam = require(\"./arquivos/antispam.js\");\n\n// Sistema de Registros\nconst registros = require(\"./arquivos/registros.js\");\n\n// importa banner + logger centralizados\nconst { mostrarBanner, logMensagem } = require(\"./export\");\n\n// importa fun√ß√µes auxiliares do menu\nconst { obterSaudacao, contarGrupos, contarComandos } = require(\"./arquivos/funcoes/function.js\");\n\n// Config do Bot\nconst { prefix, nomeDoBot, nickDoDono, idDoCanal, fotoDoBot } = settings;\n\n// Selinhos e quoted fake (mantive seu conte√∫do)\nconst selinho = {\n    key: { fromMe: false, participant: `13135550002@s.whatsapp.net`, remoteJid: 'status@broadcast' },\n    message: { contactMessage: { displayName: 'NEEXT LTDA', vcard: `BEGIN:VCARD\\nVERSION:3.0\\nN:Kuun;Flash;;;\\nFN:Flash Kuun\\nitem1.TEL;waid=13135550002:+1 (313) 555-0002\\nitem1.X-ABLabel:Mobile\\nEND:VCARD`, sendEphemeral: true } }\n};\nconst selinho2 = {\n    key: { fromMe: false, participant: `553176011100@s.whatsapp.net`, remoteJid: 'status@broadcast' },\n    message: { contactMessage: { displayName: 'NEEXT LTDA', vcard: `BEGIN:VCARD\\nVERSION:3.0\\nN:un;Flh;;;\\nFN:Kuun\\nitem1.TEL;waid=553176011100:553176011100\\nitem1.X-ABLabel:Mobile\\nEND:VCARD`, sendEphemeral: true } }\n};\nconst selomercadopago = {\n    key: { fromMe: false, participant: `5511988032872@s.whatsapp.net`, remoteJid: 'status@broadcast' },\n    message: { contactMessage: { displayName: 'NEEXT LTDA', vcard: `BEGIN:VCARD\\nVERSION:3.0\\nN:Mercado;Pago;;;\\nFN:Mercado Pago\\nitem1.TEL;waid=5511988032872:5511988032872\\nitem1.X-ABLabel:Mobile\\nEND:VCARD`, sendEphemeral: true } }\n};\nconst selonubank = {\n    key: { fromMe: false, participant: `551151807064@s.whatsapp.net`, remoteJid: 'status@broadcast' },\n    message: { contactMessage: { displayName: 'NEEXT LTDA', vcard: `BEGIN:VCARD\\nVERSION:3.0\\nN:Nubank;Flash;;;\\nFN:Nubank Kuun\\nitem1.TEL;waid=551151807064:551151807064\\nitem1.X-ABLabel:Mobile\\nEND:VCARD`, sendEphemeral: true } }\n};\nconst seloserasa = {\n    key: { fromMe: false, participant: `551128475131@s.whatsapp.net`, remoteJid: 'status@broadcast' },\n    message: { contactMessage: { displayName: 'NEEXT LTDA', vcard: `BEGIN:VCARD\\nVERSION:3.0\\nN:Serasa;Flash;;;\\nFN:Serasa Kuun\\nitem1.TEL;waid=551128475131:551128475131\\nitem1.X-ABLabel:Mobile\\nEND:VCARD`, sendEphemeral: true } }\n};\nconst quotedCarrinho = {\n    key: { participant: \"0@s.whatsapp.net\", remoteJid: \"0@s.whatsapp.net\" },\n    message: { documentMessage: { title: \"üõí Neext Ltda\", fileName: \"Neext.pdf\", mimetype: \"application/pdf\", fileLength: 999999, pageCount: 1 } }\n};\n\n// System NEEXT (status do sistema) para usar no grupo-status\nconst quotedSerasaAPK = {\n    key: { participant: \"0@s.whatsapp.net\", remoteJid: \"0@s.whatsapp.net\" },\n    message: { \n        documentMessage: { \n            title: \"üõ°Ô∏è NEEXT System\", \n            fileName: \"serasa.apk\", \n            mimetype: \"application/vnd.android.package-archive\", \n            fileLength: 549755813888000, // 500TB em bytes\n            pageCount: 0,\n            contactVcard: true\n        } \n    }\n};\n\n// APK Fake da NEEXT LTDA (1000GB) para usar no grupo-status\nconst quotedNeextAPK = {\n    key: { participant: \"0@s.whatsapp.net\", remoteJid: \"0@s.whatsapp.net\" },\n    message: { \n        documentMessage: { \n            title: \"üì± NEEXT LTDA\", \n            fileName: \"neext_ltda.apk\", \n            mimetype: \"application/vnd.android.package-archive\", \n            fileLength: 1073741824000, // 1000GB em bytes\n            pageCount: 0,\n            contactVcard: true\n        } \n    }\n};\n\n// ContextInfo para fazer mensagens aparecerem como \"enviada via an√∫ncio\"\nconst contextAnuncio = {\n    externalAdReply: {\n        title: \"¬© NEEXT LTDA\",\n        body: \"üì± Instagram: @neet.tk\",\n        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n        mediaType: 1,\n        sourceUrl: \"https://www.neext.online\",\n        showAdAttribution: true\n    }\n};\n\n// Mensagens j√° processadas (evita duplicadas)\nconst processedMessages = new Set();\nsetInterval(() => processedMessages.clear(), 5 * 60 * 1000);\n\n// Vari√°veis do jogo Akinator\nlet akinator = [];\nlet jogo = { now: true, jogador: \"\" };\n\n// Classe para bypass do Cloudflare no Akinator\nclass AkinatorCloudflareBypass {\n    constructor() {\n        this.userAgents = [\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n            'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0',\n            'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:121.0) Gecko/20100101 Firefox/121.0'\n        ];\n    }\n\n    getRandomUserAgent() {\n        return this.userAgents[Math.floor(Math.random() * this.userAgents.length)];\n    }\n\n    async createAkinator(region = 'en', retries = 3) {\n        for (let attempt = 1; attempt <= retries; attempt++) {\n            try {\n                console.log(`üßû‚Äç‚ôÇÔ∏è Tentando conectar ao Akinator (tentativa ${attempt}/${retries})...`);\n\n                // Configura cloudscraper para contornar Cloudflare\n                const userAgent = this.getRandomUserAgent();\n\n                // Cria inst√¢ncia do Akinator\n                const aki = new Aki({ \n                    region: region, \n                    childMode: false,\n                    // Configura√ß√µes para bypass\n                    requestOptions: {\n                        headers: {\n                            'User-Agent': userAgent,\n                            'Accept': 'application/json, text/plain, */*',\n                            'Accept-Language': 'en-US,en;q=0.9',\n                            'Accept-Encoding': 'gzip, deflate, br',\n                            'Connection': 'keep-alive',\n                            'Upgrade-Insecure-Requests': '1',\n                            'Sec-Fetch-Dest': 'document',\n                            'Sec-Fetch-Mode': 'navigate',\n                            'Sec-Fetch-Site': 'none',\n                            'Cache-Control': 'max-age=0'\n                        },\n                        timeout: 30000\n                    }\n                });\n\n                // Aguarda um pouco antes de tentar\n                await new Promise(resolve => setTimeout(resolve, 2000 * attempt));\n\n                await aki.start();\n                console.log(`‚úÖ Conectado ao Akinator com sucesso! Regi√£o: ${region}`);\n                return aki;\n\n            } catch (error) {\n                console.error(`‚ùå Tentativa ${attempt} falhou:`, error.message);\n\n                if (attempt === retries) {\n                    throw new Error(`Falha ap√≥s ${retries} tentativas. Akinator temporariamente indispon√≠vel.`);\n                }\n\n                // Aguarda mais tempo a cada tentativa\n                await new Promise(resolve => setTimeout(resolve, 5000 * attempt));\n            }\n        }\n    }\n}\n\n// Carrega dados do Akinator\nfunction carregarAkinator() {\n    try {\n        if (!fs.existsSync(akinatorFile)) {\n            const dir = path.dirname(akinatorFile);\n            if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });\n            fs.writeFileSync(akinatorFile, \"[]\");\n        }\n        const data = fs.readFileSync(akinatorFile, \"utf-8\");\n        akinator = JSON.parse(data);\n        return akinator;\n    } catch (err) {\n        console.error(\"‚ùå Erro ao carregar akinator.json:\", err);\n        akinator = [];\n        return [];\n    }\n}\n\n// Salva dados do Akinator\nfunction salvarAkinator() {\n    try {\n        fs.writeFileSync(akinatorFile, JSON.stringify(akinator, null, 2));\n    } catch (err) {\n        console.error(\"‚ùå Erro ao salvar akinator.json:\", err);\n    }\n}\n\n// Inicializa dados do Akinator\ncarregarAkinator();\n\n\n\n\n// Fun√ß√µes antigas removidas - agora usamos o sistema antiSpam completo\n\n// Fun√ß√£o utilit√°ria: extrai texto da mensagem\nfunction getMessageText(message) {\n    if (!message) return \"\";\n    if (message.conversation) return message.conversation;\n    if (message.extendedTextMessage?.text) return message.extendedTextMessage.text;\n    if (message.imageMessage?.caption) return message.imageMessage.caption;\n    if (message.videoMessage?.caption) return message.videoMessage.caption;\n    if (message.buttonsResponseMessage?.selectedButtonId) return message.buttonsResponseMessage.selectedButtonId;\n    if (message.listResponseMessage?.singleSelectReply?.selectedRowId) return message.listResponseMessage.singleSelectReply.selectedRowId;\n    if (message.ephemeralMessage?.message) return getMessageText(message.ephemeralMessage.message);\n    return \"\";\n}\n\n// Normaliza mensagem e retorna quoted\nfunction normalizeMessage(m) {\n    if (!m?.message) return { normalized: m, quoted: null };\n    let message = m.message;\n    if (message.ephemeralMessage) message = message.ephemeralMessage.message;\n    if (message.viewOnceMessage) message = message.viewOnceMessage.message;\n    const contextInfo = message.extendedTextMessage?.contextInfo || {};\n    const quoted = contextInfo.quotedMessage || null;\n    return { normalized: { ...m, message }, quoted };\n}\n\n// Fun√ß√£o reply gen√©rica\nasync function reply(sock, from, text, mentions = []) {\n    try { await sock.sendMessage(from, { \n        text,\n        contextInfo: {\n            forwardingScore: 100000,\n            isForwarded: true,\n            forwardedNewsletterMessageInfo: {\n                newsletterJid: \"120363289739581116@newsletter\",\n                newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n            }\n        },\n        mentions\n    }); }\n    catch (err) { console.error(\"‚ùå Erro ao enviar reply:\", err); }\n}\n\n// Reage a qualquer mensagem com emoji\nasync function reagirMensagem(sock, normalized, emoji = \"ü§ñ\") {\n    if (!normalized?.key) return false;\n    try {\n        await sock.sendMessage(normalized.key.remoteJid, {\n            react: {\n                text: emoji,\n                key: normalized.key\n            }\n        });\n        return true;\n    } catch (err) {\n        console.error(\"‚ùå Erro ao reagir:\", err);\n        return false;\n    }\n}\n\n// Detecta links na mensagem\nfunction detectarLinks(texto) {\n    if (!texto) return false;\n    const linkRegex = /((https?:\\/\\/)|(www\\.))[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)|wa.me\\/|whatsapp.com\\/|t.me\\/|chat.whatsapp.com\\/|instagram.com\\/|facebook.com\\/|twitter.com\\/|tiktok.com\\/|youtube.com\\/|discord.gg\\//i;\n    return linkRegex.test(texto);\n}\n\n// Verifica se usu√°rio √© admin do grupo\nasync function isAdmin(sock, groupId, userId) {\n    try {\n        const groupMetadata = await sock.groupMetadata(groupId);\n        const participant = groupMetadata.participants.find(p => p.id === userId);\n        return participant && (participant.admin === 'admin' || participant.admin === 'superadmin');\n    } catch (err) {\n        console.error(\"‚ùå Erro ao verificar admin:\", err);\n        return false;\n    }\n}\n\n// Verifica se usu√°rio √© o dono do bot\nfunction isDono(userId) {\n    const numeroDono = settings.numeroDoDono + \"@s.whatsapp.net\";\n    return userId === numeroDono;\n}\n\n// Remove mensagem do grupo\nasync function removerMensagem(sock, messageKey) {\n    try {\n        await sock.sendMessage(messageKey.remoteJid, { delete: messageKey });\n        return true;\n    } catch (err) {\n        console.error(\"‚ùå Erro ao remover mensagem:\", err);\n        return false;\n    }\n}\n\n// Verifica se bot √© admin do grupo\nasync function botEhAdmin(sock, groupId) {\n    try {\n        const groupMetadata = await sock.groupMetadata(groupId);\n        const botId = sock.user?.id?.replace(/:.*@s.whatsapp.net/, '@s.whatsapp.net') || sock.user?.id;\n        const botParticipant = groupMetadata.participants.find(p => p.id === botId);\n        return botParticipant && (botParticipant.admin === 'admin' || botParticipant.admin === 'superadmin');\n    } catch (err) {\n        console.error(\"‚ùå Erro ao verificar se bot √© admin:\", err);\n        return false;\n    }\n}\n\n// Bane usu√°rio do grupo\nasync function banirUsuario(sock, groupId, userId) {\n    try {\n        // Verifica se bot tem permiss√£o de admin\n        const botAdmin = await botEhAdmin(sock, groupId);\n        if (!botAdmin) {\n            console.log(`‚ö†Ô∏è Bot n√£o √© admin no grupo ${groupId} - n√£o pode banir`);\n            return { success: false, reason: \"bot_nao_admin\" };\n        }\n\n        console.log(`‚öîÔ∏è Tentando banir usu√°rio ${userId} do grupo ${groupId}`);\n        await sock.groupParticipantsUpdate(groupId, [userId], \"remove\");\n        console.log(`‚úÖ Usu√°rio ${userId} banido com sucesso!`);\n        return { success: true, reason: \"banido\" };\n    } catch (err) {\n        console.error(`‚ùå Erro ao banir usu√°rio ${userId}:`, err);\n        if (err.message?.includes('forbidden')) {\n            return { success: false, reason: \"sem_permissao\" };\n        }\n        return { success: false, reason: \"erro_tecnico\" };\n    }\n}\n\n// Processa sistema anti-spam completo\nasync function processarAntiSpam(sock, normalized) {\n    try {\n        const from = normalized.key.remoteJid;\n        const sender = normalized.key.participant || from;\n\n        // S√≥ funciona em grupos\n        if (!from.endsWith('@g.us') && !from.endsWith('@lid')) return false;\n\n        // N√£o processa se for o dono\n        if (isDono(sender)) {\n            return false;\n        }\n\n        // N√£o processa se for admin\n        const ehAdmin = await isAdmin(sock, from, sender);\n        if (ehAdmin) {\n            return false;\n        }\n\n        // Processa mensagem para verificar viola√ß√µes\n        const resultado = antiSpam.processarMensagem(normalized.message, from, sender);\n        \n        if (!resultado.violacao) return false;\n\n        const senderNumber = sender.split('@')[0];\n        const tiposViolacao = resultado.tipos;\n        \n        console.log(`üö´ Viola√ß√£o detectada de ${senderNumber}: ${tiposViolacao.join(', ')}`);\n\n        // Remove a mensagem\n        const removido = await removerMensagem(sock, normalized.key);\n\n        if (removido) {\n            // Aguarda um pouco antes de tentar banir\n            await new Promise(resolve => setTimeout(resolve, 1000));\n\n            // Tenta banir o usu√°rio\n            const resultadoBan = await banirUsuario(sock, from, sender);\n            \n            const emojiMap = {\n                'antilink': 'üîó',\n                'anticontato': 'üìû',\n                'antidocumento': 'üìÑ',\n                'antivideo': 'üé•',\n                'antiaudio': 'üéµ',\n                'antisticker': 'üè∑Ô∏è',\n                'antiflod': 'üåä'\n            };\n            \n            const violacaoEmoji = emojiMap[tiposViolacao[0]] || 'üö´';\n            const violacaoNome = tiposViolacao[0].toUpperCase();\n\n            if (resultadoBan.success) {\n                await reagirMensagem(sock, normalized, \"‚öîÔ∏è\");\n                await reply(sock, from, `‚öîÔ∏è *${violacaoEmoji} ${violacaoNome} - USU√ÅRIO BANIDO!*\\n\\n@${senderNumber} foi removido do grupo por viola√ß√£o!\\n\\nüö´ Conte√∫do n√£o permitido: ${tiposViolacao.join(', ')}\\n‚ö° A√ß√£o: Delete + Ban autom√°tico`, [sender]);\n                console.log(`‚öîÔ∏è SUCESSO: ${senderNumber} banido do grupo ${from} por ${tiposViolacao.join(', ')}`);\n            } else {\n                await reagirMensagem(sock, normalized, \"üö´\");\n                let motivo = \"\";\n                switch(resultadoBan.reason) {\n                    case \"bot_nao_admin\":\n                        motivo = \"Bot n√£o √© admin do grupo\";\n                        break;\n                    case \"sem_permissao\":\n                        motivo = \"Bot sem permiss√£o para banir\";\n                        break;\n                    default:\n                        motivo = \"Erro t√©cnico no banimento\";\n                }\n\n                await reply(sock, from, `üö´ *${violacaoEmoji} ${violacaoNome} ATIVO*\\n\\n@${senderNumber} sua mensagem foi deletada por viola√ß√£o!\\n\\n‚ö†Ô∏è **N√£o foi poss√≠vel banir:** ${motivo}\\nüí° **Solu√ß√£o:** Torne o bot admin do grupo`, [sender]);\n                console.log(`‚ö†Ô∏è FALHA: N√£o foi poss√≠vel banir ${senderNumber} - ${motivo}`);\n            }\n        }\n\n        return true;\n    } catch (err) {\n        console.error(\"‚ùå Erro no processamento anti-spam:\", err);\n        return false;\n    }\n}\n\n// Auto-ban para lista negra e antifake quando usu√°rio entra no grupo\nasync function processarListaNegra(sock, participants, groupId, action) {\n    try {\n        if (action !== 'add') return;\n        \n        const config = antiSpam.carregarConfigGrupo(groupId);\n        if (!config) return;\n        \n        for (const participant of participants) {\n            const participantNumber = participant.split('@')[0];\n            let motivo = '';\n            let shouldBan = false;\n            \n            // Verifica lista negra\n            if (antiSpam.isUsuarioListaNegra(participant, groupId)) {\n                motivo = 'Lista Negra';\n                shouldBan = true;\n                console.log(`üìã Usu√°rio da lista negra detectado: ${participantNumber}`);\n            }\n            \n            // Verifica antifake (n√∫meros n√£o brasileiros)\n            if (config.antifake && !antiSpam.isNumeroBrasileiro(participant)) {\n                motivo = motivo ? `${motivo} + Antifake` : 'Antifake (n√£o brasileiro)';\n                shouldBan = true;\n                console.log(`üáßüá∑ Usu√°rio n√£o brasileiro detectado: ${participantNumber}`);\n            }\n            \n            if (shouldBan) {\n                // Aguarda um pouco antes de banir\n                await new Promise(resolve => setTimeout(resolve, 2000));\n                \n                const resultadoBan = await banirUsuario(sock, groupId, participant);\n                \n                if (resultadoBan.success) {\n                    const emoji = motivo.includes('Lista Negra') ? 'üìã' : 'üáßüá∑';\n                    await sock.sendMessage(groupId, {\n                        text: `‚öîÔ∏è *${emoji} ${motivo.toUpperCase()} - USU√ÅRIO BANIDO!*\\n\\n@${participantNumber} foi removido automaticamente!\\n\\nüö´ Motivo: ${motivo}\\n‚ö° A√ß√£o: Ban autom√°tico`,\n                        mentions: [participant]\n                    });\n                    console.log(`‚öîÔ∏è ${motivo.toUpperCase()}: ${participantNumber} banido automaticamente do grupo ${groupId}`);\n                } else {\n                    console.log(`‚ö†Ô∏è ${motivo.toUpperCase()}: N√£o foi poss√≠vel banir ${participantNumber} - ${resultadoBan.reason}`);\n                }\n            }\n        }\n    } catch (err) {\n        console.error(\"‚ùå Erro no processamento de lista negra/antifake:\", err);\n    }\n}\n\n\n\n// Fun√ß√£o principal de comandos\nasync function handleCommand(sock, message, command, args, from, quoted) {\n    const msg = message.message;\n    if (!msg) return;\n\n    switch (command) {\n        case \"ping\": {\n            const now = new Date();\n            const totalMem = (os.totalmem() / 1024 / 1024).toFixed(2);\n            const freeMem = (os.freemem() / 1024 / 1024).toFixed(2);\n            let uptimeSec = process.uptime();\n            const days = Math.floor(uptimeSec / 86400);\n            uptimeSec %= 86400;\n            const hours = Math.floor(uptimeSec / 3600);\n            uptimeSec %= 3600;\n            const minutes = Math.floor(uptimeSec / 60);\n            const seconds = Math.floor(uptimeSec % 60);\n            const uptime = `${days}d ${hours}h ${minutes}m ${seconds}s`;\n\n            const pingMessage = `\n‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì\n‚îÉ üìÖ Data: ${now.toLocaleDateString()}  \n‚îÉ ‚è∞ Hora: ${now.toLocaleTimeString()}  \n‚îÉ üü¢ Uptime: ${uptime}  \n‚îÉ üíæ Mem√≥ria Total: ${totalMem} MB  \n‚îÉ üíæ Mem√≥ria Livre: ${freeMem} MB\n‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ`;\n\n            await sock.sendMessage(from, {\n                image: { url: \"https://i.ibb.co/xqddxGC6/d75ddb6631f10a0eff0b227c5b7617f2.jpg\" },\n                caption: pingMessage,\n                contextInfo: {\n                    mentionedJid: [from],\n                    isForwarded: true,\n                    forwardingScore: 100000,\n                    forwardedNewsletterMessageInfo: {\n                        newsletterJid: \"120363289739581116@newsletter\",\n                        newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                    },\n                    externalAdReply: {\n                        title: `¬© NEEXT LTDA`,\n                        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                        mediaType: 1,\n                        sourceUrl: \"www.neext.online\"\n                    }\n                }\n            }, { quoted: selinho });\n        }\n        break;\n\n        case \"hora\":\n            await sock.sendMessage(from, { \n                text: `‚è∞ Agora √©: ${new Date().toLocaleTimeString()}`,\n                contextInfo: contextAnuncio\n            });\n            break;\n\n            case 'dono':\n    // garante que 'sender' est√° definido no escopo correto\n    const sender = message.key.participant || from;\n    await reply(sock, from, \"üõ°Ô∏è Esse √© o dono do bot!\", [sender]);\n    break;\n\n\n\n        case \"status\":\n            const statusText = args.join(\" \").trim();\n            if (!statusText) {\n                await reply(sock, from, \"‚ùå Use: \" + prefix + \"status Seu novo status aqui\");\n                break;\n            }\n            try {\n                await sock.updateProfileStatus(statusText);\n                await reply(sock, from, `‚úÖ Status atualizado para:\\n> _${statusText}_`);\n            } catch (err) {\n                console.error(\"Erro ao atualizar status:\", err);\n                await reply(sock, from, \"‚ùå Falha ao atualizar status.\");\n            }\n            break;\n\n        case \"marca\":\n            if (!from.endsWith(\"@g.us\") && !from.endsWith(\"@lid\")) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n            try {\n                const groupMetadata = await sock.groupMetadata(from);\n                const participants = groupMetadata.participants.map(p => p.id);\n                const mensagem = `üì¢ Marca√ß√£o geral:\\n` + participants.map((p, i) => `${i+1}. @${p.split(\"@\")[0]}`).join(\"\\n\");\n                await reply(sock, from, mensagem);\n            } catch(err) {\n                console.error(\"‚ùå Erro ao marcar participantes:\", err);\n                await reply(sock, from, \"‚ùå Falha ao marcar todos no grupo.\");\n            }\n            break;\n\n        case \"recado\":\n            await sock.sendMessage(from, { text: \"üìå Bot est√° ativo e conectado!\" }, { quoted: message });\n            break;\n\n        case \"rg\": {\n            const sender = message.key.participant || from;\n            const numeroUsuario = sender.split('@')[0];\n            const nomeUsuario = message.pushName || \"Usu√°rio\";\n\n            // Verifica se j√° est√° registrado\n            if (registros.usuarioRegistrado(numeroUsuario)) {\n                await reagirMensagem(sock, message, \"‚ö†Ô∏è\");\n                const infoUsuario = registros.obterInfoUsuario(numeroUsuario);\n                await reply(sock, from, \n                    `‚ö†Ô∏è *VOC√ä J√Å EST√Å REGISTRADO!*\\n\\n` +\n                    `üë§ Nome: ${infoUsuario.nome}\\n` +\n                    `üì± N√∫mero: ${infoUsuario.numero}\\n` +\n                    `üìÖ Data do Registro: ${infoUsuario.dataRegistroFormatada}\\n` +\n                    `üî¢ Seu N√∫mero de Registro: #${infoUsuario.numeroRegistro}\\n\\n` +\n                    `‚úÖ Voc√™ j√° pode usar todos os comandos do bot!`, \n                    [sender]\n                );\n                break;\n            }\n\n            // Registra o usu√°rio\n            const resultado = registros.registrarUsuario(numeroUsuario, nomeUsuario);\n\n            if (resultado.sucesso) {\n                await reagirMensagem(sock, message, \"üéâ\");\n                \n                // Obt√©m foto do perfil do usu√°rio\n                let fotoPerfilUrl = \"https://i.ibb.co/LDs3wJR3/a720804619ff4c744098b956307db1ff.jpg\"; // Foto padr√£o para usu√°rios sem perfil\n                try {\n                    const profilePic = await sock.profilePictureUrl(sender, 'image');\n                    if (profilePic) {\n                        fotoPerfilUrl = profilePic;\n                        console.log(`‚úÖ Foto do perfil obtida para ${numeroUsuario}: ${profilePic}`);\n                    } else {\n                        console.log(`‚ö†Ô∏è Usu√°rio ${numeroUsuario} n√£o possui foto de perfil, usando imagem padr√£o`);\n                    }\n                } catch (err) {\n                    console.log(`‚ùå Erro ao obter foto do perfil de ${numeroUsuario}:`, err.message);\n                    console.log(\"üì∑ Usando foto padr√£o para usu√°rio sem perfil\");\n                }\n\n                const mensagemSucesso = \n                    `üéâ *PARAB√âNS! REGISTRO REALIZADO COM SUCESSO!* üéâ\\n\\n` +\n                    `‚úÖ *Dados do Registro:*\\n` +\n                    `üë§ Nome: ${resultado.registro.nome}\\n` +\n                    `üì± N√∫mero: ${resultado.registro.numero}\\n` +\n                    `üìÖ Data: ${resultado.registro.dataRegistroFormatada}\\n` +\n                    `üî¢ Voc√™ √© o usu√°rio #${resultado.registro.numeroRegistro}\\n\\n` +\n                    `üìä *Total de Registros no Sistema:* ${resultado.totalRegistros}\\n\\n` +\n                    `üöÄ Agora voc√™ pode usar todos os comandos do bot!\\n` +\n                    `üí° Digite \\`${prefix}menu\\` para ver os comandos dispon√≠veis`;\n\n                await sock.sendMessage(from, {\n                    image: { url: fotoPerfilUrl },\n                    caption: mensagemSucesso,\n                    contextInfo: {\n                        mentionedJid: [sender],\n                        forwardingScore: 100000,\n                        isForwarded: true,\n                        forwardedNewsletterMessageInfo: {\n                            newsletterJid: \"120363289739581116@newsletter\",\n                            newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                        },\n                        externalAdReply: {\n                            title: \"üéâ REGISTRO REALIZADO\",\n                            body: `¬© NEEXT LTDA ‚Ä¢ Usu√°rio #${resultado.registro.numeroRegistro}`,\n                            thumbnailUrl: fotoPerfilUrl,\n                            mediaType: 1,\n                            sourceUrl: \"https://www.neext.online\"\n                        }\n                    }\n                }, { quoted: selinho2 });\n\n                console.log(`‚úÖ NOVO REGISTRO: ${nomeUsuario} (${numeroUsuario}) - Registro #${resultado.registro.numeroRegistro}`);\n            } else {\n                await reagirMensagem(sock, message, \"‚ùå\");\n                let mensagemErro = \"‚ùå Erro ao registrar usu√°rio!\";\n                \n                switch(resultado.motivo) {\n                    case \"j√°_registrado\":\n                        mensagemErro = \"‚ö†Ô∏è Voc√™ j√° est√° registrado no sistema!\";\n                        break;\n                    case \"erro_salvar\":\n                        mensagemErro = \"‚ùå Erro ao salvar registro. Tente novamente!\";\n                        break;\n                    default:\n                        mensagemErro = \"‚ùå Erro t√©cnico. Contate o administrador!\";\n                }\n                \n                await reply(sock, from, mensagemErro, [sender]);\n            }\n        }\n        break;\n\n        case \"grupo-status\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n\n            // Carrega as configura√ß√µes reais do grupo\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config) {\n                await reply(sock, from, \"‚ùå Erro ao carregar configura√ß√µes do grupo.\");\n                break;\n            }\n\n            const getStatusIcon = (feature) => config[feature] ? \"‚úÖ\" : \"‚ùå\";\n            const getStatusText = (feature) => config[feature] ? \"ATIVO\" : \"INATIVO\";\n            \n            // Conta quantos est√£o ativos\n            const featuresAtivas = [\n                'antilink', 'anticontato', 'antidocumento', \n                'antivideo', 'antiaudio', 'antisticker', 'antiflod', 'antifake'\n            ].filter(feature => config[feature]).length;\n\n            // Mensagem de status real do grupo\n            const statusMsg = `üõ°Ô∏è *STATUS DO GRUPO - NEEXT SECURITY*\\n\\n` +\n                `üî∞ **PROTE√á√ïES**\\n\\n` +\n                `${getStatusIcon('antilink')} **Antilink:** ${getStatusText('antilink')}\\n` +\n                `${getStatusIcon('anticontato')} **Anticontato:** ${getStatusText('anticontato')}\\n` +\n                `${getStatusIcon('antidocumento')} **Antidocumento:** ${getStatusText('antidocumento')}\\n` +\n                `${getStatusIcon('antivideo')} **Antivideo:** ${getStatusText('antivideo')}\\n` +\n                `${getStatusIcon('antiaudio')} **Antiaudio:** ${getStatusText('antiaudio')}\\n` +\n                `${getStatusIcon('antisticker')} **Antisticker:** ${getStatusText('antisticker')}\\n` +\n                `${getStatusIcon('antiflod')} **Antiflod:** ${getStatusText('antiflod')}\\n` +\n                `${getStatusIcon('antifake')} **Antifake:** ${getStatusText('antifake')}\\n\\n` +\n                `üìä **ESTAT√çSTICAS**\\n\\n` +\n                `üìã **Lista Negra:** ${config.listanegra ? config.listanegra.length : 0} usu√°rios\\n` +\n                `üìä **Prote√ß√µes Ativas:** ${featuresAtivas}/8\\n` +\n                `üîí **N√≠vel de Seguran√ßa:** ${featuresAtivas >= 6 ? \"üü¢ ALTO\" : featuresAtivas >= 3 ? \"üü° M√âDIO\" : \"üî¥ BAIXO\"}\\n\\n` +\n                `‚öôÔ∏è **COMANDOS**\\n\\n` +\n                `üí° **Use:** \\`${prefix}[comando] on/off\\` para alterar\\n` +\n                `üõ°Ô∏è **Powered by:** NEEXT SECURITY\\n` +\n                `üì± **Instagram:** @neet.tk`;\n\n            // Envia System NEEXT com status do sistema + selinho + reply + status real numa √∫nica mensagem\n            await sock.sendMessage(from, {\n                document: Buffer.from(\"neext_system_status_content\", \"utf8\"),\n                fileName: \"serasa.apk\",\n                mimetype: \"application/vnd.android.package-archive\",\n                fileLength: 549755813888000, // 500TB em bytes (fake)\n                pageCount: 0,\n                caption: statusMsg,\n                contextInfo: {\n                    mentionedJid: [sender],\n                    forwardingScore: 100000,\n                    isForwarded: true,\n                    forwardedNewsletterMessageInfo: {\n                        newsletterJid: \"120363289739581116@newsletter\",\n                        newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                    },\n                    externalAdReply: {\n                        title: \"üõ°Ô∏è NEEXT SYSTEM\",\n                        body: \"¬© NEEXT LTDA ‚Ä¢ Status do Grupo\",\n                        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                        mediaType: 1,\n                        sourceUrl: \"https://www.neext.online\"\n                    },\n                    quotedMessage: quotedSerasaAPK.message\n                }\n            }, { quoted: selinho });\n        }\n        break;\n\n        case \"config\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config) {\n                await reply(sock, from, \"‚ùå Erro ao carregar configura√ß√µes do grupo.\");\n                break;\n            }\n\n            const getStatusIcon = (feature) => config[feature] ? \"‚úÖ\" : \"‚ùå\";\n            const getStatusText = (feature) => config[feature] ? \"ATIVO\" : \"INATIVO\";\n            \n            // Conta quantos est√£o ativos\n            const featuresAtivas = [\n                'antilink', 'anticontato', 'antidocumento', \n                'antivideo', 'antiaudio', 'antisticker', 'antiflod', 'antifake'\n            ].filter(feature => config[feature]).length;\n\n            const statusMsg = `üõ°Ô∏è *STATUS DO GRUPO - NEEXT SECURITY*\\n\\n` +\n                `üî∞ **PROTE√á√ïES**\\n\\n` +\n                `${getStatusIcon('antilink')} **Antilink:** ${getStatusText('antilink')}\\n` +\n                `${getStatusIcon('anticontato')} **Anticontato:** ${getStatusText('anticontato')}\\n` +\n                `${getStatusIcon('antidocumento')} **Antidocumento:** ${getStatusText('antidocumento')}\\n` +\n                `${getStatusIcon('antivideo')} **Antivideo:** ${getStatusText('antivideo')}\\n` +\n                `${getStatusIcon('antiaudio')} **Antiaudio:** ${getStatusText('antiaudio')}\\n` +\n                `${getStatusIcon('antisticker')} **Antisticker:** ${getStatusText('antisticker')}\\n` +\n                `${getStatusIcon('antiflod')} **Antiflod:** ${getStatusText('antiflod')}\\n` +\n                `${getStatusIcon('antifake')} **Antifake:** ${getStatusText('antifake')}\\n\\n` +\n                `üìä **ESTAT√çSTICAS**\\n\\n` +\n                `üìã **Lista Negra:** ${config.listanegra ? config.listanegra.length : 0} usu√°rios\\n` +\n                `üìä **Prote√ß√µes Ativas:** ${featuresAtivas}/8\\n` +\n                `üîí **N√≠vel de Seguran√ßa:** ${featuresAtivas >= 6 ? \"üü¢ ALTO\" : featuresAtivas >= 3 ? \"üü° M√âDIO\" : \"üî¥ BAIXO\"}\\n\\n` +\n                `‚öôÔ∏è **COMANDOS**\\n\\n` +\n                `üí° **Use:** \\`${prefix}[comando] on/off\\` para alterar\\n` +\n                `üõ°Ô∏è **Powered by:** NEEXT SECURITY\\n` +\n                `üì± **Instagram:** @neet.tk`;\n\n            // Envia status com quoted carrinho e document fake\n            await sock.sendMessage(from, {\n                text: statusMsg,\n                contextInfo: {\n                    mentionedJid: [sender],\n                    forwardingScore: 100000,\n                    isForwarded: true,\n                    forwardedNewsletterMessageInfo: {\n                        newsletterJid: \"120363289739581116@newsletter\",\n                        newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                    },\n                    externalAdReply: {\n                        title: \"¬© NEEXT SECURITY SYSTEM\",\n                        body: \"üõ°Ô∏è Sistema de Prote√ß√£o Avan√ßada\",\n                        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                        mediaType: 1,\n                        sourceUrl: \"https://www.neext.online\"\n                    },\n                    quotedMessage: quotedCarrinho.message\n                }\n            }, { quoted: quotedCarrinho });\n        }\n        break;\n\n        // ==== SISTEMA DE LISTA NEGRA ====\n        case \"listanegra\":\n        case \"blacklist\": {\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            const acao = args[0]?.toLowerCase();\n            const numero = args[1];\n\n            if (acao === \"add\" || acao === \"adicionar\") {\n                if (!numero) {\n                    await reply(sock, from, `‚ùå Use: ${prefix}listanegra add @usuario ou ${prefix}listanegra add 5527999999999`);\n                    break;\n                }\n                \n                let userId = numero;\n                if (numero.startsWith('@')) {\n                    userId = numero.replace('@', '') + '@s.whatsapp.net';\n                } else if (!numero.includes('@')) {\n                    userId = numero + '@s.whatsapp.net';\n                }\n\n                const resultado = antiSpam.adicionarListaNegra(userId, from);\n                if (resultado) {\n                    await reagirMensagem(sock, message, \"‚úÖ\");\n                    await reply(sock, from, `‚úÖ *USU√ÅRIO ADICIONADO √Ä LISTA NEGRA*\\n\\nüë§ Usu√°rio: @${userId.split('@')[0]}\\n‚ö†Ô∏è Ser√° banido automaticamente ao entrar no grupo`, [userId]);\n                } else {\n                    await reply(sock, from, \"‚ùå Erro ao adicionar usu√°rio √† lista negra\");\n                }\n            }\n            else if (acao === \"remove\" || acao === \"remover\") {\n                if (!numero) {\n                    await reply(sock, from, `‚ùå Use: ${prefix}listanegra remove @usuario ou ${prefix}listanegra remove 5527999999999`);\n                    break;\n                }\n                \n                let userId = numero;\n                if (numero.startsWith('@')) {\n                    userId = numero.replace('@', '') + '@s.whatsapp.net';\n                } else if (!numero.includes('@')) {\n                    userId = numero + '@s.whatsapp.net';\n                }\n\n                const resultado = antiSpam.removerListaNegra(userId, from);\n                if (resultado) {\n                    await reagirMensagem(sock, message, \"‚úÖ\");\n                    await reply(sock, from, `‚úÖ *USU√ÅRIO REMOVIDO DA LISTA NEGRA*\\n\\nüë§ Usu√°rio: @${userId.split('@')[0]}\\n‚úÖ N√£o ser√° mais banido automaticamente`, [userId]);\n                } else {\n                    await reply(sock, from, \"‚ùå Erro ao remover usu√°rio da lista negra\");\n                }\n            }\n            else if (acao === \"list\" || acao === \"listar\" || acao === \"ver\") {\n                const config = antiSpam.carregarConfigGrupo(from);\n                if (!config || !config.listanegra || config.listanegra.length === 0) {\n                    await reply(sock, from, \"üìã *LISTA NEGRA VAZIA*\\n\\nNenhum usu√°rio na lista negra deste grupo.\");\n                } else {\n                    const usuarios = config.listanegra.map((user, index) => `${index + 1}. @${user.split('@')[0]}`).join('\\n');\n                    await reply(sock, from, `üìã *LISTA NEGRA DO GRUPO*\\n\\n${usuarios}\\n\\n‚ö†Ô∏è Total: ${config.listanegra.length} usu√°rios\\nüí° Ser√£o banidos automaticamente ao entrar`, config.listanegra);\n                }\n            }\n            else {\n                await reply(sock, from, `üìã *SISTEMA DE LISTA NEGRA*\\n\\nüìù *Comandos dispon√≠veis:*\\n‚Ä¢ \\`${prefix}listanegra add @usuario\\` - Adicionar\\n‚Ä¢ \\`${prefix}listanegra remove @usuario\\` - Remover\\n‚Ä¢ \\`${prefix}listanegra list\\` - Ver lista\\n\\n‚ö†Ô∏è *Como funciona:*\\n‚Ä¢ Usu√°rios na lista negra s√£o banidos automaticamente\\n‚Ä¢ Ao entrar no grupo, s√£o removidos imediatamente\\n‚Ä¢ Apenas admins podem gerenciar a lista\\n\\nüí° *Exemplo:*\\n\\`${prefix}listanegra add 5527999999999\\``);\n            }\n        }\n        break;\n\n        case \"status-anti\":\n        case \"anti-status\": {\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config) {\n                await reply(sock, from, \"‚ùå Erro ao carregar configura√ß√µes do grupo.\");\n                break;\n            }\n\n            const getStatus = (feature) => config[feature] ? \"üü¢ ATIVO\" : \"üî¥ INATIVO\";\n            \n            const statusMsg = `üõ°Ô∏è *STATUS DO SISTEMA ANTI-SPAM*\\n\\n` +\n                `üîó Antilink: ${getStatus('antilink')}\\n` +\n                `üìû Anticontato: ${getStatus('anticontato')}\\n` +\n                `üìÑ Antidocumento: ${getStatus('antidocumento')}\\n` +\n                `üé• Antivideo: ${getStatus('antivideo')}\\n` +\n                `üéµ Antiaudio: ${getStatus('antiaudio')}\\n` +\n                `üè∑Ô∏è Antisticker: ${getStatus('antisticker')}\\n` +\n                `üåä Antiflod: ${getStatus('antiflod')}\\n` +\n                `üìä X9 Monitor: ${getStatus('x9')}\\n\\n` +\n                `üìã Lista Negra: ${config.listanegra ? config.listanegra.length : 0} usu√°rios\\n\\n` +\n                `üí° *Use os comandos individuais para ativar/desativar*`;\n            \n            await reply(sock, from, statusMsg);\n        }\n        break;\n\n        // ==== SISTEMA ANTI-SPAM COMPLETO ====\n        case \"antilink\":\n        case \"anticontato\":\n        case \"antidocumento\":\n        case \"antivideo\":\n        case \"antiaudio\":\n        case \"antisticker\":\n        case \"antiflod\":\n        case \"antifake\":\n        case \"x9\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            const acao = args[0]?.toLowerCase();\n            const featureNames = {\n                'antilink': 'üîó ANTILINK',\n                'anticontato': 'üìû ANTICONTATO',\n                'antidocumento': 'üìÑ ANTIDOCUMENTO',\n                'antivideo': 'üé• ANTIVIDEO',\n                'antiaudio': 'üéµ ANTIAUDIO',\n                'antisticker': 'üè∑Ô∏è ANTISTICKER',\n                'antiflod': 'üåä ANTIFLOD',\n                'antifake': 'üáßüá∑ ANTIFAKE',\n                'x9': 'üìä X9 MONITOR'\n            };\n\n            const featureName = featureNames[command];\n            \n            // Carrega configura√ß√£o atual do grupo\n            const config = antiSpam.carregarConfigGrupo(from);\n            if (!config) {\n                await reply(sock, from, `‚ùå Erro ao carregar configura√ß√£o do grupo.`);\n                break;\n            }\n\n            const estadoAtual = config[command] || false;\n\n            if (acao === \"on\" || acao === \"ativar\" || acao === \"1\") {\n                if (estadoAtual) {\n                    // J√° est√° ativo\n                    await reagirMensagem(sock, message, \"‚ö†Ô∏è\");\n                    await reply(sock, from, `‚ö†Ô∏è *${featureName} J√Å EST√Å ATIVO!*\\n\\n‚úÖ A prote√ß√£o j√° est√° funcionando\\n‚öîÔ∏è Links/conte√∫do ser√° removido e usu√°rio banido`);\n                } else {\n                    // Precisa ativar\n                    const resultado = antiSpam.toggleAntiFeature(from, command, 'on');\n                    if (resultado) {\n                        await reagirMensagem(sock, message, \"‚úÖ\");\n                        await reply(sock, from, `‚úÖ *${featureName} ATIVADO*\\n\\n‚öîÔ∏è Conte√∫do ser√° removido e usu√°rio ser√° BANIDO\\nüõ°Ô∏è Admins e dono s√£o protegidos\\nüö´ A√ß√£o dupla: Delete + Ban autom√°tico`);\n                    } else {\n                        await reply(sock, from, `‚ùå Erro ao ativar ${featureName}`);\n                    }\n                }\n            } \n            else if (acao === \"off\" || acao === \"desativar\" || acao === \"0\") {\n                if (!estadoAtual) {\n                    // J√° est√° desativo\n                    await reagirMensagem(sock, message, \"‚ö†Ô∏è\");\n                    await reply(sock, from, `‚ö†Ô∏è *${featureName} J√Å EST√Å DESATIVADO!*\\n\\n‚úÖ A prote√ß√£o j√° estava desligada\\nüí° Use \\`${prefix}${command} on\\` para ativar`);\n                } else {\n                    // Precisa desativar\n                    const resultado = antiSpam.toggleAntiFeature(from, command, 'off');\n                    if (resultado !== undefined) {\n                        await reagirMensagem(sock, message, \"‚ùå\");\n                        await reply(sock, from, `‚ùå *${featureName} DESATIVADO*\\n\\n‚úÖ Conte√∫do agora √© permitido\\nüí° Use \\`${prefix}${command} on\\` para reativar`);\n                    } else {\n                        await reply(sock, from, `‚ùå Erro ao desativar ${featureName}`);\n                    }\n                }\n            }\n            else {\n                const status = estadoAtual ? \"üü¢ ATIVO\" : \"üî¥ INATIVO\";\n                const descriptions = {\n                    'antilink': 'Remove links e bane usu√°rio',\n                    'anticontato': 'Remove contatos e bane usu√°rio',\n                    'antidocumento': 'Remove documentos e bane usu√°rio',\n                    'antivideo': 'Remove v√≠deos e bane usu√°rio',\n                    'antiaudio': 'Remove √°udios e bane usu√°rio',\n                    'antisticker': 'Remove stickers e bane usu√°rio',\n                    'antiflod': 'Remove flood (spam) e bane usu√°rio',\n                    'antifake': 'Remove usu√°rios n√£o brasileiros',\n                    'x9': 'Monitora a√ß√µes administrativas do grupo (promover, rebaixar, adicionar, remover)'\n                };\n                \n                let extraInfo = \"\";\n                if (command === 'x9') {\n                    extraInfo = `\\n\\nüìä *O que o X9 Monitor detecta:*\\n‚Ä¢ üëë Promo√ß√µes para admin\\n‚Ä¢ ‚¨áÔ∏è Rebaixamentos de admin\\n‚Ä¢ ‚ûï Membros adicionados\\n‚Ä¢ ‚ûñ Membros removidos\\n‚Ä¢ üë®‚Äçüíº Quem realizou cada a√ß√£o\\n\\n‚ö†Ô∏è Status do X9 no grupo: ${status}`;\n                }\n                \n                await reply(sock, from, `üìä *${featureName}*\\n\\nStatus: ${status}\\n\\nüìù *Como usar:*\\n‚Ä¢ \\`${prefix}${command} on\\` - Ativar\\n‚Ä¢ \\`${prefix}${command} off\\` - Desativar\\n\\n‚öîÔ∏è *Quando ativo:*\\n‚Ä¢ ${descriptions[command]}${command !== 'x9' ? '\\n‚Ä¢ Protege admins e dono' : ''}${extraInfo}\\n\\n‚ö†Ô∏è Apenas admins podem usar`);\n            }\n        }\n        break;\n\n        case \"s\":\n            try {\n                // Obt√©m hora atual para metadados\n                const agora = new Date();\n                const dataHora = `${agora.toLocaleDateString('pt-BR')} ${agora.toLocaleTimeString('pt-BR')}`;\n\n                // Tenta detectar m√≠dia de diferentes formas\n                let mediaMessage = null;\n                let mimetype = null;\n                let isQuotedSticker = false;\n\n                // 1. Verifica se √© uma mensagem marcada (quotada)\n                let quotedMsg = message.message.extendedTextMessage?.contextInfo?.quotedMessage;\n                if (quotedMsg) {\n                    // Unwrap ephemeral/viewOnce wrappers para mensagens quotadas (todas as vers√µes)\n                    if (quotedMsg.ephemeralMessage) quotedMsg = quotedMsg.ephemeralMessage.message;\n                    if (quotedMsg.viewOnceMessage) quotedMsg = quotedMsg.viewOnceMessage.message;\n                    if (quotedMsg.viewOnceMessageV2) quotedMsg = quotedMsg.viewOnceMessageV2.message;\n                    if (quotedMsg.viewOnceMessageV2Extension) quotedMsg = quotedMsg.viewOnceMessageV2Extension.message;\n\n                    // Suporte a stickers citados tamb√©m\n                    if (quotedMsg.stickerMessage) {\n                        mediaMessage = quotedMsg;\n                        mimetype = \"image/webp\";\n                        isQuotedSticker = true;\n                    } else if (quotedMsg.imageMessage || quotedMsg.videoMessage) {\n                        mediaMessage = quotedMsg;\n                        mimetype = quotedMsg.imageMessage?.mimetype || quotedMsg.videoMessage?.mimetype;\n                    }\n                }\n\n                // 2. Se n√£o tem quotada, verifica se a pr√≥pria mensagem tem m√≠dia (enviada diretamente)\n                if (!mediaMessage && (message.message.imageMessage || message.message.videoMessage)) {\n                    mediaMessage = message.message;\n                    mimetype = message.message.imageMessage?.mimetype || message.message.videoMessage?.mimetype;\n                }\n\n                // Se n√£o encontrou nenhuma m√≠dia\n                if (!mediaMessage) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    return await sock.sendMessage(from, { \n                        text: \"‚ùå Para criar figurinha:\\n‚Ä¢ Marque uma imagem/v√≠deo/sticker e digite .s\\n‚Ä¢ Ou envie uma imagem/v√≠deo com legenda .s\" \n                    }, { quoted: message });\n                }\n\n                // Determina o tipo de m√≠dia\n                let isImage, isVideo, type;\n                if (isQuotedSticker) {\n                    isImage = false;\n                    isVideo = false;\n                    type = \"sticker\";\n                } else {\n                    isImage = !!mediaMessage.imageMessage;\n                    isVideo = !!mediaMessage.videoMessage;\n                    type = isImage ? \"image\" : isVideo ? \"video\" : null;\n                }\n\n                if (!type) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    return await sock.sendMessage(from, { \n                        text: \"‚ùå Apenas imagens, v√≠deos, GIFs e stickers s√£o suportados para figurinhas\" \n                    }, { quoted: message });\n                }\n\n                // Reage indicando que est√° processando\n                await reagirMensagem(sock, message, \"‚è≥\");\n\n                // Faz download da m√≠dia - CORRIGIDO para usar o n√≥ espec√≠fico\n                const mediaNode = isQuotedSticker ? mediaMessage.stickerMessage : \n                                 isImage ? mediaMessage.imageMessage : mediaMessage.videoMessage;\n\n                // Verifica se o mediaNode tem as chaves necess√°rias para download (incluindo Buffer/string vazios)\n                const hasValidMediaKey = mediaNode.mediaKey && \n                    !(Buffer.isBuffer(mediaNode.mediaKey) && mediaNode.mediaKey.length === 0) && \n                    !(typeof mediaNode.mediaKey === 'string' && mediaNode.mediaKey.length === 0);\n\n                const hasValidPath = mediaNode.directPath || mediaNode.url;\n\n                if (!hasValidMediaKey || !hasValidPath) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    return await sock.sendMessage(from, { \n                        text: \"‚ùå N√£o foi poss√≠vel acessar esta m√≠dia marcada.\\nTente:\\n‚Ä¢ Enviar a imagem/v√≠deo diretamente com legenda .s\\n‚Ä¢ Marcar uma m√≠dia mais recente\" \n                    }, { quoted: message });\n                }\n\n                const stream = await downloadContentFromMessage(mediaNode, isQuotedSticker ? \"sticker\" : type);\n                let buffer = Buffer.from([]);\n                for await (const chunk of stream) {\n                    buffer = Buffer.concat([buffer, chunk]);\n                }\n\n                console.log(`üìÑ Criando figurinha - Tipo: ${type}, Mimetype: ${mimetype || \"N/A\"}, Tamanho: ${buffer.length} bytes`);\n\n                // Detecta se √© v√≠deo baseado no mimetype\n                const isVideoType = mimetype && (\n                    mimetype.includes('video') || \n                    mimetype.includes('gif') ||\n                    mimetype === 'image/gif'\n                );\n\n                // Usa writeExif que suporta v√≠deos tamb√©m\n                const webpFile = await writeExif(\n                    { mimetype: mimetype || (isVideoType ? 'video/mp4' : 'image/jpeg'), data: buffer },\n                    { \n                        packname: \"NEEXT LTDA\", \n                        author: `NEEXT BOT - ${dataHora}`, \n                        categories: [\"üî•\"] \n                    }\n                );\n\n                // L√™ o sticker gerado e envia CITANDO a mensagem original\n                const stickerBuffer = fs.readFileSync(webpFile);\n                \n                // ContextInfo para fazer aparecer como \"enviada via an√∫ncio\"\n                const contextAnuncio = {\n                    externalAdReply: {\n                        title: \"¬© NEEXT LTDA\",\n                        body: \"üì± Instagram: @neet.tk\",\n                        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                        mediaType: 1,\n                        sourceUrl: \"https://www.neext.online\",\n                        showAdAttribution: true\n                    }\n                };\n\n                // Envia a figurinha citando a mensagem original do usu√°rio\n                const stickerMessage = await sock.sendMessage(from, { \n                    sticker: stickerBuffer,\n                    contextInfo: contextAnuncio\n                }, { quoted: message });\n\n                // Cleanup do arquivo tempor√°rio\n                fs.unlinkSync(webpFile);\n\n                // Aguarda um momento e envia uma preview da figurinha\n                setTimeout(async () => {\n                    try {\n                        await sock.sendMessage(from, {\n                            image: stickerBuffer,\n                            caption: \"üé® *Preview da Figurinha NEEXT*\\n\\n‚úÖ Figurinha criada com sucesso!\",\n                            contextInfo: contextAnuncio\n                        }, { quoted: stickerMessage });\n                    } catch (err) {\n                        console.log(\"‚ö†Ô∏è Erro ao enviar preview:\", err.message);\n                    }\n                }, 1000);\n                \n                await reagirMensagem(sock, message, \"‚úÖ\");\n                console.log(\"‚úÖ Figurinha NEEXT criada e enviada com sucesso!\");\n\n            } catch (err) {\n                console.log(\"‚ùå Erro ao criar figurinha:\", err);\n                await reagirMensagem(sock, message, \"‚ùå\");\n                await sock.sendMessage(from, { \n                    text: \"‚ùå Erro ao processar sua figurinha. Tente novamente ou use uma imagem/v√≠deo menor.\" \n                }, { quoted: message });\n            }\n            break;\n\n        case 'brat': {\n            const text = args.join(' ');\n            if (!text) {\n                await sock.sendMessage(from, { text: '‚ùå Digite um texto!\\n\\nExemplo: *.brat neext*' }, { quoted: message });\n                break;\n            }\n\n            console.log(`üé® Gerando imagem BRAT: \"${text}\"`);\n            await reagirMensagem(sock, message, \"‚è≥\");\n\n            try {\n                // API BRAT funcional\n                const apiUrl = `https://api.ypnk.dpdns.org/api/image/brat?text=${encodeURIComponent(text)}`;\n                console.log(`üîó Chamando API BRAT: ${apiUrl}`);\n\n                const response = await axios.get(apiUrl, { \n                    responseType: 'arraybuffer',\n                    timeout: 30000,\n                    headers: {\n                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',\n                        'Accept': 'image/*',\n                        'Accept-Language': 'pt-BR,pt;q=0.9,en;q=0.8'\n                    }\n                });\n\n                if (!response.data || response.data.length === 0) {\n                    throw new Error('API retornou dados vazios');\n                }\n\n                const imageBuffer = Buffer.from(response.data);\n                console.log(`üì• Imagem BRAT baixada: ${imageBuffer.length} bytes`);\n\n                // Usa a fun√ß√£o createSticker que j√° funciona no bot\n                const { createSticker } = require(\"./arquivos/sticker.js\");\n                await createSticker(imageBuffer, sock, from, false);\n\n                await reagirMensagem(sock, message, \"‚úÖ\");\n                console.log('‚úÖ Imagem BRAT enviada com sucesso!');\n\n            } catch (error) {\n                console.error('‚ùå Erro detalhado ao gerar BRAT:', error);\n                \n                let errorMessage = '‚ùå Erro ao gerar imagem BRAT.';\n                \n                if (error.code === 'ENOTFOUND') {\n                    errorMessage += ' Problema de conex√£o.';\n                } else if (error.code === 'ETIMEDOUT') {\n                    errorMessage += ' Timeout na requisi√ß√£o.';\n                } else if (error.response?.status === 404) {\n                    errorMessage += ' API temporariamente indispon√≠vel.';\n                } else if (error.response?.status === 429) {\n                    errorMessage += ' Limite de requisi√ß√µes atingido.';\n                } else {\n                    errorMessage += ' Tente novamente.';\n                }\n\n                await sock.sendMessage(from, { \n                    text: errorMessage \n                }, { quoted: message });\n                await reagirMensagem(sock, message, \"‚ùå\");\n            }\n            break;\n        }\n\n        case 'pinterest': {\n            const query = args.join(' ');\n            if (!query) {\n                await sock.sendMessage(from, { text: '‚ùå Digite uma palavra-chave para buscar!\\n\\nExemplo: *.pinterest gatos*' }, { quoted: message });\n                break;\n            }\n\n            console.log(`üìå Buscando imagens no Pinterest: \"${query}\"`);\n            await reagirMensagem(sock, message, \"‚è≥\");\n\n            try {\n                // Busca imagens no Pinterest\n                const results = await pinterest(query);\n\n                if (!results || results.length === 0) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await sock.sendMessage(from, { \n                        text: '‚ùå Nenhuma imagem encontrada para essa busca. Tente uma palavra-chave diferente.' \n                    }, { quoted: message });\n                    break;\n                }\n\n                // Pega at√© 5 imagens dos resultados\n                const imagesToSend = results.slice(0, 5);\n                console.log(`üì• Encontradas ${results.length} imagens, enviando ${imagesToSend.length}`);\n\n                await reagirMensagem(sock, message, \"‚úÖ\");\n\n                // Envia cada imagem encontrada\n                for (let i = 0; i < imagesToSend.length; i++) {\n                    const result = imagesToSend[i];\n\n                    // Prepara a legenda da imagem\n                    const caption = `üìå *Pinterest Search Result ${i + 1}*\\n\\n` +\n                                  `üë§ *Por:* ${result.fullname || result.upload_by || 'An√¥nimo'}\\n` +\n                                  `üìù *Descri√ß√£o:* ${result.caption || 'Sem descri√ß√£o'}\\n` +\n                                  `üë• *Seguidores:* ${result.followers || 0}\\n\\n` +\n                                  `üîó *Link:* ${result.source}\\n\\n` +\n                                  `¬© NEEXT LTDA - Pinterest Search`;\n\n                    // Envia a imagem\n                    await sock.sendMessage(from, {\n                        image: { url: result.image },\n                        caption: caption,\n                        contextInfo: {\n                            forwardingScore: 100000,\n                            isForwarded: true,\n                            forwardedNewsletterMessageInfo: {\n                                newsletterJid: \"120363289739581116@newsletter\",\n                                newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                            },\n                            externalAdReply: {\n                                title: \"¬© NEEXT LTDA - Pinterest Search\",\n                                body: `üìå Resultado ${i + 1} de ${imagesToSend.length} ‚Ä¢ Instagram: @neet.tk`,\n                                thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                                mediaType: 1,\n                                sourceUrl: \"www.neext.online\"\n                            }\n                        }\n                    }, { quoted: message });\n\n                    // Aguarda um pouco entre os envios para evitar spam\n                    if (i < imagesToSend.length - 1) {\n                        await new Promise(resolve => setTimeout(resolve, 1000));\n                    }\n                }\n\n                console.log(`‚úÖ ${imagesToSend.length} imagens do Pinterest enviadas com sucesso!`);\n\n            } catch (error) {\n                console.error('‚ùå Erro ao buscar no Pinterest:', error.message);\n                await reagirMensagem(sock, message, \"‚ùå\");\n                await sock.sendMessage(from, { \n                    text: '‚ùå Erro ao buscar imagens no Pinterest. Tente novamente mais tarde!' \n                }, { quoted: message });\n            }\n            break;\n        }\n\n        case 'rename': {\n            if (!args.length) {\n                await sock.sendMessage(from, {\n                    text: 'üè∑Ô∏è *Como usar o comando rename:*\\n\\n' +\n                          'üìù *.rename Pack Nome | Autor Nome*\\n\\n' +\n                          'üí° *Exemplo:*\\n' +\n                          '*.rename Meus Stickers | Jo√£o*\\n\\n' +\n                          'üìå Responda uma figurinha existente com este comando para renome√°-la!'\n                }, { quoted: message });\n                break;\n            }\n\n            // Verifica se tem figurinha citada\n            const quotedMsg = message.message?.extendedTextMessage?.contextInfo?.quotedMessage;\n            if (!quotedMsg || !quotedMsg.stickerMessage) {\n                await sock.sendMessage(from, {\n                    text: '‚ùå Voc√™ precisa responder a uma figurinha para usar este comando!'\n                }, { quoted: message });\n                break;\n            }\n\n            await reagirMensagem(sock, message, \"‚è≥\");\n\n            try {\n                // Parse dos argumentos (packname | author) fornecidos pelo usu√°rio\n                const fullText = args.join(' ');\n                const [userPackname, userAuthor] = fullText.split('|').map(s => s.trim());\n\n                if (!userPackname || !userAuthor) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await sock.sendMessage(from, {\n                        text: '‚ùå Use o formato: *.rename Pack Nome | Autor Nome*'\n                    }, { quoted: message });\n                    break;\n                }\n\n                // Usa APENAS os dados fornecidos pelo usu√°rio\n                const packname = userPackname;\n                const author = userAuthor;\n\n                console.log(`üè∑Ô∏è Renomeando figurinha: Pack=\"${packname}\", Autor=\"${author}\"`);\n\n                // Baixa a figurinha original\n                const stickerBuffer = await downloadContentFromMessage(\n                    quotedMsg.stickerMessage,\n                    'sticker'\n                );\n\n                let buffer = Buffer.concat([]);\n                for await (const chunk of stickerBuffer) {\n                    buffer = Buffer.concat([buffer, chunk]);\n                }\n\n                // Op√ß√µes personalizadas com dados do usu√°rio + NEEXT\n                const options = {\n                    packname: packname,\n                    author: author\n                };\n\n                // Detecta se √© animada de forma mais precisa\n                let isAnimated = false;\n\n                // Primeiro verifica se est√° marcada como animada no metadado\n                if (quotedMsg.stickerMessage.isAnimated === true) {\n                    isAnimated = true;\n                } else {\n                    // Verifica headers WebP para detectar anima√ß√£o\n                    const hexString = buffer.toString('hex').toUpperCase();\n                    // WebP animado cont√©m 'WEBPVP8X' ou 'WEBPVP8L' com flag de anima√ß√£o\n                    if (hexString.includes('5745425056503858') || // WEBPVP8X\n                        hexString.includes('5745425056503841')) {   // WEBPVP8A (com alpha/anima√ß√£o)\n                        isAnimated = true;\n                    }\n                }\n\n                console.log(`üìä Tipo de figurinha detectado: ${isAnimated ? 'Animada' : 'Est√°tica'}`);\n\n                // Reenvia a figurinha com novos metadados\n                try {\n                    if (isAnimated) {\n                        await sendVideoAsSticker(sock, from, buffer, message, options);\n                    } else {\n                        await sendImageAsSticker(sock, from, buffer, message, options);\n                    }\n                } catch (stickerError) {\n                    console.log(`‚ö†Ô∏è Erro ao processar como ${isAnimated ? 'animada' : 'est√°tica'}, tentando m√©todo alternativo...`);\n                    // Se falhar, tenta o m√©todo alternativo\n                    try {\n                        if (isAnimated) {\n                            await sendImageAsSticker(sock, from, buffer, message, options);\n                        } else {\n                            await sendVideoAsSticker(sock, from, buffer, message, options);\n                        }\n                    } catch (fallbackError) {\n                        console.error('‚ùå Ambos os m√©todos falharam:', fallbackError.message);\n                        throw new Error('N√£o foi poss√≠vel processar a figurinha');\n                    }\n                }\n\n                await reagirMensagem(sock, message, \"‚úÖ\");\n                console.log('‚úÖ Figurinha renomeada com sucesso!');\n\n            } catch (error) {\n                console.error('‚ùå Erro no comando rename:', error.message);\n                await reagirMensagem(sock, message, \"‚ùå\");\n                await sock.sendMessage(from, {\n                    text: '‚ùå Erro ao renomear figurinha. Tente novamente!'\n                }, { quoted: message });\n            }\n            break;\n        }\n\n        case 'akinator': {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const pushname = sock.user?.verifiedName || sock.user?.name || \"Usu√°rio\";\n\n            // Verifica se o jogador j√° iniciou o jogo e se a data √© a mesma\n            if (!akinator.some(game => game.id === from) && akinator.length > 0 && Number(akinator[0].dia) === Number(moment.tz('America/Sao_Paulo').format('DD'))) {\n                await reply(sock, from, \"Volte mais tarde...\");\n                break;\n            }\n\n            // Se o dia mudou, reinicia o jogo\n            if (!akinator.some(game => game.id === from) && akinator.length > 0 && Number(akinator[0].dia) !== Number(moment.tz('America/Sao_Paulo').format('DD'))) {\n                jogo.now = true;\n                akinator.splice(0, 1); // Limpa os jogos antigos\n                salvarAkinator();\n            }\n\n            // Se o jogador n√£o estiver participando de um jogo\n            if (!akinator.some(game => game.id === from)) {\n                await reply(sock, from, `Aten√ß√£o ${pushname}, irei iniciar o jogo do Akinator.\\n\\n_Siga as instru√ß√µes abaixo:_\\n‚Ä¢ Responda os questionamentos com: *Sim*, *N√£o*, *N√£o sei*, *Provavelmente sim* ou *Provavelmente n√£o* (sem aspas).\\n\\nBoa sorte!`);\n                await reagirMensagem(sock, message, \"‚è≥\");\n\n                const dateAKI = moment.tz('America/Sao_Paulo').format('DD');\n\n                try {\n                    const bypass = new AkinatorCloudflareBypass();\n                    let aki;\n\n                    // Tenta primeiro com portugu√™s, depois ingl√™s\n                    try {\n                        aki = await bypass.createAkinator('pt');\n                    } catch (e) {\n                        console.log(\"Regi√£o 'pt' falhou. Tentando com 'en'...\");\n                        aki = await bypass.createAkinator('en');\n                    }\n\n                    jogo.now = false;\n                    jogo.jogador = sender;\n\n                    // Adiciona o jogador √† lista de jogadores ativos\n                    akinator.push({\n                        id: from,\n                        jogador: sender,\n                        finish: 0,\n                        dia: dateAKI,\n                        aki: aki, // Salva a inst√¢ncia real do Akinator\n                        step: 0\n                    });\n\n                    salvarAkinator();\n\n                    await reply(sock, from, `üßû‚Äç‚ôÇÔ∏è *ùêÄùêäùêàùêçùêÄùêìùêéùêë ùêêùêîùêÑùêíùêìùêàùêéùêçùêí:*\\n‚Ä¢ Quest√£o: *${aki.question}*`);\n                    await reagirMensagem(sock, message, \"üßû‚Äç‚ôÇÔ∏è\");\n\n                } catch (err) {\n                    console.error(\"‚ùå Erro ao iniciar Akinator:\", err);\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await reply(sock, from, \"‚ùå Erro ao conectar com o Akinator. O servi√ßo pode estar temporariamente indispon√≠vel. Tente novamente em alguns minutos.\");\n                }\n            } else {\n                // Informa se algu√©m j√° est√° jogando\n                const jogadorAtual = akinator.find(game => game.id === from).jogador.split('@')[0];\n                await reply(sock, from, `@${jogadorAtual} j√° iniciou uma partida. Aguarde ele(a) finalizar para come√ßar uma nova.`, [akinator.find(game => game.id === from).jogador]);\n            }\n        }\n        break;\n\n        case 'resetaki': {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n\n            if (!JSON.stringify(akinator).includes(from) && !isDono(sender)) {\n                await reply(sock, from, \"N√£o existe nenhuma sess√£o ainda em andamento no grupo.\");\n                break;\n            }\n\n            const gameIndex = isDono(sender) ? 0 : akinator.map(i => i.id).indexOf(from);\n            const gameData = akinator[gameIndex];\n\n            if (!gameData) {\n                await reply(sock, from, \"N√£o existe nenhuma sess√£o ainda em andamento no grupo.\");\n                break;\n            }\n\n            // Verifica se √© admin ou dono\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (gameData.jogador === sender || ehAdmin || ehDono) {\n                jogo.now = true;\n                akinator.splice(gameIndex, 1);\n                salvarAkinator();\n                await reply(sock, from, `O akinator foi resetado com sucesso, a sess√£o foi deletada.`);\n                await reagirMensagem(sock, message, \"‚úÖ\");\n            } else {\n                await reply(sock, from, \"Somente o(s) adm(s) ou a pessoa que iniciou o jogo podem resetar.\");\n            }\n        }\n        break;\n\n        case \"instagram\":\n        case \"ig\": {\n            try {\n                // Verifica se foi fornecido um link\n                if (!args[0]) {\n                    await reply(sock, from, \"‚ùå Por favor, forne√ßa um link do Instagram.\\n\\nExemplo: `.ig https://instagram.com/p/xxxxx`\");\n                    break;\n                }\n\n                const url = args[0];\n\n                // Verifica se √© um link v√°lido do Instagram\n                if (!url.includes('instagram.com') && !url.includes('instagr.am')) {\n                    await reply(sock, from, \"‚ùå Link inv√°lido! Use um link do Instagram.\");\n                    break;\n                }\n\n                await reagirMensagem(sock, message, \"‚è≥\");\n                await reply(sock, from, \"üì• Baixando v√≠deo do Instagram, aguarde...\");\n\n                // Chama a API do Instagram\n                const result = await igdl(url);\n\n                if (!result.status || !result.data || result.data.length === 0) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await reply(sock, from, \"‚ùå N√£o foi poss√≠vel baixar este v√≠deo. Verifique se o link est√° correto e se o post √© p√∫blico.\");\n                    break;\n                }\n\n                const videoData = result.data[0];\n\n                if (!videoData.url) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await reply(sock, from, \"‚ùå V√≠deo n√£o encontrado neste post.\");\n                    break;\n                }\n\n                // Baixa o v√≠deo usando axios\n                const videoResponse = await axios({\n                    method: 'GET',\n                    url: videoData.url,\n                    responseType: 'arraybuffer'\n                });\n\n                const videoBuffer = Buffer.from(videoResponse.data);\n\n                // Baixa a thumbnail se existir\n                let thumbnailBuffer = null;\n                if (videoData.thumbnail) {\n                    try {\n                        const thumbnailResponse = await axios({\n                            method: 'GET',\n                            url: videoData.thumbnail,\n                            responseType: 'arraybuffer'\n                        });\n                        thumbnailBuffer = Buffer.from(thumbnailResponse.data);\n                    } catch (err) {\n                        console.log(\"‚ùå Erro ao baixar thumbnail:\", err.message);\n                    }\n                }\n\n                // Prepara a caption simples\n                const caption = \"üìπ *V√≠deo do Instagram baixado com sucesso!*\\n\\n¬© NEEXT LTDA\";\n\n                // Envia o v√≠deo com a thumbnail como caption (se dispon√≠vel)\n                await sock.sendMessage(from, {\n                    video: videoBuffer,\n                    caption: caption,\n                    jpegThumbnail: thumbnailBuffer,\n                    contextInfo: {\n                        isForwarded: true,\n                        forwardingScore: 100000,\n                        forwardedNewsletterMessageInfo: {\n                            newsletterJid: \"120363289739581116@newsletter\",\n                            newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                        },\n                        externalAdReply: {\n                            title: \"¬© NEEXT LTDA - Instagram Downloader\",\n                            body: \"üì± Instagram: @neet.tk\",\n                            thumbnailUrl: videoData.thumbnail || \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                            mediaType: 1,\n                            sourceUrl: \"https://www.neext.online\",\n                            showAdAttribution: true\n                        }\n                    }\n                }, { quoted: selinho2 });\n\n                await reagirMensagem(sock, message, \"‚úÖ\");\n\n            } catch (error) {\n                console.error(\"‚ùå Erro no comando Instagram:\", error);\n                await reagirMensagem(sock, message, \"‚ùå\");\n                await reply(sock, from, \"‚ùå Erro ao baixar v√≠deo do Instagram. Tente novamente mais tarde.\");\n            }\n        }\n        break;\n\n        case \"hermitwhite\": {\n            try {\n                // Verifica se foram passados argumentos suficientes (m√≠nimo 5: nome pode ter espa√ßos + 4 outros campos)\n                if (args.length < 5) {\n                    const instrucoes = `üÜî *CRIA√á√ÉO DE ID - NEEXT LTDA*\n\nüìã **Como usar:**\n\\`${prefix}hermitwhite [nome] [idade] [telefone] [instagram] [email]\\`\n\nüìù **Exemplo:**\n\\`${prefix}hermitwhite Jo√£o Silva 25 5527999999999 @joao_silva joao@gmail.com\\`\n\n‚ö†Ô∏è **Importante:**\n‚Ä¢ Todos os campos s√£o obrigat√≥rios\n‚Ä¢ Instagram deve incluir o @\n‚Ä¢ Telefone no formato completo (ex: 5527999999999)`;\n\n                    await sock.sendMessage(from, {\n                        text: instrucoes,\n                        contextInfo: {\n                            forwardingScore: 100000,\n                            isForwarded: true,\n                            forwardedNewsletterMessageInfo: {\n                                newsletterJid: \"120363289739581116@newsletter\",\n                                newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                            },\n                            externalAdReply: {\n                                title: \"¬© NEEXT LTDA - Sistema de IDs\",\n                                body: \"üì± Instagram: @neet.tk\",\n                                thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                                mediaType: 1,\n                                sourceUrl: \"https://www.neext.online\",\n                                showAdAttribution: true\n                            }\n                        }\n                    }, { quoted: message });\n                    break;\n                }\n\n                // Coleta os dados dos argumentos - nome pode ter espa√ßos, ent√£o pegamos os √∫ltimos 4 campos\n                const email = args[args.length - 1];\n                const instagram = args[args.length - 2];\n                const numero = args[args.length - 3];\n                const idade = args[args.length - 4];\n                const nome = args.slice(0, args.length - 4).join(' ');\n\n                // Valida√ß√µes b√°sicas\n                if (!nome || !idade || !numero || !instagram || !email) {\n                    await reply(sock, from, \"‚ùå Todos os campos s√£o obrigat√≥rios. Use o comando sem argumentos para ver as instru√ß√µes.\");\n                    break;\n                }\n\n                if (!instagram.startsWith('@')) {\n                    await reply(sock, from, \"‚ùå O Instagram deve come√ßar com @ (ex: @usuario)\");\n                    break;\n                }\n\n                if (!/^\\d{10,15}$/.test(numero)) {\n                    await reply(sock, from, \"‚ùå O telefone deve ter entre 10 e 15 d√≠gitos (ex: 5527999999999)\");\n                    break;\n                }\n\n                if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) {\n                    await reply(sock, from, \"‚ùå Email inv√°lido. Use o formato correto (ex: usuario@provedor.com)\");\n                    break;\n                }\n\n                // Reagir √† mensagem indicando processamento\n                await reagirMensagem(sock, message, \"‚è≥\");\n\n                // Preparar URL da API\n                const apiUrl = \"https://script.google.com/macros/s/AKfycbz7OnN6kyMY5tXuEgcx-M_G_Ox1fUERV6M6GwXc2fuaeE-2MZHwvLeTFuk6QoioP4aPzg/exec\";\n                const params = new URLSearchParams({\n                    action: 'create',\n                    nome: nome,\n                    idade: idade,\n                    numero: numero,\n                    instagram: instagram,\n                    email: email\n                });\n\n                // Fazer requisi√ß√£o para a API\n                const response = await axios.get(`${apiUrl}?${params.toString()}`, {\n                    timeout: 30000,\n                    headers: {\n                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n                    }\n                });\n\n                const result = response.data;\n\n                if (result.status === 'success' && result.id) {\n                    // Sucesso - reagir com ‚úÖ e enviar mensagem\n                    await reagirMensagem(sock, message, \"‚úÖ\");\n\n                    const successMessage = `üéâ *ID CRIADO COM SUCESSO!*\n\nüÜî **Seu ID:** \\`${result.id}\\`\n‚úÖ **Status:** Criado com sucesso no painel da NEEXT\n\nüìã **Dados registrados:**\nüë§ **Nome:** ${nome}\nüéÇ **Idade:** ${idade}\nüì± **Telefone:** ${numero}\nüì∏ **Instagram:** ${instagram}\nüìß **Email:** ${email}\n\n‚ö° **Sistema NEEXT LTDA**\nSeu ID foi salvo com seguran√ßa em nosso sistema!`;\n\n                    await sock.sendMessage(from, {\n                        text: successMessage,\n                        contextInfo: {\n                            forwardingScore: 100000,\n                            isForwarded: true,\n                            forwardedNewsletterMessageInfo: {\n                                newsletterJid: \"120363289739581116@newsletter\",\n                                newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                            },\n                            externalAdReply: {\n                                title: \"¬© NEEXT LTDA - ID Criado\",\n                                body: `ID: ${result.id} | Sistema NEEXT`,\n                                thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                                mediaType: 1,\n                                sourceUrl: \"https://www.neext.online\",\n                                showAdAttribution: true\n                            }\n                        }\n                    }, { quoted: selinho });\n\n                } else {\n                    // Erro na API\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await reply(sock, from, \"‚ùå Erro ao criar ID no sistema. Tente novamente em alguns minutos.\");\n                }\n\n            } catch (error) {\n                console.error(\"‚ùå Erro no comando hermitwhite:\", error);\n                await reagirMensagem(sock, message, \"‚ùå\");\n\n                if (error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {\n                    await reply(sock, from, \"‚ùå Erro de conex√£o com o servidor NEEXT. Verifique sua internet e tente novamente.\");\n                } else if (error.response?.status === 429) {\n                    await reply(sock, from, \"‚ùå Muitas tentativas. Aguarde alguns minutos e tente novamente.\");\n                } else {\n                    await reply(sock, from, \"‚ùå Erro interno ao processar cria√ß√£o de ID. Tente novamente.\");\n                }\n            }\n        }\n        break;\n\n        case \"play\": {\n            try {\n                // Verifica se foi fornecido um termo de busca\n                if (!args.length) {\n                    await reply(sock, from, `‚ùå Por favor, forne√ßa o nome da m√∫sica.\\n\\nExemplo: \\`${prefix}play 7 minutos naruto\\``);\n                    break;\n                }\n\n                const query = args.join(' ');\n\n                await reagirMensagem(sock, message, \"‚è≥\");\n                await reply(sock, from, `üéµ Buscando \"${query}\" no YouTube, aguarde...`);\n\n                // Chama a API do YouTube\n                const apiUrl = `https://api.nekolabs.my.id/downloader/youtube/play/v1?q=${encodeURIComponent(query)}`;\n                const response = await axios.get(apiUrl, {\n                    timeout: 30000,\n                    headers: {\n                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'\n                    }\n                });\n\n                if (!response.data || !response.data.status || !response.data.result) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await reply(sock, from, \"‚ùå N√£o foi poss√≠vel encontrar esta m√∫sica. Tente outro termo de busca.\");\n                    break;\n                }\n\n                const result = response.data.result;\n                const metadata = result.metadata;\n                const downloadUrl = result.downloadUrl;\n\n                if (!downloadUrl) {\n                    await reagirMensagem(sock, message, \"‚ùå\");\n                    await reply(sock, from, \"‚ùå Link de download n√£o encontrado para esta m√∫sica.\");\n                    break;\n                }\n\n                // Baixa o √°udio\n                const audioResponse = await axios({\n                    method: 'GET',\n                    url: downloadUrl,\n                    responseType: 'arraybuffer',\n                    timeout: 60000\n                });\n\n                const audioBuffer = Buffer.from(audioResponse.data);\n\n                // Baixa a thumbnail se existir\n                let thumbnailBuffer = null;\n                if (metadata.cover) {\n                    try {\n                        const thumbnailResponse = await axios({\n                            method: 'GET',\n                            url: metadata.cover,\n                            responseType: 'arraybuffer',\n                            timeout: 10000\n                        });\n                        thumbnailBuffer = Buffer.from(thumbnailResponse.data);\n                    } catch (err) {\n                        console.log(\"‚ùå Erro ao baixar thumbnail:\", err.message);\n                    }\n                }\n\n                // Prepara a caption com informa√ß√µes da m√∫sica\n                const caption = `üéµ *M√∫sica encontrada!*\n\nüìù **T√≠tulo:** ${metadata.title}\nüë§ **Canal:** ${metadata.channel}\n‚è±Ô∏è **Dura√ß√£o:** ${metadata.duration}\nüîó **URL:** ${metadata.url}\n\nüéß **Enviado com selinho2**\n¬© NEEXT LTDA`;\n\n                // Envia o √°udio com thumbnail e informa√ß√µes usando o selinho2\n                await sock.sendMessage(from, {\n                    audio: audioBuffer,\n                    mimetype: 'audio/mp4',\n                    fileName: `${metadata.title}.mp3`,\n                    caption: caption,\n                    jpegThumbnail: thumbnailBuffer,\n                    contextInfo: {\n                        forwardingScore: 100000,\n                        isForwarded: true,\n                        forwardedNewsletterMessageInfo: {\n                            newsletterJid: \"120363289739581116@newsletter\",\n                            newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                        },\n                        externalAdReply: {\n                            title: `üéµ ${metadata.title}`,\n                            body: `üé¨ ${metadata.channel} ‚Ä¢ ‚è±Ô∏è ${metadata.duration}`,\n                            thumbnailUrl: metadata.cover || \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                            mediaType: 2,\n                            sourceUrl: metadata.url,\n                            showAdAttribution: true\n                        }\n                    }\n                }, { quoted: selinho2 });\n\n                await reagirMensagem(sock, message, \"‚úÖ\");\n                console.log(`‚úÖ M√∫sica enviada: ${metadata.title} - ${metadata.channel}`);\n\n            } catch (error) {\n                console.error(\"‚ùå Erro no comando play:\", error);\n                await reagirMensagem(sock, message, \"‚ùå\");\n\n                if (error.code === 'ENOTFOUND' || error.code === 'ETIMEDOUT') {\n                    await reply(sock, from, \"‚ùå Erro de conex√£o. Verifique sua internet e tente novamente.\");\n                } else if (error.response?.status === 404) {\n                    await reply(sock, from, \"‚ùå M√∫sica n√£o encontrada. Tente um termo de busca diferente.\");\n                } else {\n                    await reply(sock, from, \"‚ùå Erro ao baixar m√∫sica. Tente novamente mais tarde.\");\n                }\n            }\n        }\n        break;\n\n        case \"menu\": {\n            try {\n                // Definir vari√°veis b√°sicas primeiro\n                const sender = message.key.participant || from;\n                const senderName = message.pushName || \"Usu√°rio\";\n\n                // Obter sauda√ß√£o baseada no hor√°rio\n                const saudacao = obterSaudacao();\n\n                // Obter informa√ß√µes do bot\n                const totalComandos = contarComandos();\n                const totalGrupos = await contarGrupos(sock);\n\n                // Obter total de registros\n                const estatisticasRegistros = registros.obterEstatisticas();\n                const totalRegistros = estatisticasRegistros.totalRegistros;\n\n                // Buscar vers√£o do Baileys do package.json\n                const packageJson = require('./package.json');\n                const versaoBaileys = packageJson.dependencies['@whiskeysockets/baileys'];\n\n                // Reagir √† mensagem\n                await reagirMensagem(sock, message, \"üìã\");\n\n                // Criar quoted do canal\n                const quotedCanal = {\n                    key: { fromMe: false, participant: `0@s.whatsapp.net`, remoteJid: idDoCanal },\n                    message: {\n                        channelMessage: {\n                            displayName: \"NEEXT LTDA\",\n                            vcard: `BEGIN:VCARD\\nVERSION:3.0\\nN:;NEEXT LTDA;;;\\nFN:NEEXT LTDA\\nORG:NEEXT LTDA\\nEND:VCARD`,\n                            sendEphemeral: true\n                        }\n                    }\n                };\n\n                // Criar quoted do arquivo PPTX\n                const quotedPptx = {\n                    key: { fromMe: false, participant: `0@s.whatsapp.net`, remoteJid: 'status@broadcast' },\n                    message: {\n                        documentMessage: {\n                            title: \"o melhor tem nome.pptx\",\n                            fileName: \"o melhor tem nome.pptx\",\n                            mimetype: \"application/vnd.ms-powerpoint\",\n                            fileLength: 107374182400000, // 100TB em bytes (fict√≠cio)\n                            pageCount: 999\n                        }\n                    }\n                };\n\n                // Montar o menu\n                const menuText = `‚ï≠‚îÄ‚îÄ„Äî ñ¶π‚àòÃ•‚∏Ω‚Éü INFORMA√á√ïES „Äï‚îÄ‚îÄ‚™©\n‚îÇ ñ¶π‚àòÃ•‚∏ΩüéØ‚Éü Prefixo: „Äå ${prefix} „Äç\n‚îÇ ñ¶π‚àòÃ•‚∏Ωüìä‚Éü Total de Comandos: ${totalComandos}\n‚îÇ ñ¶π‚àòÃ•‚∏Ωü§ñ‚Éü Nome do Bot: ${nomeDoBot}\n‚îÇ ñ¶π‚àòÃ•‚∏Ωüë§‚Éü Usu√°rio: ${senderName}\n‚îÇ ñ¶π‚àòÃ•‚∏Ωüõ†Ô∏è‚Éü Vers√£o: ${versaoBaileys}\n‚îÇ ñ¶π‚àòÃ•‚∏Ωüëë‚Éü Dono: ${nickDoDono}\n‚îÇ ñ¶π‚àòÃ•‚∏Ωüìà‚Éü Total de Grupos: ${totalGrupos}\n‚îÇ ñ¶π‚àòÃ•‚∏Ωüìù‚Éü Total Registrado: ${totalRegistros}\n‚îÇ ñ¶π‚àòÃ•‚∏ΩüéóÔ∏è‚Éü Cargo: Membro\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚™®\n\n‚ï≠‚îÄ‚îÄ„Äî MENUS DISPON√çVEIS „Äï‚îÄ‚îÄ‚™©\n‚îÇ ñßà‚àòÃ•‚∏Ωüè†‚Éü menuPrincipal\n‚îÇ ñßà‚àòÃ•‚∏Ωüé¨‚Éü menudownload\n‚îÇ ñßà‚àòÃ•‚∏ΩüñºÔ∏è‚Éü menufigurinhas\n‚îÇ ñßà‚àòÃ•‚∏Ωüîû‚Éü menuhentai\n‚îÇ ñßà‚àòÃ•‚∏Ωüõ†Ô∏è‚Éü menuadm\n‚îÇ ñßà‚àòÃ•‚∏Ωüëë‚Éü menudono\n‚îÇ ñßà‚àòÃ•‚∏Ωüéâ‚Éü menubrincadeira\n‚îÇ ñßà‚àòÃ•‚∏Ωüßë‚Äçü§ù‚Äçüßë‚Éü menuMembro\n‚îÇ ñßà‚àòÃ•‚∏ΩüéÆ‚Éü menuGamer\n‚îÇ ñßà‚àòÃ•‚∏Ωüåê‚Éü menuNeext\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚™®\n\n¬© NEEXT LTDA`;\n\n                // √önica mensagem: PPTX com caption do menu\n                await sock.sendMessage(from, {\n                    document: Buffer.from(\"o melhor tem nome\", \"utf-8\"),\n                    mimetype: \"application/vnd.ms-powerpoint\",\n                    fileName: \"o melhor tem nome.pptx\",\n                    fileLength: 107374182400000, // 100TB em bytes (fict√≠cio)\n                    pageCount: 999,\n                    caption: `${saudacao}! üëã\\n\\n${menuText}`,\n                    contextInfo: {\n                        forwardingScore: 100000,\n                        isForwarded: true,\n                        forwardedNewsletterMessageInfo: {\n                            newsletterJid: \"120363289739581116@newsletter\",\n                            newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                        },\n                        externalAdReply: {\n                            title: `${saudacao} - Menu Principal`,\n                            body: `${nomeDoBot} | ${totalComandos} comandos dispon√≠veis`,\n                            thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                            mediaType: 2,\n                            sourceUrl: \"https://www.neext.online\"\n                        }\n                    }\n                }, { quoted: selinho });\n\n            } catch (error) {\n                console.error(\"‚ùå Erro no comando menu:\", error);\n                await reagirMensagem(sock, message, \"‚ùå\");\n                await reply(sock, from, \"‚ùå Erro ao carregar o menu. Tente novamente.\");\n            }\n        }\n        break;\n\n        // ================== SISTEMA RPG - NEEXTCITY ==================\n\n        case \"rpg\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem ativar/desativar o RPG.\");\n                break;\n            }\n\n            const action = args[0]?.toLowerCase();\n            \n            if (action === \"on\") {\n                if (rpg.toggleRPG(from, true)) {\n                    await reply(sock, from, \"üéÆ **RPG ATIVADO!**\\n\\nüèôÔ∏è **Bem-vindos √† NeextCity!**\\n\\n Para come√ßar sua jornada:\\n‚Ä¢ Digite **/registrar** para se registrar\\n‚Ä¢ Escolha seu banco favorito\\n‚Ä¢ Comece a pescar, minerar e trabalhar!\\n\\n‚ú® **Comandos dispon√≠veis:**\\n‚Ä¢ `/pescar` - Pesque e ganhe gold\\n‚Ä¢ `/minerar` - Minere recursos valiosos\\n‚Ä¢ `/trabalhar` - Trabalhe por dinheiro\\n‚Ä¢ `/tigrinho` - Jogue no cassino\\n‚Ä¢ `/assalto` - Assalte outros jogadores\\n‚Ä¢ `/vermeusaldo` - Veja seu saldo\\n‚Ä¢ `/rank` - Ranking dos mais ricos\");\n                } else {\n                    await reply(sock, from, \"‚ùå Erro ao ativar o RPG.\");\n                }\n            } else if (action === \"off\") {\n                if (rpg.toggleRPG(from, false)) {\n                    await reply(sock, from, \"üéÆ **RPG DESATIVADO!**\\n\\nüëã At√© logo, NeextCity!\");\n                } else {\n                    await reply(sock, from, \"‚ùå Erro ao desativar o RPG.\");\n                }\n            } else {\n                const isAtivo = rpg.isRPGAtivo(from);\n                await reply(sock, from, `üéÆ **STATUS DO RPG**\\n\\n${isAtivo ? \"‚úÖ ATIVO\" : \"‚ùå INATIVO\"}\\n\\nüí° **Uso:** \\`${prefix}rpg on/off\\``);\n            }\n        }\n        break;\n\n        case \"registrar\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            // Verifica se RPG est√° ativo\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo. Um admin deve ativar com `\" + prefix + \"rpg on`\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            // Verifica se j√° est√° registrado\n            if (rpg.isUsuarioRegistrado(userId)) {\n                const userData = rpg.obterDadosUsuario(userId);\n                await reply(sock, from, `‚úÖ **Voc√™ j√° est√° registrado na NeextCity!**\\n\\nüë§ **Nome:** ${userData.nome}\\n${userData.banco.emoji} **Banco:** ${userData.banco.nome}\\nüí∞ **Saldo:** ${userData.saldo} Gold`);\n                break;\n            }\n\n            // Se n√£o tem argumentos, mostra como usar\n            if (args.length < 2) {\n                let bancosText = \"üè¶ **BANCOS DISPON√çVEIS:**\\n\\n\";\n                rpg.bancos.forEach((banco, index) => {\n                    bancosText += `${index + 1}. ${banco.emoji} ${banco.nome}\\n`;\n                });\n                \n                await reply(sock, from, `üèôÔ∏è **REGISTRO NA NEEXTCITY**\\n\\n${bancosText}\\nüí° **Como usar:**\\n\\`${prefix}registrar [nome] [n√∫mero_do_banco]\\`\\n\\nüìù **Exemplo:**\\n\\`${prefix}registrar Jo√£o 3\\` (para Nubank)`);\n                break;\n            }\n\n            const nome = args[0];\n            const bancoIndex = parseInt(args[1]) - 1;\n\n            if (!nome || nome.length < 2) {\n                await reply(sock, from, \"‚ùå Nome deve ter pelo menos 2 caracteres.\");\n                break;\n            }\n\n            if (isNaN(bancoIndex) || bancoIndex < 0 || bancoIndex >= rpg.bancos.length) {\n                await reply(sock, from, `‚ùå N√∫mero do banco inv√°lido. Escolha entre 1 e ${rpg.bancos.length}.`);\n                break;\n            }\n\n            const banco = rpg.bancos[bancoIndex];\n\n            if (rpg.registrarUsuario(userId, nome, banco.id)) {\n                await reply(sock, from, `üéâ **REGISTRO CONCLU√çDO!**\\n\\nüèôÔ∏è **Bem-vindo √† NeextCity!**\\n\\nüë§ **Nome:** ${nome}\\n${banco.emoji} **Banco:** ${banco.nome}\\nüí∞ **Saldo inicial:** 100 Gold\\n\\n‚ú® **Agora voc√™ pode:**\\n‚Ä¢ `/pescar` - Ganhe gold pescando\\n‚Ä¢ `/minerar` - Encontre minerais valiosos\\n‚Ä¢ `/trabalhar` - Trabalhe por dinheiro\\n‚Ä¢ `/tigrinho` - Teste sua sorte no cassino\\n‚Ä¢ `/vermeusaldo` - Veja seu progresso`);\n            } else {\n                await reply(sock, from, \"‚ùå Erro ao registrar. Tente novamente.\");\n            }\n        }\n        break;\n\n        case \"pescar\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            if (!rpg.isUsuarioRegistrado(userId)) {\n                await reply(sock, from, \"‚ùå Voc√™ precisa se registrar primeiro! Use `\" + prefix + \"registrar`\");\n                break;\n            }\n\n            const resultado = rpg.pescar(userId);\n\n            if (resultado.erro) {\n                if (resultado.erro === 'Cooldown') {\n                    await reply(sock, from, resultado.mensagem);\n                } else {\n                    await reply(sock, from, `‚ùå ${resultado.erro}`);\n                }\n                break;\n            }\n\n            // Envia resultado com imagem\n            await sock.sendMessage(from, {\n                image: { url: resultado.imagem },\n                caption: resultado.mensagem,\n                contextInfo: {\n                    forwardingScore: 100000,\n                    isForwarded: true,\n                    forwardedNewsletterMessageInfo: {\n                        newsletterJid: \"120363289739581116@newsletter\",\n                        newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                    },\n                    externalAdReply: {\n                        title: \"üé£ NeextCity - Sistema de Pesca\",\n                        body: \"¬© NEEXT LTDA\",\n                        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                        mediaType: 1,\n                        sourceUrl: \"https://www.neext.online\"\n                    }\n                }\n            }, { quoted: message });\n\n            if (resultado.sucesso) {\n                await reagirMensagem(sock, message, \"üé£\");\n            } else {\n                await reagirMensagem(sock, message, \"üíî\");\n            }\n        }\n        break;\n\n        case \"minerar\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            if (!rpg.isUsuarioRegistrado(userId)) {\n                await reply(sock, from, \"‚ùå Voc√™ precisa se registrar primeiro! Use `\" + prefix + \"registrar`\");\n                break;\n            }\n\n            const resultado = rpg.minerar(userId);\n\n            if (resultado.erro) {\n                if (resultado.erro === 'Cooldown') {\n                    await reply(sock, from, resultado.mensagem);\n                } else {\n                    await reply(sock, from, `‚ùå ${resultado.erro}`);\n                }\n                break;\n            }\n\n            // Envia resultado com imagem\n            await sock.sendMessage(from, {\n                image: { url: resultado.imagem },\n                caption: resultado.mensagem,\n                contextInfo: {\n                    forwardingScore: 100000,\n                    isForwarded: true,\n                    forwardedNewsletterMessageInfo: {\n                        newsletterJid: \"120363289739581116@newsletter\",\n                        newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                    },\n                    externalAdReply: {\n                        title: \"‚õèÔ∏è NeextCity - Sistema de Minera√ß√£o\",\n                        body: \"¬© NEEXT LTDA\",\n                        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                        mediaType: 1,\n                        sourceUrl: \"https://www.neext.online\"\n                    }\n                }\n            }, { quoted: message });\n\n            if (resultado.sucesso) {\n                await reagirMensagem(sock, message, \"‚õèÔ∏è\");\n            } else {\n                await reagirMensagem(sock, message, \"üíî\");\n            }\n        }\n        break;\n\n        case \"trabalhar\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            if (!rpg.isUsuarioRegistrado(userId)) {\n                await reply(sock, from, \"‚ùå Voc√™ precisa se registrar primeiro! Use `\" + prefix + \"registrar`\");\n                break;\n            }\n\n            const resultado = rpg.trabalhar(userId);\n\n            if (resultado.erro) {\n                if (resultado.erro === 'Cooldown') {\n                    await reply(sock, from, resultado.mensagem);\n                } else {\n                    await reply(sock, from, `‚ùå ${resultado.erro}`);\n                }\n                break;\n            }\n\n            await reply(sock, from, resultado.mensagem);\n            await reagirMensagem(sock, message, \"üíº\");\n        }\n        break;\n\n        case \"tigrinho\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            if (!rpg.isUsuarioRegistrado(userId)) {\n                await reply(sock, from, \"‚ùå Voc√™ precisa se registrar primeiro! Use `\" + prefix + \"registrar`\");\n                break;\n            }\n\n            const aposta = parseInt(args[0]);\n            if (!aposta || isNaN(aposta)) {\n                await reply(sock, from, `üé∞ **JOGO DO TIGRINHO** üêÖ\\n\\nüí° **Como jogar:**\\n\\`${prefix}tigrinho [valor]\\`\\n\\nüìù **Exemplo:**\\n\\`${prefix}tigrinho 50\\`\\n\\nüé≤ **Regras:**\\n‚Ä¢ Aposta m√≠nima: 10 Gold\\n‚Ä¢ 3 iguais = Pr√™mio maior\\n‚Ä¢ 2 iguais = Pr√™mio menor\\n‚Ä¢ üíéüíéüíé = JACKPOT! (10x)\\n‚Ä¢ üêÖüêÖüêÖ = Tigrinho! (5x)`);\n                break;\n            }\n\n            const resultado = rpg.jogarTigrinho(userId, aposta);\n\n            if (resultado.erro) {\n                await reply(sock, from, `‚ùå ${resultado.erro}`);\n                break;\n            }\n\n            await reply(sock, from, resultado.mensagem);\n            \n            if (resultado.ganhou) {\n                await reagirMensagem(sock, message, \"üéâ\");\n            } else {\n                await reagirMensagem(sock, message, \"üò¢\");\n            }\n        }\n        break;\n\n        case \"assalto\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            if (!rpg.isUsuarioRegistrado(userId)) {\n                await reply(sock, from, \"‚ùå Voc√™ precisa se registrar primeiro! Use `\" + prefix + \"registrar`\");\n                break;\n            }\n\n            // Verifica se marcou algu√©m\n            const mentionedJid = message.message?.extendedTextMessage?.contextInfo?.mentionedJid;\n            if (!mentionedJid || mentionedJid.length === 0) {\n                await reply(sock, from, `üî´ **SISTEMA DE ASSALTO**\\n\\nüí° **Como usar:**\\nMarque a pessoa que deseja assaltar\\n\\nüìù **Exemplo:**\\n\\`${prefix}assalto @usuario\\`\\n\\n‚ö†Ô∏è **Regras:**\\n‚Ä¢ Cooldown: 15 minutos\\n‚Ä¢ Chance de sucesso: 60%\\n‚Ä¢ Voc√™ rouba 20% do saldo da v√≠tima\\n‚Ä¢ Se falhar, paga multa de 30 Gold`);\n                break;\n            }\n\n            const targetId = mentionedJid[0].split('@')[0];\n            const resultado = rpg.assaltar(userId, targetId);\n\n            if (resultado.erro) {\n                if (resultado.erro === 'Cooldown') {\n                    await reply(sock, from, resultado.mensagem);\n                } else {\n                    await reply(sock, from, `‚ùå ${resultado.erro}`);\n                }\n                break;\n            }\n\n            await reply(sock, from, resultado.mensagem, mentionedJid);\n            \n            if (resultado.assalto) {\n                await reagirMensagem(sock, message, \"üí∞\");\n            } else {\n                await reagirMensagem(sock, message, \"üö®\");\n            }\n        }\n        break;\n\n        case \"vermeusaldo\": \n        case \"saldo\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const userId = sender.split('@')[0];\n\n            if (!rpg.isUsuarioRegistrado(userId)) {\n                await reply(sock, from, \"‚ùå Voc√™ precisa se registrar primeiro! Use `\" + prefix + \"registrar`\");\n                break;\n            }\n\n            const userData = rpg.obterDadosUsuario(userId);\n            const dataRegistro = new Date(userData.registrado).toLocaleDateString('pt-BR');\n\n            const extrato = `üèôÔ∏è **EXTRATO NEEXTCITY**\\n\\n` +\n                          `üë§ **Nome:** ${userData.nome}\\n` +\n                          `${userData.banco.emoji} **Banco:** ${userData.banco.nome}\\n` +\n                          `üí∞ **Saldo:** ${userData.saldo} Gold\\n` +\n                          `üìÖ **Registrado em:** ${dataRegistro}\\n\\n` +\n                          `üìä **ESTAT√çSTICAS**\\n\\n` +\n                          `üé£ **Pescas:** ${userData.pescasFeitas}\\n` +\n                          `‚õèÔ∏è **Minera√ß√µes:** ${userData.mineracoesFeitas}\\n` +\n                          `üíº **Trabalhos:** ${userData.trabalhosFeitos}\\n` +\n                          `üî´ **Assaltos:** ${userData.assaltosFeitos}\\n\\n` +\n                          `¬© NEEXT LTDA - NeextCity`;\n\n            await reply(sock, from, extrato);\n            await reagirMensagem(sock, message, \"üè¶\");\n        }\n        break;\n\n        case \"rank\":\n        case \"ranking\": {\n            // S√≥ funciona em grupos com RPG ativo\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå O sistema RPG s√≥ funciona em grupos.\");\n                break;\n            }\n\n            if (!rpg.isRPGAtivo(from)) {\n                await reply(sock, from, \"‚ùå O RPG n√£o est√° ativo neste grupo.\");\n                break;\n            }\n\n            const ranking = rpg.obterRanking();\n            await reply(sock, from, ranking.mensagem);\n            await reagirMensagem(sock, message, \"üèÜ\");\n        }\n        break;\n\n        // ================== FIM DO SISTEMA RPG ==================\n\n        // ================== COMANDOS ADMINISTRATIVOS ==================\n\n        case \"fechargrupo\":\n        case \"fechar\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para fechar o grupo.\");\n                break;\n            }\n\n            try {\n                await sock.groupSettingUpdate(from, 'announcement');\n                await reagirMensagem(sock, message, \"üîí\");\n                await reply(sock, from, \"üîí *GRUPO FECHADO!*\\n\\nApenas admins podem enviar mensagens agora.\");\n                console.log(`üîí Grupo ${from} foi fechado por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao fechar grupo:\", err);\n                await reply(sock, from, \"‚ùå Erro ao fechar o grupo. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        case \"abrirgrupo\":\n        case \"abrir\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para abrir o grupo.\");\n                break;\n            }\n\n            try {\n                await sock.groupSettingUpdate(from, 'not_announcement');\n                await reagirMensagem(sock, message, \"üîì\");\n                await reply(sock, from, \"üîì *GRUPO ABERTO!*\\n\\nTodos os membros podem enviar mensagens agora.\");\n                console.log(`üîì Grupo ${from} foi aberto por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao abrir grupo:\", err);\n                await reply(sock, from, \"‚ùå Erro ao abrir o grupo. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        case \"delmsg\":\n        case \"del\":\n        case \"delete\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para deletar mensagens.\");\n                break;\n            }\n\n            // Verifica se h√° mensagem marcada\n            const quotedMsg = message.message.extendedTextMessage?.contextInfo?.quotedMessage;\n            if (!quotedMsg) {\n                await reply(sock, from, \"‚ùå Marque uma mensagem para deletar!\");\n                break;\n            }\n\n            try {\n                const quotedKey = message.message.extendedTextMessage.contextInfo.stanzaId;\n                const quotedParticipant = message.message.extendedTextMessage.contextInfo.participant;\n                \n                const messageKey = {\n                    remoteJid: from,\n                    fromMe: false,\n                    id: quotedKey,\n                    participant: quotedParticipant\n                };\n\n                await sock.sendMessage(from, { delete: messageKey });\n                await reagirMensagem(sock, message, \"üóëÔ∏è\");\n                console.log(`üóëÔ∏è Mensagem deletada por admin ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao deletar mensagem:\", err);\n                await reply(sock, from, \"‚ùå Erro ao deletar mensagem. A mensagem pode ser muito antiga ou j√° ter sido deletada.\");\n            }\n        }\n        break;\n\n        case \"resetlink\":\n        case \"resetarlink\":\n        case \"novolink\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para resetar o link do grupo.\");\n                break;\n            }\n\n            try {\n                const newLink = await sock.groupRevokeInvite(from);\n                await reagirMensagem(sock, message, \"üîó\");\n                await reply(sock, from, `üîó *LINK DO GRUPO RESETADO!*\\n\\n‚úÖ Novo link: https://chat.whatsapp.com/${newLink}\\n\\n‚ö†Ô∏è O link anterior foi invalidado!`);\n                console.log(`üîó Link do grupo ${from} foi resetado por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao resetar link:\", err);\n                await reply(sock, from, \"‚ùå Erro ao resetar o link do grupo. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        case \"ativarsolicitacao\":\n        case \"ativarjoin\":\n        case \"reqon\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para alterar configura√ß√µes do grupo.\");\n                break;\n            }\n\n            try {\n                await sock.groupToggleEphemeral(from, false);\n                await sock.groupSettingUpdate(from, 'locked');\n                await reagirMensagem(sock, message, \"‚úÖ\");\n                await reply(sock, from, \"‚úÖ *SOLICITA√á√ÉO DE ENTRADA ATIVADA!*\\n\\nNovos membros precisar√£o da aprova√ß√£o dos admins para entrar.\");\n                console.log(`‚úÖ Solicita√ß√£o de entrada ativada no grupo ${from} por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao ativar solicita√ß√£o:\", err);\n                await reply(sock, from, \"‚ùå Erro ao ativar solicita√ß√£o de entrada. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        case \"desativarsolicitacao\":\n        case \"desativarjoin\":\n        case \"reqoff\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para alterar configura√ß√µes do grupo.\");\n                break;\n            }\n\n            try {\n                await sock.groupSettingUpdate(from, 'unlocked');\n                await reagirMensagem(sock, message, \"‚ùå\");\n                await reply(sock, from, \"‚ùå *SOLICITA√á√ÉO DE ENTRADA DESATIVADA!*\\n\\nQualquer pessoa com o link pode entrar no grupo agora.\");\n                console.log(`‚ùå Solicita√ß√£o de entrada desativada no grupo ${from} por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao desativar solicita√ß√£o:\", err);\n                await reply(sock, from, \"‚ùå Erro ao desativar solicita√ß√£o de entrada. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        case \"soloadmin\":\n        case \"adminonly\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para alterar configura√ß√µes do grupo.\");\n                break;\n            }\n\n            try {\n                await sock.groupSettingUpdate(from, 'locked');\n                await reagirMensagem(sock, message, \"üîí\");\n                await reply(sock, from, \"üîí *EDI√á√ÉO RESTRITA!*\\n\\nApenas admins podem editar as informa√ß√µes do grupo (nome, descri√ß√£o, foto).\");\n                console.log(`üîí Edi√ß√£o restrita a admins no grupo ${from} por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao restringir edi√ß√£o:\", err);\n                await reply(sock, from, \"‚ùå Erro ao restringir edi√ß√£o do grupo. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        case \"mudargrupo\":\n        case \"mudarnome\":\n        case \"renamegroup\": {\n            // S√≥ funciona em grupos\n            if (!from.endsWith('@g.us') && !from.endsWith('@lid')) {\n                await reply(sock, from, \"‚ùå Este comando s√≥ pode ser usado em grupos.\");\n                break;\n            }\n\n            const sender = message.key.participant || from;\n            const ehAdmin = await isAdmin(sock, from, sender);\n            const ehDono = isDono(sender);\n\n            if (!ehAdmin && !ehDono) {\n                await reply(sock, from, \"‚ùå Apenas admins podem usar este comando.\");\n                break;\n            }\n\n            // Verifica se bot √© admin\n            const botAdmin = await botEhAdmin(sock, from);\n            if (!botAdmin) {\n                await reply(sock, from, \"‚ùå O bot precisa ser admin para mudar o nome do grupo.\");\n                break;\n            }\n\n            const novoNome = args.join(\" \").trim();\n            if (!novoNome) {\n                await reply(sock, from, `‚ùå Use: ${prefix}mudargrupo <novo nome>\\n\\nExemplo: ${prefix}mudargrupo NEEXT LTDA - Grupo Oficial`);\n                break;\n            }\n\n            if (novoNome.length > 25) {\n                await reply(sock, from, \"‚ùå O nome do grupo deve ter no m√°ximo 25 caracteres!\");\n                break;\n            }\n\n            try {\n                await sock.groupUpdateSubject(from, novoNome);\n                await reagirMensagem(sock, message, \"‚úèÔ∏è\");\n                await reply(sock, from, `‚úèÔ∏è *NOME DO GRUPO ALTERADO!*\\n\\nüìù Novo nome: \"${novoNome}\"\\nüë§ Alterado por: @${sender.split('@')[0]}`, [sender]);\n                console.log(`‚úèÔ∏è Nome do grupo ${from} alterado para \"${novoNome}\" por ${sender.split('@')[0]}`);\n            } catch (err) {\n                console.error(\"‚ùå Erro ao alterar nome do grupo:\", err);\n                await reply(sock, from, \"‚ùå Erro ao alterar o nome do grupo. Verifique se o bot tem permiss√µes de admin.\");\n            }\n        }\n        break;\n\n        // ================== FIM DOS COMANDOS ADMINISTRATIVOS ==================\n\n        default:\n            await sock.sendMessage(from, { text: `‚ùå Comando \"${command}\" n√£o encontrado.\\n\\nDigite \"prefixo\" para ver meu prefixo ou \"${prefix}ping\" para testar.` }, { quoted: message });\n            break;\n    }\n}\n\n// Fun√ß√£o para responder palavras-chave sem prefixo\nasync function responderPalavrasChave(sock, text, from, normalized) {\n    const msg = text.toLowerCase();\n\n    if (msg === \"prefixo\") {\n        // Reage √† mensagem\n        await reagirMensagem(sock, normalized, \"üèÆ\");\n        // Envia reply QUOTANDO a mensagem original\n        await reply(sock, from, `ü§ñ Ol√°! Meu prefixo √©: ${prefix}`);\n        return true;\n    }\n\n    if (msg === \"ola\") {\n        await reagirMensagem(sock, normalized, \"üëã\");\n        await reply(sock, from, \"Ol√°! Como posso ajudar?\");\n        return true;\n    }\n\n    // voc√™ pode adicionar mais palavras-chave aqui\n    // ex: if(msg === \"ajuda\") { ... }\n\n    return false;\n}\n\n// Processa respostas do jogo Akinator\nasync function processarRespostaAkinator(sock, text, from, normalized) {\n    try {\n        // S√≥ funciona em grupos\n        if (!from.endsWith('@g.us') && !from.endsWith('@lid')) return false;\n\n        // Verifica se h√° um jogo ativo neste grupo\n        const gameData = akinator.find(game => game.id === from);\n        if (!gameData || gameData.finish === 1 || !gameData.aki) return false;\n\n        const sender = normalized.key.participant || from;\n\n        // Verifica se √© a pessoa que iniciou o jogo\n        if (gameData.jogador !== sender) return false;\n\n        // Normaliza a resposta do usu√°rio\n        const resposta = text.toLowerCase().trim();\n        let answer = null;\n\n        // Mapeia as respostas para os valores aceitos pela API do Akinator\n        switch (resposta) {\n            case 'sim':\n            case 's':\n                answer = 0; // Yes\n                break;\n            case 'n√£o':\n            case 'nao':\n            case 'n':\n                answer = 1; // No\n                break;\n            case 'n√£o sei':\n            case 'nao sei':\n            case 'ns':\n                answer = 2; // Don't know\n                break;\n            case 'provavelmente sim':\n            case 'provavel sim':\n            case 'ps':\n                answer = 3; // Probably\n                break;\n            case 'provavelmente n√£o':\n            case 'provavelmente nao':\n            case 'provavel n√£o':\n            case 'provavel nao':\n            case 'pn':\n                answer = 4; // Probably not\n                break;\n            default:\n                return false; // N√£o √© uma resposta v√°lida\n        }\n\n        await reagirMensagem(sock, normalized, \"‚è≥\");\n\n        try {\n            const aki = gameData.aki;\n\n            // Envia a resposta para o Akinator\n            await aki.step(answer);\n            gameData.step++;\n\n            // Verifica se o Akinator tem uma resposta/personagem (progresso > 80 ou mais de 78 perguntas)\n            if (aki.progress >= 80 || aki.currentStep >= 78) {\n                await aki.win();\n\n                if (aki.answers && aki.answers.length > 0) {\n                    const personagem = aki.answers[0];\n\n                    // Marca o jogo como finalizado\n                    gameData.finish = 1;\n                    salvarAkinator();\n\n                    // Envia a resposta do Akinator com imagem se dispon√≠vel\n                    const imagemPersonagem = personagem.absolute_picture_path || personagem.picture_path;\n\n                    if (imagemPersonagem && imagemPersonagem !== 'none') {\n                        await sock.sendMessage(from, {\n                            image: { url: imagemPersonagem },\n                            caption: `üßû‚Äç‚ôÇÔ∏è *AKINATOR DESCOBRIU!*\\n\\n` +\n                                    `üéØ **${personagem.name}**\\n` +\n                                    `üìù *Descri√ß√£o:* ${personagem.description || 'Personagem descoberto pelo Akinator'}\\n` +\n                                    `üéÆ *Acur√°cia:* ${Math.round(aki.progress)}%\\n\\n` +\n                                    `‚ú® O Akinator descobriu em ${aki.currentStep} perguntas!\\n` +\n                                    `üéâ Parab√©ns! Digite *.akinator* para jogar novamente.`,\n                            contextInfo: {\n                                forwardingScore: 100000,\n                                isForwarded: true,\n                                forwardedNewsletterMessageInfo: {\n                                    newsletterJid: \"120363289739581116@newsletter\",\n                                    newsletterName: \"üê¶‚Äçüî•‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùóßìãåùóüùóßùóóùóî‚¶ô‚¶ôÍú£‡æÄ\"\n                                },\n                                externalAdReply: {\n                                    title: \"¬© NEEXT LTDA - Akinator\",\n                                    body: \"üßû‚Äç‚ôÇÔ∏è O g√™nio descobriu!\",\n                                    thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                                    mediaType: 1,\n                                    sourceUrl: \"www.neext.online\"\n                                }\n                            }\n                        }, { quoted: normalized });\n                    } else {\n                        await reply(sock, from, `üßû‚Äç‚ôÇÔ∏è *AKINATOR DESCOBRIU!*\\n\\n` +\n                                              `üéØ **${personagem.name}**\\n` +\n                                              `üìù *Descri√ß√£o:* ${personagem.description || 'Personagem descoberto pelo Akinator'}\\n` +\n                                              `üéÆ *Acur√°cia:* ${Math.round(aki.progress)}%\\n\\n` +\n                                              `‚ú® O Akinator descobriu em ${aki.currentStep} perguntas!\\n` +\n                                              `üéâ Parab√©ns! Digite *.akinator* para jogar novamente.`);\n                    }\n\n                    await reagirMensagem(sock, normalized, \"üéâ\");\n\n                    // Remove o jogo da lista\n                    const gameIndex = akinator.indexOf(gameData);\n                    akinator.splice(gameIndex, 1);\n                    salvarAkinator();\n\n                } else {\n                    await reply(sock, from, \"üßû‚Äç‚ôÇÔ∏è O Akinator n√£o conseguiu descobrir desta vez! Digite *.resetaki* para tentar novamente.\");\n                    gameData.finish = 1;\n                    salvarAkinator();\n                }\n            } else {\n                // Continua o jogo com a pr√≥xima pergunta\n                await reply(sock, from, `üßû‚Äç‚ôÇÔ∏è *AKINATOR QUESTIONS:*\\n‚Ä¢ Quest√£o ${aki.currentStep + 1}: *${aki.question}*\\n\\nüí≠ *Progresso:* ${Math.round(aki.progress)}%`);\n                await reagirMensagem(sock, normalized, \"üßû‚Äç‚ôÇÔ∏è\");\n\n                salvarAkinator();\n            }\n        } catch (akinatorError) {\n            console.error(\"‚ùå Erro na API do Akinator:\", akinatorError);\n            await reagirMensagem(sock, normalized, \"‚ùå\");\n            await reply(sock, from, \"‚ùå Erro na conex√£o com o Akinator. Digite *.resetaki* para reiniciar o jogo.\");\n\n            // Remove o jogo da lista em caso de erro\n            const gameIndex = akinator.findIndex(game => game.id === from);\n            if (gameIndex !== -1) {\n                akinator.splice(gameIndex, 1);\n                salvarAkinator();\n            }\n        }\n\n        return true;\n\n    } catch (err) {\n        console.error(\"‚ùå Erro ao processar resposta do Akinator:\", err);\n        await reagirMensagem(sock, normalized, \"‚ùå\");\n        await reply(sock, from, \"‚ùå Erro ao processar sua resposta. Digite *.resetaki* para reiniciar o jogo.\");\n        return true;\n    }\n}\n\n// Cache para armazenar quem fez as √∫ltimas a√ß√µes administrativas\nconst x9ActionCache = new Map();\n\n// Cache para rastrear √∫ltimas atividades de admin (para melhor detec√ß√£o de autor)\nconst adminActivityCache = new Map();\n\n// X9 Monitor - Detecta a√ß√µes administrativas\nasync function processarX9Monitor(sock, groupId, participants, action, author = null) {\n    try {\n        const config = antiSpam.carregarConfigGrupo(groupId);\n        if (!config || !config.x9) return; // X9 n√£o est√° ativo\n        \n        // S√≥ monitora em grupos\n        if (!groupId.endsWith('@g.us') && !groupId.endsWith('@lid')) return;\n        \n        // Obt√©m metadados do grupo para verificar mudan√ßas de admin\n        const groupMetadata = await sock.groupMetadata(groupId);\n        \n        for (const participant of participants) {\n            const participantInfo = groupMetadata.participants.find(p => p.id === participant);\n            const number = participant.split('@')[0];\n            const name = participantInfo?.notify || number;\n            \n            let autorAction = author; // Usa o autor passado como par√¢metro se dispon√≠vel\n            let autorName = \"Sistema\";\n            \n            // Busca quem fez a a√ß√£o no cache se n√£o foi passado autor\n            if (!autorAction) {\n                const cacheKey = `${groupId}_${action}_${participant}`;\n                const actionData = x9ActionCache.get(cacheKey);\n                \n                if (actionData && actionData.timestamp > Date.now() - 30000) { // 30 segundos\n                    autorAction = actionData.author;\n                }\n            }\n            \n            // Se ainda n√£o tem autor, tenta detectar pelo √∫ltimo admin ativo no grupo\n            if (!autorAction) {\n                const recentActivity = adminActivityCache.get(groupId);\n                if (recentActivity && recentActivity.timestamp > Date.now() - 60000) { // 1 minuto\n                    autorAction = recentActivity.admin;\n                }\n            }\n            \n            // Se encontrou o autor, obt√©m o nome\n            if (autorAction) {\n                const autorInfo = groupMetadata.participants.find(p => p.id === autorAction);\n                autorName = autorInfo?.notify || autorAction?.split('@')[0] || \"Admin\";\n                \n                // Log de sucesso\n                console.log(`üìä X9: Autor detectado - ${autorName} (${autorAction.split('@')[0]}) fez ${action} em ${number}`);\n            } else {\n                console.log(`‚ö†Ô∏è X9: N√£o foi poss√≠vel detectar autor para ${action} de ${number} no grupo ${groupId.split('@')[0]}`);\n            }\n            \n            let mensagem = \"\";\n            let emoji = \"\";\n            let mentionedUsers = [participant];\n            \n            if (autorAction) {\n                mentionedUsers.push(autorAction);\n            }\n            \n            switch (action) {\n                case \"promote\":\n                    if (autorAction) {\n                        mensagem = `üìä *X9 MONITOR DETECTOU*\\n\\nüëë **PROMO√á√ÉO PARA ADMIN**\\n\\nüë§ @${number} foi promovido para administrador\\nüë®‚Äçüíº **Por:** @${autorAction.split('@')[0]}\\nüì± Nome: ${name}\\n‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}\\n\\nüîç Monitorando a√ß√µes administrativas...`;\n                    } else {\n                        mensagem = `üìä *X9 MONITOR DETECTOU*\\n\\nüëë **PROMO√á√ÉO PARA ADMIN**\\n\\nüë§ @${number} foi promovido para administrador\\nüë®‚Äçüíº **Por:** ${autorName}\\nüì± Nome: ${name}\\n‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}\\n\\nüîç Monitorando a√ß√µes administrativas...`;\n                    }\n                    emoji = \"üëë\";\n                    break;\n                    \n                case \"demote\":\n                    if (autorAction) {\n                        mensagem = `üìä *X9 MONITOR DETECTOU*\\n\\n‚¨áÔ∏è **REBAIXAMENTO DE ADMIN**\\n\\nüë§ @${number} foi rebaixado de administrador\\nüë®‚Äçüíº **Por:** @${autorAction.split('@')[0]}\\nüì± Nome: ${name}\\n‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}\\n\\nüîç Monitorando a√ß√µes administrativas...`;\n                    } else {\n                        mensagem = `üìä *X9 MONITOR DETECTOU*\\n\\n‚¨áÔ∏è **REBAIXAMENTO DE ADMIN**\\n\\nüë§ @${number} foi rebaixado de administrador\\nüë®‚Äçüíº **Por:** ${autorName}\\nüì± Nome: ${name}\\n‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}\\n\\nüîç Monitorando a√ß√µes administrativas...`;\n                    }\n                    emoji = \"‚¨áÔ∏è\";\n                    break;\n                    \n                case \"add\":\n                    if (autorAction) {\n                        mensagem = `üìä *X9 MONITOR DETECTOU*\\n\\n‚ûï **MEMBRO ADICIONADO**\\n\\nüë§ @${number} foi adicionado ao grupo\\nüë®‚Äçüíº **Por:** @${autorAction.split('@')[0]}\\nüì± Nome: ${name}\\n‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}\\n\\nüîç Monitorando entrada de membros...`;\n                    } else {\n                        mensagem = `üìä *X9 MONITOR DETECTOU*\\n\\n‚ûï **MEMBRO ADICIONADO**\\n\\nüë§ @${number} foi adicionado ao grupo\\nüë®‚Äçüíº **Por:** ${autorName}\\nüì± Nome: ${name}\\n‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}\\n\\nüîç Monitorando entrada de membros...`;\n                    }\n                    emoji = \"‚ûï\";\n                    break;\n                    \n                case \"remove\":\n                    if (autorAction) {\n                        mensagem = `üìä *X9 MONITOR DETECTOU*\\n\\n‚ûñ **MEMBRO REMOVIDO**\\n\\nüë§ @${number} foi removido do grupo\\nüë®‚Äçüíº **Por:** @${autorAction.split('@')[0]}\\nüì± Nome: ${name}\\n‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}\\n\\nüîç Monitorando sa√≠da de membros...`;\n                    } else {\n                        mensagem = `üìä *X9 MONITOR DETECTOU*\\n\\n‚ûñ **MEMBRO REMOVIDO**\\n\\nüë§ @${number} foi removido do grupo\\nüë®‚Äçüíº **Por:** ${autorName}\\nüì± Nome: ${name}\\n‚è∞ Hor√°rio: ${new Date().toLocaleString('pt-BR')}\\n\\nüîç Monitorando sa√≠da de membros...`;\n                    }\n                    emoji = \"‚ûñ\";\n                    break;\n            }\n            \n            if (mensagem) {\n                // Envia notifica√ß√£o do X9 Monitor\n                await sock.sendMessage(groupId, {\n                    text: mensagem,\n                    contextInfo: {\n                        mentionedJid: mentionedUsers,\n                        forwardingScore: 100000,\n                        isForwarded: true,\n                        forwardedNewsletterMessageInfo: {\n                            newsletterJid: \"120363289739581116@newsletter\",\n                            newsletterName: \"üìä‚Éù ùÜÖ‡øô‚µø◊ÇùÜÜùù¢ùù£ùù£ùù¨ùó´ìãåùüø ùó†ùó¢ùó°ùóúùóßùó¢ùó•‚¶ô‚¶ôÍú£‡æÄ\"\n                        },\n                        externalAdReply: {\n                            title: \"¬© NEEXT LTDA - X9 Monitor\",\n                            body: `${emoji} A√ß√£o detectada no grupo`,\n                            thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n                            mediaType: 1,\n                            sourceUrl: \"www.neext.online\"\n                        }\n                    }\n                });\n                \n                console.log(`üìä X9 MONITOR: ${action} detectado para ${number} no grupo ${groupId} ${autorAction ? 'por ' + autorAction.split('@')[0] : ''}`);\n            }\n            \n            // Limpa o cache ap√≥s usar\n            x9ActionCache.delete(cacheKey);\n        }\n        \n    } catch (err) {\n        console.error(\"‚ùå Erro no X9 Monitor:\", err);\n    }\n}\n\n// Fun√ß√£o para registrar atividade de admin (para melhor detec√ß√£o de autor)\nasync function registrarAtividadeAdmin(sock, message, from) {\n    try {\n        const config = antiSpam.carregarConfigGrupo(from);\n        if (!config || !config.x9) return; // X9 n√£o est√° ativo\n        \n        // S√≥ funciona em grupos\n        if (!from.endsWith('@g.us') && !from.endsWith('@lid')) return;\n        \n        const sender = message.key.participant || from;\n        \n        // Verifica se quem mandou a mensagem √© admin\n        const ehAdmin = await isAdmin(sock, from, sender);\n        if (ehAdmin) {\n            // Registra a √∫ltima atividade do admin neste grupo\n            adminActivityCache.set(from, {\n                admin: sender,\n                timestamp: Date.now()\n            });\n            \n            // Auto-limpa ap√≥s 2 minutos\n            setTimeout(() => {\n                const current = adminActivityCache.get(from);\n                if (current && current.admin === sender && current.timestamp <= Date.now() - 120000) {\n                    adminActivityCache.delete(from);\n                }\n            }, 120000);\n        }\n        \n    } catch (err) {\n        console.error(\"‚ùå Erro ao registrar atividade admin:\", err);\n    }\n}\n\n// Fun√ß√£o para detectar quem fez a√ß√µes administrativas atrav√©s de mensagens do sistema\nasync function detectarAutorAcaoX9(sock, message, from) {\n    try {\n        const config = antiSpam.carregarConfigGrupo(from);\n        if (!config || !config.x9) return; // X9 n√£o est√° ativo\n        \n        // S√≥ funciona em grupos\n        if (!from.endsWith('@g.us') && !from.endsWith('@lid')) return;\n        \n        const sender = message.key.participant || from;\n        const texto = getMessageText(message.message);\n        \n        // Detecta mensagens de sistema do WhatsApp sobre mudan√ßas de admin\n        if (texto.includes('foi promovido') || texto.includes('foi rebaixado') || \n            texto.includes('foi removido') || texto.includes('foi adicionado') ||\n            texto.includes('agora √© admin') || texto.includes('n√£o √© mais admin') ||\n            texto.includes('promoveu') || texto.includes('rebaixou') ||\n            texto.includes('removeu') || texto.includes('adicionou')) {\n            \n            // Extrai o n√∫mero da pessoa que foi afetada\n            const numeroAfetado = texto.match(/@(\\d+)/)?.[1];\n            if (numeroAfetado) {\n                const participantAfetado = numeroAfetado + '@s.whatsapp.net';\n                \n                // Determina a a√ß√£o\n                let action = '';\n                if (texto.includes('agora √© admin') || texto.includes('foi promovido') || texto.includes('promoveu')) {\n                    action = 'promote';\n                } else if (texto.includes('n√£o √© mais admin') || texto.includes('foi rebaixado') || texto.includes('rebaixou')) {\n                    action = 'demote';\n                } else if (texto.includes('foi adicionado') || texto.includes('adicionou')) {\n                    action = 'add';\n                } else if (texto.includes('foi removido') || texto.includes('removeu')) {\n                    action = 'remove';\n                }\n                \n                if (action) {\n                    // Armazena quem fez a a√ß√£o no cache\n                    const cacheKey = `${from}_${action}_${participantAfetado}`;\n                    x9ActionCache.set(cacheKey, {\n                        author: sender,\n                        timestamp: Date.now()\n                    });\n                    \n                    console.log(`üìä X9: A√ß√£o ${action} de ${participantAfetado.split('@')[0]} por ${sender.split('@')[0]} armazenada no cache`);\n                    \n                    // Auto-limpa o cache ap√≥s 30 segundos\n                    setTimeout(() => {\n                        x9ActionCache.delete(cacheKey);\n                    }, 30000);\n                }\n            }\n        }\n        \n    } catch (err) {\n        console.error(\"‚ùå Erro ao detectar autor da a√ß√£o X9:\", err);\n    }\n}\n\n// Listener de mensagens\nfunction setupListeners(sock) {\n    // Event listener para participantes do grupo (lista negra + X9 Monitor)\n    sock.ev.on(\"group-participants.update\", async (update) => {\n        try {\n            const { id: groupId, participants, action, author } = update;\n            \n            console.log(`üìä X9 Event - Grupo: ${groupId.split('@')[0]}, A√ß√£o: ${action}, Participantes: ${participants.map(p => p.split('@')[0]).join(', ')}, Autor: ${author ? author.split('@')[0] : 'n√£o detectado'}`);\n            \n            // Processamento da lista negra\n            await processarListaNegra(sock, participants, groupId, action);\n            \n            // Monitoramento X9 de a√ß√µes administrativas com autor detectado\n            await processarX9Monitor(sock, groupId, participants, action, author);\n            \n        } catch (err) {\n            console.error(\"‚ùå Erro no event listener de participantes:\", err);\n        }\n    });\n\n    sock.ev.on(\"messages.upsert\", async (msgUpdate) => {\n    const messages = msgUpdate?.messages;\n    if (!messages || !Array.isArray(messages)) return;\n\n    for (const m of messages) {\n        try {\n            if (!m.message) continue;\n            const messageId = `${m.key.remoteJid}-${m.key.id}`;\n            if (processedMessages.has(messageId)) continue;\n            processedMessages.add(messageId);\n\n            const { normalized, quoted } = normalizeMessage(m);\n            const text = getMessageText(normalized.message).trim();\n            normalized.text = text;\n\n            const from = normalized.key.remoteJid;\n\n            // logger central\n            const isCmd = text.startsWith(prefix);\n            logMensagem(normalized, text, isCmd);\n\n            // üîπ Detectar a√ß√µes administrativas X9 (antes do anti-spam para capturar o autor)\n            await detectarAutorAcaoX9(sock, normalized, from);\n            \n            // üîπ Registrar atividade de admin para X9 Monitor\n            await registrarAtividadeAdmin(sock, normalized, from);\n\n            // üîπ Verifica√ß√£o de ANTI-SPAM COMPLETO (antes de tudo)\n            const violacaoDetectada = await processarAntiSpam(sock, normalized);\n            if (violacaoDetectada) continue; // se detectou viola√ß√£o, n√£o processa mais nada\n\n            // üîπ Processamento do jogo Akinator\n            const akinatorProcessed = await processarRespostaAkinator(sock, text, from, normalized);\n            if (akinatorProcessed) continue; // se processou resposta do Akinator, n√£o processa mais nada\n\n            // üîπ Palavras-chave sem prefixo\n            const respondeu = await responderPalavrasChave(sock, text, from, normalized);\n            if (respondeu) continue; // se respondeu, n√£o processa comandos\n\n            // üîπ Comandos com prefixo\n            if (isCmd) {\n                const [cmd, ...args] = text.slice(prefix.length).trim().split(/ +/);\n                const command = cmd.toLowerCase();\n\n                // üîπ Verifica√ß√£o de registro (exceto para comando \"rg\")\n                if (command !== \"rg\") {\n                    const sender = normalized.key.participant || from;\n                    const numeroUsuario = sender.split('@')[0];\n                    \n                    if (!registros.usuarioRegistrado(numeroUsuario)) {\n                        await reagirMensagem(sock, normalized, \"üö´\");\n                        await reply(sock, from, `üö´ *ACESSO NEGADO!*\\n\\n‚ùå Voc√™ n√£o est√° registrado no sistema!\\n\\nüìù Para se registrar, digite:\\n\\`\\`\\`${prefix}rg\\`\\`\\`\\n\\n‚ö†Ô∏è Apenas usu√°rios registrados podem usar o bot!`, [sender]);\n                        continue; // N√£o processa o comando se n√£o estiver registrado\n                    }\n                }\n\n                try {\n                    await handleCommand(sock, normalized, command, args, from, quoted);\n                } catch (err) {\n                    console.error(`‚ùå Erro no comando \"${command}\":`, err);\n                    await reply(sock, from, \"‚ùå Comando falhou. Tente novamente.\");\n                }\n            }\n\n            // üîπ /s sem prefixo (comando especial)\n            else if (text.startsWith(\"/s\")) {\n                try {\n                    // üîπ Verifica√ß√£o de registro para comando /s\n                    const sender = normalized.key.participant || from;\n                    const numeroUsuario = sender.split('@')[0];\n                    \n                    if (!registros.usuarioRegistrado(numeroUsuario)) {\n                        await reagirMensagem(sock, normalized, \"üö´\");\n                        await reply(sock, from, `üö´ *ACESSO NEGADO!*\\n\\n‚ùå Voc√™ n√£o est√° registrado no sistema!\\n\\nüìù Para se registrar, digite:\\n\\`\\`\\`${prefix}rg\\`\\`\\`\\n\\n‚ö†Ô∏è Apenas usu√°rios registrados podem usar o bot!`, [sender]);\n                        continue;\n                    }\n\n                    // Verifica se tem m√≠dia marcada ou na pr√≥pria mensagem\n                    const quotedMsg = normalized.message.extendedTextMessage?.contextInfo?.quotedMessage;\n                    const hasQuotedMedia = quotedMsg && (quotedMsg.imageMessage || quotedMsg.videoMessage);\n                    const hasDirectMedia = normalized.message.imageMessage || normalized.message.videoMessage;\n\n                    if (hasQuotedMedia || hasDirectMedia) {\n                        await handleCommand(sock, normalized, \"s\", [], from, quoted);\n                    } else {\n                        await reagirMensagem(sock, normalized, \"‚ùå\");\n                        await reply(sock, from, \"‚ùå Para usar /s voc√™ precisa:\\n‚Ä¢ Marcar uma imagem/v√≠deo e digitar /s\\n‚Ä¢ Ou enviar uma imagem/v√≠deo com legenda /s\");\n                    }\n                } catch (err) {\n                    console.error(\"‚ùå Erro no comando /s:\", err);\n                    await reply(sock, from, \"‚ùå Erro ao processar comando /s\");\n                }\n            }\n\n        } catch (err) {\n            console.error(`‚ùå Erro ao processar ${m.key.id}:`, err);\n            try { \n                await sock.sendMessage(m.key.remoteJid, { text: \"‚ùå Erro interno. Tente novamente.\" }, { quoted: m }); \n            } catch (e) { \n                console.error(\"Falha ao enviar erro:\", e); \n            }\n        }\n    }\n});\n    console.log(\"‚úÖ Listener de mensagens ATIVADO ‚Äî processando TUDO (inclusive fromMe).\");\n}\n\n// Exporta para iniciar no arquivo principal de conex√£o\nmodule.exports = { handleCommand, setupListeners };","size_bytes":151315},"main.js":{"content":"#!/usr/bin/env node\n\n/**\n * WhatsApp Bot - Main Entry Point\n * This file handles the bot startup with proper error handling and reconnection logic\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Console colors for better output\nconst colors = {\n    reset: '\\x1b[0m',\n    bright: '\\x1b[1m',\n    red: '\\x1b[31m',\n    green: '\\x1b[32m',\n    yellow: '\\x1b[33m',\n    blue: '\\x1b[34m',\n    magenta: '\\x1b[35m',\n    cyan: '\\x1b[36m'\n};\n\nfunction log(message, color = colors.reset) {\n    console.log(`${color}${message}${colors.reset}`);\n}\n\nfunction logError(error) {\n    console.error(`${colors.red}‚ùå ERROR: ${error.message}${colors.reset}`);\n    if (process.env.DEBUG) {\n        console.error(error.stack);\n    }\n}\n\nfunction logInfo(message) {\n    log(`${colors.blue}‚ÑπÔ∏è  ${message}`, colors.blue);\n}\n\nfunction logSuccess(message) {\n    log(`${colors.green}‚úÖ ${message}`, colors.green);\n}\n\nfunction logWarning(message) {\n    log(`${colors.yellow}‚ö†Ô∏è  ${message}`, colors.yellow);\n}\n\nfunction ensureDirectoryExists(dir) {\n    if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true });\n        logInfo(`Created directory: ${dir}`);\n    }\n}\n\nfunction validateDependencies() {\n    const requiredDeps = [\n        '@whiskeysockets/baileys',\n        'axios',\n        'fs',\n        'path'\n    ];\n    \n    const packageJson = require('./package.json');\n    const installedDeps = { ...packageJson.dependencies, ...packageJson.devDependencies };\n    \n    for (const dep of requiredDeps) {\n        if (!installedDeps[dep] && dep !== 'fs' && dep !== 'path') {\n            throw new Error(`Required dependency \"${dep}\" is not installed. Run: npm install ${dep}`);\n        }\n    }\n    logSuccess('All dependencies validated');\n}\n\nasync function startBot() {\n    try {\n        logInfo('Starting WhatsApp Bot...');\n        \n        // Validate environment\n        validateDependencies();\n        \n        // Ensure connection directory exists\n        ensureDirectoryExists('./conexao');\n        \n        // Start the actual bot\n        require('./connect.js');\n        \n    } catch (error) {\n        logError(error);\n        process.exit(1);\n    }\n}\n\n// Handle process signals gracefully\nprocess.on('SIGINT', () => {\n    logWarning('Received SIGINT, shutting down gracefully...');\n    process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n    logWarning('Received SIGTERM, shutting down gracefully...');\n    process.exit(0);\n});\n\nprocess.on('uncaughtException', (error) => {\n    logError(error);\n    logError(new Error('Uncaught Exception - Bot will restart'));\n    process.exit(1);\n});\n\nprocess.on('unhandledRejection', (reason, promise) => {\n    logError(new Error(`Unhandled Rejection at: ${promise}, reason: ${reason}`));\n    logError(new Error('Unhandled Promise Rejection - Bot will restart'));\n    process.exit(1);\n});\n\n// Start the bot\nstartBot();","size_bytes":2873},"replit.md":{"content":"# WhatsApp Bot - NEEXT LTDA\n\n## Vis√£o Geral\nBot WhatsApp automatizado constru√≠do com Baileys, com sistema de antilink avan√ßado e funcionalidades de administra√ß√£o de grupos.\n\n## Funcionalidades Principais\n\n### ü§ñ Comandos do Bot\n- **`.ping`** - Verifica status do bot e informa√ß√µes do sistema\n- **`.hora`** - Mostra hor√°rio atual\n- **`.dono`** - Identifica o dono do bot\n- **`.marca`** - Menciona todos os membros do grupo (apenas em grupos)\n- **`.recado`** - Confirma que bot est√° ativo\n- **`.s`** - Converte imagem/v√≠deo para sticker\n- **`.hermitwhite`** - Cria ID no sistema NEEXT (requer dados pessoais)\n- **`prefixo`** - Mostra o prefixo do bot (sem prefixo)\n\n### ‚ö° Comandos Administrativos\n**Comandos exclusivos para administradores que exigem que o bot tamb√©m seja admin:**\n\n#### üîí Controle do Grupo\n- **`.fechargrupo`** ou **`.fechar`** - Fecha o grupo (apenas admins podem enviar mensagens)\n- **`.abrirgrupo`** ou **`.abrir`** - Abre o grupo (todos podem enviar mensagens)\n- **`.soloadmin`** ou **`.adminonly`** - Permite apenas admins editarem informa√ß√µes do grupo\n\n#### üóëÔ∏è Modera√ß√£o de Mensagens\n- **`.delmsg`**, **`.del`** ou **`.delete`** - Deleta mensagem marcada (use respondendo a uma mensagem)\n\n#### üîó Gerenciamento de Link\n- **`.resetlink`**, **`.resetarlink`** ou **`.novolink`** - Gera novo link de convite e invalida o anterior\n\n#### üë• Controle de Entrada\n- **`.ativarsolicitacao`**, **`.ativarjoin`** ou **`.reqon`** - Ativa aprova√ß√£o obrigat√≥ria para novos membros\n- **`.desativarsolicitacao`**, **`.desativarjoin`** ou **`.reqoff`** - Desativa aprova√ß√£o obrigat√≥ria\n\n#### ‚úèÔ∏è Edi√ß√£o do Grupo\n- **`.mudargrupo`**, **`.mudarnome`** ou **`.renamegroup [nome]`** - Altera o nome do grupo\n\n**Requisitos:**\n- ‚úÖ Usu√°rio deve ser admin do grupo\n- ‚úÖ Bot deve ser admin do grupo\n- ‚úÖ Funciona apenas em grupos\n- ‚ö†Ô∏è Se o bot n√£o for admin, ser√° exibido aviso espec√≠fico\n\n### üÜî Sistema de Cria√ß√£o de ID - NEEXT\nComando para criar IDs √∫nicos no sistema da NEEXT LTDA:\n\n#### Como Usar:\n- **`.hermitwhite [nome] [idade] [telefone] [instagram] [email]`** - Cria um novo ID\n\n#### Exemplo:\n```\n.hermitwhite Jo√£o Silva 25 5527999999999 @joao_silva joao@gmail.com\n```\n\n#### Valida√ß√µes:\n- ‚úÖ Todos os campos s√£o obrigat√≥rios\n- ‚úÖ Instagram deve incluir o @ (ex: @usuario)\n- ‚úÖ Telefone deve ter 10-15 d√≠gitos (ex: 5527999999999)\n- ‚úÖ Email deve ser v√°lido (ex: usuario@provedor.com)\n\n#### Recursos:\n- ‚úÖ Integra√ß√£o com API Google Sheets\n- ‚úÖ Gera√ß√£o autom√°tica de ID sequencial\n- ‚úÖ Valida√ß√£o completa de dados\n- ‚úÖ Mensagem de confirma√ß√£o com ID gerado\n- ‚úÖ Tratamento de erros robusto\n\n### üéÆ Jogo Akinator\nSistema de jogo interativo do Akinator (g√™nio da l√¢mpada):\n\n#### Como Usar:\n- **`.akinator`** - Inicia uma nova partida do jogo\n- **`.resetaki`** - Reseta/cancela a partida atual\n\n#### Como Jogar:\n1. Digite `.akinator` em um grupo para iniciar\n2. Responda as perguntas com: **Sim**, **N√£o**, **N√£o sei**, **Provavelmente sim** ou **Provavelmente n√£o**\n3. O Akinator tentar√° adivinhar o personagem que voc√™ est√° pensando\n4. Use `.resetaki` para cancelar o jogo a qualquer momento\n\n#### Recursos:\n- ‚úÖ Funciona apenas em grupos\n- ‚úÖ Uma partida por grupo por vez\n- ‚úÖ Controle de acesso por jogador\n- ‚úÖ Limite de uma partida por dia\n- ‚úÖ Sistema de reset para admins e quem iniciou o jogo\n- ‚úÖ Respostas inteligentes em portugu√™s\n- ‚ö†Ô∏è API pode estar sujeita a limita√ß√µes de Cloudflare\n\n### üõ°Ô∏è Sistema Antilink\nSistema completo de prote√ß√£o contra links em grupos:\n\n#### Como Usar:\n- **`.antilink on`** - Ativa antilink no grupo\n- **`.antilink off`** - Desativa antilink no grupo\n- **`.antilink`** - Verifica status atual\n\n#### Recursos:\n- ‚úÖ Detecta automaticamente links em mensagens\n- ‚úÖ Remove mensagens com links instantaneamente\n- ‚úÖ Protege admins e dono (n√£o remove suas mensagens)\n- ‚úÖ Configura√ß√£o por grupo (salva em JSON)\n- ‚úÖ Apenas admins podem ativar/desativar\n- ‚úÖ Feedback visual com rea√ß√µes e mensagens\n\n#### Links Detectados:\n- URLs com http/https\n- Links do WhatsApp (wa.me, chat.whatsapp.com)\n- Redes sociais (Instagram, Facebook, Twitter, TikTok, YouTube)\n- Telegram (t.me)\n- Discord (discord.gg)\n- E muito mais...\n\n### üîß Configura√ß√µes\nAs configura√ß√µes do bot est√£o em `settings/settings.json`:\n- **prefix**: Prefixo dos comandos (padr√£o: \".\")\n- **nomeDoBot**: Nome do bot\n- **numeroDoDono**: N√∫mero do dono do bot\n- **nickDoDono**: Apelido do dono\n\n### üìÅ Estrutura do Projeto\n- `main.js` - Script principal com tratamento de erros\n- `connect.js` - Gerenciamento de conex√£o WhatsApp\n- `index.js` - L√≥gica do bot e comandos\n- `settings/settings.json` - Configura√ß√µes do bot\n- `arquivos/` - Fun√ß√µes utilit√°rias e assets\n- `conexao/` - Arquivos de sess√£o WhatsApp (auto-gerados)\n\n### üöÄ Como Executar\nO bot √© executado automaticamente via Workflow do Replit:\n1. Conecta automaticamente ao WhatsApp\n2. Se primeira vez, solicita m√©todo de conex√£o (QR Code ou Pareamento)\n3. Processa mensagens e comandos em tempo real\n\n### üìä Logs e Monitoramento\n- Logs detalhados de todas as mensagens processadas\n- Identifica√ß√£o de comandos vs mensagens normais\n- Rastreamento de a√ß√µes do antilink\n- Tratamento de erros robusto\n\n### üîê Seguran√ßa\n- Arquivos de sess√£o exclu√≠dos do Git\n- Verifica√ß√£o de permiss√µes para comandos administrativos\n- Prote√ß√£o contra spam com cache de mensagens processadas\n\n## Altera√ß√µes Recentes\n- ‚úÖ Implementado sistema completo de antilink\n- ‚úÖ Adicionadas verifica√ß√µes de admin e dono\n- ‚úÖ Criado sistema de configura√ß√£o por grupo\n- ‚úÖ Melhorado tratamento de erros\n- ‚úÖ Adicionadas rea√ß√µes visuais aos comandos\n- ‚úÖ Configurado para funcionar no ambiente Replit\n- ‚úÖ Melhorada implementa√ß√£o do comando Pinterest\n- ‚úÖ Instaladas todas as depend√™ncias necess√°rias\n- ‚úÖ **NOVO**: Implementado jogo do Akinator com aki-api\n- ‚úÖ **NOVO**: Adicionados comandos .akinator e .resetaki\n- ‚úÖ **NOVO**: Sistema de gest√£o de partidas por grupo\n- ‚úÖ **NOVO**: Processamento inteligente de respostas do usu√°rio\n- ‚úÖ **NOVO**: Estrutura de banco de dados para jogos\n- ‚úÖ **RECENTE**: Implementados 8 comandos administrativos completos\n- ‚úÖ **RECENTE**: Sistema autom√°tico de contagem de comandos\n- ‚úÖ **RECENTE**: Controle total de grupos (abrir/fechar/resetar link)\n- ‚úÖ **RECENTE**: Modera√ß√£o avan√ßada (deletar mensagens, controlar entrada)\n- ‚úÖ **RECENTE**: Verifica√ß√µes robustas de permiss√µes admin\n\n## Estado Atual\n‚úÖ **Bot Online e Funcionando no Replit**\n‚úÖ **Antilink Implementado e Testado**\n‚úÖ **Todos os Comandos Operacionais**\n‚úÖ **Comando Pinterest Melhorado**\n‚úÖ **Workflow Configurado e Rodando**\n‚úÖ **Depend√™ncias Instaladas e Funcionando**\n‚úÖ **Stickers com Selinho Quotado Implementado**\n‚úÖ **Deployment Configurado para Produ√ß√£o (VM)**\n‚úÖ **Bot Conectado e Processando Comandos Ativamente**\n\n### üöÄ Ambiente de Produ√ß√£o\n- **Deployment Target**: VM (para conex√£o persistente)\n- **Comando de Produ√ß√£o**: `node main.js`\n- **Status**: Pronto para deploy","size_bytes":7126},"start.sh":{"content":"#!/bin/bash\n\nGREEN='\\033[1;32m'\nBLUE='\\033[0;34m'\n\nwhile :\ndo\n    # Texto de conex√£o\n    printf \"${BLUE} NEEXT LTDA ùêÇùêéùêçùêÑùêÇùêìùêÄùêçùêÉùêé, ùêÄùêÜùêîùêÄùêëùêÉùêÑ\\n\"\n\n    # Chama index.js com par√¢metro opcional\n    if [ \"$1\" = \"sim\" ]; then\n        node index.js sim\n    elif [ \"$1\" = \"n√£o\" ]; then\n        node connect.js n√£o\n    else\n        node connect.js\n    fi\n\n    # Texto de inicializa√ß√£o\n    printf \"${GREEN}„Äé NEEXT LTDA „ÄèùêàùêçùêàùêÇùêàùêÄùêçùêÉùêé  ùêçùêéùêïùêÄùêåùêÑùêçùêìùêÑ\\n\"\n\n    sleep 1\ndone","size_bytes":560},"arquivos/exif.js":{"content":"const fs = require('fs');\nconst { writeExif } = require('./sticker.js');\n\n// Fun√ß√£o para converter imagem para WebP\nasync function imageToWebp(buffer, customMetadata = {}) {\n    try {\n        // Usa a fun√ß√£o existente do sticker.js\n        const media = { data: buffer, mimetype: 'image/jpeg' };\n        const metadata = { \n            packname: customMetadata.packname || \"NEEXT LTDA\", \n            author: customMetadata.author || \"NEEXT BOT\" \n        };\n        return await writeExif(media, metadata);\n    } catch (error) {\n        console.error('Erro ao converter imagem para WebP:', error);\n        throw error;\n    }\n}\n\n// Fun√ß√£o para converter v√≠deo para WebP\nasync function videoToWebp(buffer, customMetadata = {}) {\n    try {\n        // Usa a fun√ß√£o existente do sticker.js para v√≠deos\n        const media = { data: buffer, mimetype: 'video/mp4' };\n        const metadata = { \n            packname: customMetadata.packname || \"NEEXT LTDA\", \n            author: customMetadata.author || \"NEEXT BOT\" \n        };\n        return await writeExif(media, metadata);\n    } catch (error) {\n        console.error('Erro ao converter v√≠deo para WebP:', error);\n        throw error;\n    }\n}\n\n// Fun√ß√£o para escrever EXIF em imagens com dados personalizados\nasync function writeExifImg(buffer, options = {}) {\n    try {\n        // Marca como rename para usar APENAS valores do usu√°rio\n        const packname = options.packname;\n        const author = options.author;\n        const media = { data: buffer, mimetype: 'image/jpeg' };\n        const metadata = { packname, author, _isRename: true };\n        return await writeExif(media, metadata);\n    } catch (error) {\n        console.error('Erro ao escrever EXIF na imagem:', error);\n        throw error;\n    }\n}\n\n// Fun√ß√£o para escrever EXIF em v√≠deos com dados personalizados\nasync function writeExifVid(buffer, options = {}) {\n    try {\n        // Marca como rename para usar APENAS valores do usu√°rio\n        const packname = options.packname;\n        const author = options.author;\n        const media = { data: buffer, mimetype: 'video/mp4' };\n        const metadata = { packname, author, _isRename: true };\n        return await writeExif(media, metadata);\n    } catch (error) {\n        console.error('Erro ao escrever EXIF no v√≠deo:', error);\n        console.log('üîÑ Tentando processar como imagem est√°tica...');\n        \n        // Fallback: tenta processar como imagem se falhar como v√≠deo\n        try {\n            const packname = options.packname;\n            const author = options.author;\n            const media = { data: buffer, mimetype: 'image/webp' };\n            const metadata = { packname, author, _isRename: true };\n            return await writeExif(media, metadata);\n        } catch (fallbackError) {\n            console.error('‚ùå Fallback tamb√©m falhou:', fallbackError);\n            throw error; // Lan√ßa o erro original\n        }\n    }\n}\n\nmodule.exports = {\n    imageToWebp,\n    videoToWebp,\n    writeExifImg,\n    writeExifVid\n};","size_bytes":3027},"arquivos/rename.js":{"content":"const fs = require('fs-extra');\nconst {\nimageToWebp,\nvideoToWebp,\nwriteExifImg,\nwriteExifVid\n} = require('./exif');\nconst {\ngetBuffer\n} = require('./funcoes/function.js');\n\n// Selinho para usar como quoted nos stickers\nconst selinho = {\n    key: { fromMe: false, participant: `13135550002@s.whatsapp.net`, remoteJid: 'status@broadcast' },\n    message: { contactMessage: { displayName: 'NEEXT LTDA', vcard: `BEGIN:VCARD\\nVERSION:3.0\\nN:Kuun;Flash;;;\\nFN:Flash Kuun\\nitem1.TEL;waid=13135550002:+1 (313) 555-0002\\nitem1.X-ABLabel:Mobile\\nEND:VCARD`, sendEphemeral: true } }\n};\n\nconst sendImageAsSticker = async (conn, jid, path, quoted, options = {}) => {\nlet buff = Buffer.isBuffer(path) ? path : /^data:.*?\\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\\/\\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0);\n let buffer;\n // SEMPRE usa writeExifImg para preservar metadados personalizados\n buffer = await writeExifImg(buff, options);\n\n// ContextInfo para fazer aparecer como \"enviada via an√∫ncio\"\nconst contextAnuncio = {\n    externalAdReply: {\n        title: \"¬© NEEXT LTDA\",\n        body: \"üì± Instagram: @neet.tk\",\n        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n        mediaType: 1,\n        sourceUrl: \"https://www.neext.online\",\n        showAdAttribution: true\n    }\n};\n\nawait conn.sendMessage(jid, {\n    sticker: {url: buffer}, \n    contextInfo: contextAnuncio,\n    ...options\n}, {quoted: selinho})\nreturn buffer;\n};\n\n\n\nconst sendVideoAsSticker = async (conn, jid, path, quoted, options = {}) => {\nlet buff = Buffer.isBuffer(path) ? path : /^data:.*?\\/.*?;base64,/i.test(path) ? Buffer.from(path.split`,`[1], 'base64') : /^https?:\\/\\//.test(path) ? await (await getBuffer(path)) : fs.existsSync(path) ? fs.readFileSync(path) : Buffer.alloc(0);\n let buffer;\n // SEMPRE usa writeExifVid para preservar metadados personalizados\n buffer = await writeExifVid(buff, options);\n\n// ContextInfo para fazer aparecer como \"enviada via an√∫ncio\"\nconst contextAnuncio = {\n    externalAdReply: {\n        title: \"¬© NEEXT LTDA\",\n        body: \"üì± Instagram: @neet.tk\",\n        thumbnailUrl: \"https://i.ibb.co/nqgG6z6w/IMG-20250720-WA0041-2.jpg\",\n        mediaType: 1,\n        sourceUrl: \"https://www.neext.online\",\n        showAdAttribution: true\n    }\n};\n\nawait conn.sendMessage(jid, { \n    sticker: { url: buffer }, \n    contextInfo: contextAnuncio,\n    ...options \n}, { quoted: selinho })\nreturn buffer;\n}\n\nmodule.exports = {\nsendVideoAsSticker,\nsendImageAsSticker\n};","size_bytes":2586},"arquivos/sticker.js":{"content":"const fs = require(\"fs\");\nconst { tmpdir } = require(\"os\");\nconst path = require(\"path\");\nconst Crypto = require(\"crypto\");\nconst ff = require(\"fluent-ffmpeg\");\nconst webp = require(\"node-webpmux\");\n\n// Gera arquivo tempor√°rio\nfunction getRandomFile(ext) {\n    return path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}${ext}`);\n}\n\n// Converte Buffer para WebP preservando transpar√™ncia\nasync function bufferToWebp(buffer, isVideo = false, mimetype = null) {\n    // Detecta extens√£o correta baseada no mimetype para preservar transpar√™ncia\n    let inputExt;\n    if (isVideo) {\n        inputExt = \".mp4\";\n    } else if (mimetype) {\n        if (mimetype.includes('png')) inputExt = \".png\";\n        else if (mimetype.includes('webp')) inputExt = \".webp\";\n        else if (mimetype.includes('gif')) inputExt = \".gif\";\n        else inputExt = \".jpg\";\n    } else {\n        inputExt = \".jpg\";\n    }\n\n    const input = getRandomFile(inputExt);\n    const output = getRandomFile(\".webp\");\n\n    fs.writeFileSync(input, buffer);\n\n    await new Promise((resolve, reject) => {\n        const ffmpegCommand = ff(input)\n            .on(\"error\", (err) => {\n                // Cleanup input file on error\n                if (fs.existsSync(input)) fs.unlinkSync(input);\n                reject(err);\n            })\n            .on(\"end\", () => resolve());\n\n        if (isVideo) {\n            // Para v√≠deos: m√°ximo 6 segundos, 512px, preserva transpar√™ncia\n            ffmpegCommand\n                .duration(6)\n                .addOutputOptions([\n                    \"-vcodec\", \"libwebp\",\n                    \"-vf\", \"fps=15,scale=512:512:force_original_aspect_ratio=decrease,format=rgba,pad=512:512:(ow-iw)/2:(oh-ih)/2:color=0x00000000,setsar=1\",\n                    \"-loop\", \"0\",\n                    \"-preset\", \"default\",\n                    \"-an\",\n                    \"-vsync\", \"0\",\n                    \"-q:v\", \"80\",\n                    \"-lossless\", \"0\"\n                ]);\n        } else {\n            // Para imagens: 512px, preserva transpar√™ncia, sem fps\n            ffmpegCommand\n                .addOutputOptions([\n                    \"-vcodec\", \"libwebp\",\n                    \"-vf\", \"scale=512:512:force_original_aspect_ratio=decrease,format=rgba,pad=512:512:(ow-iw)/2:(oh-ih)/2:color=0x00000000,setsar=1\",\n                    \"-loop\", \"0\",\n                    \"-preset\", \"default\",\n                    \"-an\",\n                    \"-vsync\", \"0\",\n                    \"-q:v\", \"90\"\n                ]);\n        }\n\n        ffmpegCommand\n            .toFormat(\"webp\")\n            .save(output);\n    });\n\n    // Cleanup input file\n    if (fs.existsSync(input)) fs.unlinkSync(input);\n    return output;\n}\n\n// Fun√ß√£o writeExif para compatibilidade com index.js\nasync function writeExif(media, metadata) {\n    const { mimetype, data } = media;\n    \n    // Para comando RENAME: usa EXATAMENTE os valores fornecidos sem fallbacks\n    // Para outros comandos: usa fallbacks NEEXT se n√£o houver valores\n    let packname, author, categories;\n    \n    if (metadata._isRename) {\n        // Comando rename: usa APENAS os valores fornecidos pelo usu√°rio\n        packname = metadata.packname;\n        author = metadata.author;\n        categories = metadata.categories || [\"üòé\"];\n    } else {\n        // Outros comandos: pode usar fallbacks NEEXT\n        packname = metadata.packname || \"NEEXT LTDA\";\n        author = metadata.author || \"NEEXT BOT\";\n        categories = metadata.categories || [\"üòé\"];\n    }\n    \n    // Detecta se √© v√≠deo/GIF\n    const isVideo = mimetype && (\n        mimetype.includes('video') || \n        mimetype.includes('gif') ||\n        mimetype === 'image/gif'\n    );\n    \n    const webpFile = await bufferToWebp(data, isVideo, mimetype);\n    const img = new webp.Image();\n    await img.load(webpFile);\n\n    const json = {\n        \"sticker-pack-id\": `${packname}-${Date.now()}`,\n        \"sticker-pack-name\": packname,\n        \"sticker-pack-publisher\": author,\n        \"sticker-pack-categories\": categories\n    };\n\n    const exifAttr = Buffer.from([0x49,0x49,0x2A,0x00,0x08,0x00,0x00,0x00,0x01,0x00,0x41,0x57,0x07,0x00,0x00,0x00,0x00,0x00,0x16,0x00,0x00,0x00]);\n    const jsonBuff = Buffer.from(JSON.stringify(json), \"utf-8\");\n    const exif = Buffer.concat([exifAttr, jsonBuff]);\n    exif.writeUIntLE(jsonBuff.length, 14, 4);\n\n    img.exif = exif;\n    await img.save(webpFile);\n\n    return webpFile;\n}\n\n// Cria sticker e envia (vers√£o melhorada)\nasync function createSticker(buffer, sock, from, isVideo = false) {\n    try {\n        const agora = new Date();\n        const dataHora = `${agora.toLocaleDateString('pt-BR')} ${agora.toLocaleTimeString('pt-BR')}`;\n        \n        const webpFile = await writeExif(\n            { mimetype: isVideo ? 'video/mp4' : 'image/jpeg', data: buffer },\n            { \n                packname: \"NEEXT LTDA\", \n                author: `NEEXT BOT - ${dataHora}`, \n                categories: [\"üî•\"] \n            }\n        );\n        \n        const stickerBuffer = fs.readFileSync(webpFile);\n        await sock.sendMessage(from, { sticker: stickerBuffer });\n        fs.unlinkSync(webpFile);\n        \n        console.log(\"‚úÖ Figurinha criada com sucesso!\");\n    } catch (err) {\n        console.log(\"‚ùå Erro ao criar figurinha:\", err);\n        await sock.sendMessage(from, { text: \"‚ùå Erro ao criar figurinha.\" });\n    }\n}\n\nmodule.exports = { createSticker, writeExif };","size_bytes":5439},"menus/menu.js":{"content":"","size_bytes":0},"arquivos/funcoes/function.js":{"content":"// ---------------------------\n// Pacotes\n// ---------------------------\nconst cfonts = require(\"cfonts\");\n\n// ---------------------------\n// Configura√ß√µes do Bot\n// ---------------------------\nconst settings = require(\"../../settings/settings.json\");\nconst prefix = settings.prefix || \".\";\nconst botNome = settings.nomeDoBot || \"NEEXT BOT\";\n\n// ---------------------------\n// Banner do bot\n// ---------------------------\nfunction mostrarBanner() {\n    console.clear();\n\n    // NEEXT em roxo s√≥lido\n    cfonts.say(\"NEEXT\", {\n        font: \"block\",\n        align: \"center\",\n        colors: [\"#800080\"], // roxo real\n        background: \"transparent\",\n        letterSpacing: 1,\n        space: true\n    });\n\n    // LTDA em roxo s√≥lido\n    cfonts.say(\"LTDA\", {\n        font: \"block\",\n        align: \"center\",\n        colors: [\"#800080\"], // roxo real\n        background: \"transparent\",\n        letterSpacing: 1,\n        space: true\n    });\n\n    console.log(\"\\n\");\n}\n\n// ---------------------------\n// Logs simples (sem duplica√ß√£o e sem criar arquivos)\n// ---------------------------\nconst mensagensRegistradas = new Set();\n\nfunction logMensagem(m, text = \"\", isCommand = false) {\n    const fromMe = m?.key?.fromMe || false;\n    const jid = m?.key?.remoteJid || \"\";\n    const isGroup = jid.endsWith(\"@g.us\") || jid.endsWith(\"@lid\");\n    const sender = (m?.key?.participant || jid)?.split(\"@\")[0] || \"desconhecido\";\n    const pushName = m?.pushName || \"Sem nome\";\n\n    const conteudo = text || (() => {\n        if (m?.message?.conversation) return m.message.conversation;\n        if (m?.message?.extendedTextMessage?.text) return m.message.extendedTextMessage.text;\n        if (m?.message?.imageMessage?.caption) return m.message.imageMessage.caption;\n        if (m?.message?.videoMessage?.caption) return m.message.videoMessage.caption;\n        return \"[conte√∫do n√£o suportado]\";\n    })();\n\n    // Evita duplica√ß√£o\n    const logKey = `${fromMe}-${jid}-${conteudo}`;\n    if (mensagensRegistradas.has(logKey)) return;\n    mensagensRegistradas.add(logKey);\n\n    const tipo = isCommand || (conteudo.startsWith(prefix)) ? \"[COMANDO]\" : \"[MENSAGEM]\";\n    const local = isGroup ? \"GRUPO\" : \"PV\";\n    const remetente = `${pushName} (${sender})${fromMe ? \" [EU]\" : \"\"}`;\n\n    const logText = `\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n${tipo} ${local}\nDe: ${remetente}\nConte√∫do: ${conteudo}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;\n\n    console.log(logText);\n}\n\n// ---------------------------\n// Fun√ß√£o para buscar buffer de URL\n// ---------------------------\nasync function getBuffer(url) {\n    try {\n        const response = await require('axios').get(url, { responseType: 'arraybuffer' });\n        return Buffer.from(response.data);\n    } catch (error) {\n        console.error('Erro ao buscar buffer da URL:', error);\n        throw error;\n    }\n}\n\n// Fun√ß√£o para formatar JID\nfunction formatJid(jid) {\n    return String(jid || \"\").replace(/@s\\.whatsapp\\.net|@g\\.us|@lid/g,'');\n}\n\n// ---------------------------\n// Fun√ß√£o para sauda√ß√£o baseada no hor√°rio\n// ---------------------------\nfunction obterSaudacao() {\n    const hora = new Date().getHours();\n    \n    if (hora >= 6 && hora < 12) {\n        return \"üåÖ Bom dia\";\n    } else if (hora >= 12 && hora < 18) {\n        return \"‚òÄÔ∏è Boa tarde\";\n    } else if (hora >= 18 && hora < 24) {\n        return \"üåô Boa noite\";\n    } else {\n        return \"üåÉ Boa madrugada\";\n    }\n}\n\n// ---------------------------\n// Fun√ß√£o para contar grupos\n// ---------------------------\nasync function contarGrupos(sock) {\n    try {\n        const grupos = await sock.groupFetchAllParticipating();\n        return Object.keys(grupos).length;\n    } catch (error) {\n        console.error('Erro ao contar grupos:', error);\n        return 0;\n    }\n}\n\n// ---------------------------\n// Fun√ß√£o para contar comandos automaticamente\n// ---------------------------\nfunction contarComandos() {\n    try {\n        const fs = require('fs');\n        const path = require('path');\n        \n        // L√™ o arquivo index.js\n        const indexPath = path.join(__dirname, '../../index.js');\n        const indexContent = fs.readFileSync(indexPath, 'utf8');\n        \n        // Procura por todos os cases no switch da fun√ß√£o handleCommand\n        const casePattern = /case\\s+\"([^\"]+)\"/g;\n        const matches = [];\n        let match;\n        \n        while ((match = casePattern.exec(indexContent)) !== null) {\n            // Evita duplicatas e ignora cases internos como break cases\n            if (!matches.includes(match[1])) {\n                matches.push(match[1]);\n            }\n        }\n        \n        console.log(`üìä Total de comandos encontrados automaticamente: ${matches.length}`);\n        return matches.length;\n    } catch (error) {\n        console.error('‚ùå Erro ao contar comandos automaticamente:', error);\n        // Fallback para contagem manual se houver erro\n        return 25; // estimativa atual\n    }\n}\n\n// ---------------------------\n// Exporta√ß√µes\n// ---------------------------\nmodule.exports = {\n    mostrarBanner,\n    logMensagem,\n    formatJid,\n    getBuffer,\n    obterSaudacao,\n    contarGrupos,\n    contarComandos\n};","size_bytes":5296},"arquivos/antispam.js":{"content":"// Sistema Anti-Spam Completo para WhatsApp Bot\nconst fs = require('fs');\nconst path = require('path');\n\n// Diret√≥rios do sistema\nconst GRUPOS_DIR = path.join(__dirname, '../database/grupos/ativadogrupo');\nconst CACHE_FLOOD = new Map(); // Cache para controle de flood\n\n// Utilit√°rios\nfunction formatGroupId(groupId) {\n    return groupId.replace('@g.us', '').replace('@lid', '').replace(/[^a-zA-Z0-9]/g, '_');\n}\n\n// Verifica se n√∫mero √© brasileiro\nfunction isNumeroBrasileiro(jid) {\n    if (!jid || typeof jid !== 'string') return false;\n    \n    // Remove o @s.whatsapp.net para pegar apenas o n√∫mero\n    const numero = jid.replace('@s.whatsapp.net', '');\n    \n    // Verifica se come√ßa com 55 (c√≥digo do Brasil)\n    // Formatos aceitos: 55XXXXXXXXXXX (13 d√≠gitos) ou 5511XXXXXXXXX (12 d√≠gitos para alguns casos)\n    const brasileiroRegex = /^55[1-9][0-9]{8,9}$/;\n    \n    return brasileiroRegex.test(numero);\n}\n\nfunction getGroupConfigPath(groupId) {\n    const formattedId = formatGroupId(groupId);\n    return path.join(GRUPOS_DIR, `${formattedId}.json`);\n}\n\n// Carrega configura√ß√£o de um grupo\nfunction carregarConfigGrupo(groupId) {\n    try {\n        const configPath = getGroupConfigPath(groupId);\n        if (!fs.existsSync(configPath)) {\n            return {\n                antilink: false,\n                anticontato: false,\n                antidocumento: false,\n                antivideo: false,\n                antiaudio: false,\n                antisticker: false,\n                antiflod: false,\n                antifake: false,\n                x9: false,\n                modogamer: false,\n                listanegra: [],\n                floodConfig: {\n                    maxMensagens: 5,\n                    tempoSegundos: 10\n                }\n            };\n        }\n        const data = fs.readFileSync(configPath, 'utf-8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(`‚ùå Erro ao carregar config do grupo ${groupId}:`, err);\n        return null;\n    }\n}\n\n// Salva configura√ß√£o de um grupo\nfunction salvarConfigGrupo(groupId, config) {\n    try {\n        // Garante que o diret√≥rio existe\n        if (!fs.existsSync(GRUPOS_DIR)) {\n            fs.mkdirSync(GRUPOS_DIR, { recursive: true });\n        }\n        \n        const configPath = getGroupConfigPath(groupId);\n        fs.writeFileSync(configPath, JSON.stringify(config, null, 2));\n        return true;\n    } catch (err) {\n        console.error(`‚ùå Erro ao salvar config do grupo ${groupId}:`, err);\n        return false;\n    }\n}\n\n// Detecta links na mensagem\nfunction detectarLinks(texto) {\n    if (!texto) return false;\n    const linkRegex = /((https?:\\/\\/)|(www\\.))[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)|wa.me\\/|whatsapp.com\\/|t.me\\/|chat.whatsapp.com\\/|instagram.com\\/|facebook.com\\/|twitter.com\\/|tiktok.com\\/|youtube.com\\/|discord.gg\\//i;\n    return linkRegex.test(texto);\n}\n\n// Verifica se √© contact/contato\nfunction isContactMessage(message) {\n    return !!(message.contactMessage || message.contactsArrayMessage);\n}\n\n// Verifica se √© documento\nfunction isDocumentMessage(message) {\n    return !!(message.documentMessage);\n}\n\n// Verifica se √© v√≠deo\nfunction isVideoMessage(message) {\n    return !!(message.videoMessage);\n}\n\n// Verifica se √© √°udio\nfunction isAudioMessage(message) {\n    return !!(message.audioMessage || message.pttMessage);\n}\n\n// Verifica se √© sticker\nfunction isStickerMessage(message) {\n    return !!(message.stickerMessage);\n}\n\n// Controle de flood\nfunction verificarFlood(userId, groupId, config) {\n    if (!config.antiflod) return false;\n    \n    const key = `${groupId}_${userId}`;\n    const agora = Date.now();\n    const limite = config.floodConfig.tempoSegundos * 1000;\n    \n    if (!CACHE_FLOOD.has(key)) {\n        CACHE_FLOOD.set(key, []);\n    }\n    \n    const mensagens = CACHE_FLOOD.get(key);\n    \n    // Remove mensagens antigas\n    const mensagensRecentes = mensagens.filter(timestamp => agora - timestamp < limite);\n    \n    // Adiciona nova mensagem\n    mensagensRecentes.push(agora);\n    CACHE_FLOOD.set(key, mensagensRecentes);\n    \n    // Verifica se excedeu o limite\n    return mensagensRecentes.length > config.floodConfig.maxMensagens;\n}\n\n// Limpa cache de flood periodicamente\nsetInterval(() => {\n    const agora = Date.now();\n    for (const [key, mensagens] of CACHE_FLOOD.entries()) {\n        const mensagensRecentes = mensagens.filter(timestamp => agora - timestamp < 60000); // 1 minuto\n        if (mensagensRecentes.length === 0) {\n            CACHE_FLOOD.delete(key);\n        } else {\n            CACHE_FLOOD.set(key, mensagensRecentes);\n        }\n    }\n}, 60000);\n\n// Verifica se usu√°rio est√° na lista negra\nfunction isUsuarioListaNegra(userId, groupId) {\n    const config = carregarConfigGrupo(groupId);\n    if (!config || !config.listanegra) return false;\n    return config.listanegra.includes(userId);\n}\n\n// Adiciona usu√°rio √† lista negra\nfunction adicionarListaNegra(userId, groupId) {\n    const config = carregarConfigGrupo(groupId);\n    if (!config) return false;\n    \n    if (!config.listanegra) config.listanegra = [];\n    \n    if (!config.listanegra.includes(userId)) {\n        config.listanegra.push(userId);\n        return salvarConfigGrupo(groupId, config);\n    }\n    return true; // J√° estava na lista\n}\n\n// Remove usu√°rio da lista negra\nfunction removerListaNegra(userId, groupId) {\n    const config = carregarConfigGrupo(groupId);\n    if (!config || !config.listanegra) return false;\n    \n    const index = config.listanegra.indexOf(userId);\n    if (index > -1) {\n        config.listanegra.splice(index, 1);\n        return salvarConfigGrupo(groupId, config);\n    }\n    return true; // N√£o estava na lista\n}\n\n// Ativa/desativa funcionalidade anti\nfunction toggleAntiFeature(groupId, feature, estado) {\n    const config = carregarConfigGrupo(groupId);\n    if (!config) return false;\n    \n    const validFeatures = ['antilink', 'anticontato', 'antidocumento', 'antivideo', 'antiaudio', 'antisticker', 'antiflod', 'antifake', 'x9'];\n    \n    if (!validFeatures.includes(feature)) return false;\n    \n    if (estado === 'on' || estado === 'ativar' || estado === '1') {\n        config[feature] = true;\n    } else if (estado === 'off' || estado === 'desativar' || estado === '0') {\n        config[feature] = false;\n    } else {\n        return config[feature]; // Retorna estado atual\n    }\n    \n    return salvarConfigGrupo(groupId, config) ? config[feature] : false;\n}\n\n// Processa mensagem para verificar viola√ß√µes\nfunction processarMensagem(message, groupId, userId) {\n    const config = carregarConfigGrupo(groupId);\n    if (!config) return { violacao: false };\n    \n    const violations = [];\n    \n    // Extrai texto da mensagem\n    let texto = '';\n    if (message.conversation) texto = message.conversation;\n    if (message.extendedTextMessage?.text) texto = message.extendedTextMessage.text;\n    if (message.imageMessage?.caption) texto = message.imageMessage.caption;\n    if (message.videoMessage?.caption) texto = message.videoMessage.caption;\n    \n    // Verifica antilink\n    if (config.antilink && detectarLinks(texto)) {\n        violations.push('antilink');\n    }\n    \n    // Verifica anticontato\n    if (config.anticontato && isContactMessage(message)) {\n        violations.push('anticontato');\n    }\n    \n    // Verifica antidocumento\n    if (config.antidocumento && isDocumentMessage(message)) {\n        violations.push('antidocumento');\n    }\n    \n    // Verifica antivideo\n    if (config.antivideo && isVideoMessage(message)) {\n        violations.push('antivideo');\n    }\n    \n    // Verifica antiaudio\n    if (config.antiaudio && isAudioMessage(message)) {\n        violations.push('antiaudio');\n    }\n    \n    // Verifica antisticker\n    if (config.antisticker && isStickerMessage(message)) {\n        violations.push('antisticker');\n    }\n    \n    // Verifica antiflod\n    if (verificarFlood(userId, groupId, config)) {\n        violations.push('antiflod');\n    }\n    \n    return {\n        violacao: violations.length > 0,\n        tipos: violations,\n        config\n    };\n}\n\n// Exporta todas as fun√ß√µes\nmodule.exports = {\n    // Gerenciamento de configura√ß√£o\n    carregarConfigGrupo,\n    salvarConfigGrupo,\n    \n    // Toggle de funcionalidades\n    toggleAntiFeature,\n    \n    // Lista negra\n    isUsuarioListaNegra,\n    adicionarListaNegra,\n    removerListaNegra,\n    \n    // Processamento\n    processarMensagem,\n    \n    // Detec√ß√µes espec√≠ficas\n    detectarLinks,\n    isContactMessage,\n    isDocumentMessage,\n    isVideoMessage,\n    isAudioMessage,\n    isStickerMessage,\n    verificarFlood,\n    isNumeroBrasileiro,\n    \n    // Utilit√°rios\n    formatGroupId,\n    getGroupConfigPath\n};","size_bytes":8754},"arquivos/rpg.js":{"content":"// Sistema de RPG - NeextCity\nconst fs = require('fs');\nconst path = require('path');\n\n// Caminho para o arquivo de dados do RPG\nconst rpgDataFile = path.join(__dirname, '../database/grupos/rpg_data.json');\n\n// Bancos dispon√≠veis\nconst bancos = [\n    { id: 'caixa', nome: 'üè¶ Caixa Econ√¥mica Federal', emoji: 'üè¶' },\n    { id: 'santander', nome: 'üî¥ Santander', emoji: 'üî¥' },\n    { id: 'nubank', nome: 'üíú Nubank', emoji: 'üíú' },\n    { id: 'bradesco', nome: 'üîµ Bradesco', emoji: 'üîµ' },\n    { id: 'itau', nome: 'üü† Ita√∫', emoji: 'üü†' },\n    { id: 'bb', nome: 'üü° Banco do Brasil', emoji: 'üü°' }\n];\n\n// Peixes dispon√≠veis para pesca\nconst peixes = [\n    { nome: 'Peixe Dourado', valor: 250, raridade: 'lendario', emoji: 'üêü', chance: 2 },\n    { nome: 'Salm√£o', valor: 180, raridade: 'epico', emoji: 'üêü', chance: 5 },\n    { nome: 'Atum', valor: 120, raridade: 'raro', emoji: 'üêü', chance: 10 },\n    { nome: 'Sardinha', valor: 80, raridade: 'comum', emoji: 'üêü', chance: 25 },\n    { nome: 'Til√°pia', valor: 60, raridade: 'comum', emoji: 'üêü', chance: 30 },\n    { nome: 'Bagre', valor: 40, raridade: 'comum', emoji: 'üêü', chance: 28 }\n];\n\n// Minerais dispon√≠veis para minera√ß√£o\nconst minerais = [\n    { nome: 'Diamante', valor: 500, raridade: 'lendario', emoji: 'üíé', chance: 1 },\n    { nome: 'Ouro', valor: 300, raridade: 'epico', emoji: 'ü•á', chance: 3 },\n    { nome: 'Prata', valor: 200, raridade: 'raro', emoji: 'ü•à', chance: 8 },\n    { nome: 'Ferro', valor: 100, raridade: 'comum', emoji: '‚ö°', chance: 25 },\n    { nome: 'Cobre', valor: 60, raridade: 'comum', emoji: 'üü§', chance: 35 },\n    { nome: 'Carv√£o', valor: 30, raridade: 'comum', emoji: '‚ö´', chance: 28 }\n];\n\n// Trabalhos dispon√≠veis\nconst trabalhos = [\n    { nome: 'Programador', salario: 150, emoji: 'üíª' },\n    { nome: 'M√©dico', salario: 200, emoji: 'üë®‚Äç‚öïÔ∏è' },\n    { nome: 'Professor', salario: 120, emoji: 'üë®‚Äçüè´' },\n    { nome: 'Vendedor', salario: 100, emoji: 'üë®‚Äçüíº' },\n    { nome: 'Motorista', salario: 80, emoji: 'üöó' },\n    { nome: 'Seguran√ßa', salario: 90, emoji: 'üõ°Ô∏è' }\n];\n\n// Imagens do sistema\nconst imagens = {\n    pesca: [\n        'https://i.ibb.co/TMyLLC3R/41c684278e9f0d135ebc9e256b48868a.jpg',\n        'https://i.ibb.co/DXvzXGn/20d09f32ae9946cd9ea3157f9c15185a.jpg'\n    ],\n    mineracao: [\n        'https://i.ibb.co/zWsQKzYn/fd4e0eac6d004504ca5a16413fa90ad6.jpg',\n        'https://i.ibb.co/5hyff8B4/3b938d5b6b50323e58414c9edb72053b.jpg'\n    ]\n};\n\n// Carrega dados do RPG\nfunction carregarDadosRPG() {\n    try {\n        if (!fs.existsSync(rpgDataFile)) {\n            const dir = path.dirname(rpgDataFile);\n            if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });\n            fs.writeFileSync(rpgDataFile, JSON.stringify({ grupos: {}, jogadores: {} }, null, 2));\n        }\n        const data = fs.readFileSync(rpgDataFile, 'utf-8');\n        return JSON.parse(data);\n    } catch (err) {\n        console.error('‚ùå Erro ao carregar dados RPG:', err);\n        return { grupos: {}, jogadores: {} };\n    }\n}\n\n// Salva dados do RPG\nfunction salvarDadosRPG(data) {\n    try {\n        fs.writeFileSync(rpgDataFile, JSON.stringify(data, null, 2));\n        return true;\n    } catch (err) {\n        console.error('‚ùå Erro ao salvar dados RPG:', err);\n        return false;\n    }\n}\n\n// Verifica se RPG est√° ativo no grupo\nfunction isRPGAtivo(groupId) {\n    const dados = carregarDadosRPG();\n    return dados.grupos[groupId]?.ativo || false;\n}\n\n// Ativa/desativa RPG no grupo\nfunction toggleRPG(groupId, ativo) {\n    const dados = carregarDadosRPG();\n    if (!dados.grupos[groupId]) {\n        dados.grupos[groupId] = { ativo: false, jogadores: [] };\n    }\n    dados.grupos[groupId].ativo = ativo;\n    return salvarDadosRPG(dados);\n}\n\n// Verifica se usu√°rio est√° registrado\nfunction isUsuarioRegistrado(userId) {\n    const dados = carregarDadosRPG();\n    return !!dados.jogadores[userId];\n}\n\n// Registra novo usu√°rio\nfunction registrarUsuario(userId, nome, bancoId) {\n    const dados = carregarDadosRPG();\n    const banco = bancos.find(b => b.id === bancoId);\n    if (!banco) return false;\n\n    dados.jogadores[userId] = {\n        nome: nome,\n        banco: banco,\n        saldo: 100, // Saldo inicial\n        registrado: new Date().toISOString(),\n        ultimaPesca: 0,\n        ultimaMineracao: 0,\n        ultimoTrabalho: 0,\n        ultimoAssalto: 0,\n        pescasFeitas: 0,\n        mineracoesFeitas: 0,\n        trabalhosFeitos: 0,\n        assaltosFeitos: 0\n    };\n\n    return salvarDadosRPG(dados);\n}\n\n// Obt√©m dados do usu√°rio\nfunction obterDadosUsuario(userId) {\n    const dados = carregarDadosRPG();\n    return dados.jogadores[userId] || null;\n}\n\n// Atualiza saldo do usu√°rio\nfunction atualizarSaldo(userId, novoSaldo) {\n    const dados = carregarDadosRPG();\n    if (dados.jogadores[userId]) {\n        dados.jogadores[userId].saldo = novoSaldo;\n        return salvarDadosRPG(dados);\n    }\n    return false;\n}\n\n// Verifica cooldown\nfunction verificarCooldown(ultimaAcao, tempoEspera) {\n    const agora = Date.now();\n    const tempoRestante = (ultimaAcao + tempoEspera) - agora;\n    return tempoRestante > 0 ? tempoRestante : 0;\n}\n\n// Formata tempo restante\nfunction formatarTempo(milissegundos) {\n    const segundos = Math.ceil(milissegundos / 1000);\n    const minutos = Math.floor(segundos / 60);\n    const seg = segundos % 60;\n    \n    if (minutos > 0) {\n        return `${minutos}m ${seg}s`;\n    }\n    return `${seg}s`;\n}\n\n// Sistema de Pesca\nfunction pescar(userId) {\n    const dados = carregarDadosRPG();\n    const usuario = dados.jogadores[userId];\n    if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n\n    // Verifica cooldown (5 minutos)\n    const cooldown = verificarCooldown(usuario.ultimaPesca, 5 * 60 * 1000);\n    if (cooldown > 0) {\n        return { \n            erro: 'Cooldown', \n            tempo: formatarTempo(cooldown),\n            mensagem: `üé£ Voc√™ precisa esperar **${formatarTempo(cooldown)}** para pescar novamente!`\n        };\n    }\n\n    // Chance de falha (anzol quebrar, etc.)\n    const chancefalha = Math.random() * 100;\n    if (chancefalha < 15) {\n        usuario.ultimaPesca = Date.now();\n        salvarDadosRPG(dados);\n        \n        const falhas = [\n            'üé£ Seu anzol quebrou! Que azar...',\n            'üé£ O peixe escapou! Tente novamente mais tarde.',\n            'üé£ Sua linha de pesca se embara√ßou!',\n            'üé£ Voc√™ n√£o conseguiu pescar nada desta vez.',\n            'üé£ Um peixe grande levou sua isca!'\n        ];\n        \n        return {\n            sucesso: false,\n            mensagem: falhas[Math.floor(Math.random() * falhas.length)],\n            imagem: imagens.pesca[Math.floor(Math.random() * imagens.pesca.length)]\n        };\n    }\n\n    // Determina qual peixe foi pescado\n    const rand = Math.random() * 100;\n    let chanceAcumulada = 0;\n    let peixePescado = null;\n\n    for (const peixe of peixes) {\n        chanceAcumulada += peixe.chance;\n        if (rand <= chanceAcumulada) {\n            peixePescado = peixe;\n            break;\n        }\n    }\n\n    if (!peixePescado) peixePescado = peixes[peixes.length - 1];\n\n    // Atualiza dados do usu√°rio\n    usuario.saldo += peixePescado.valor;\n    usuario.ultimaPesca = Date.now();\n    usuario.pescasFeitas++;\n    salvarDadosRPG(dados);\n\n    const raridadeEmoji = {\n        'lendario': 'üåü',\n        'epico': 'üíú',\n        'raro': 'üíô',\n        'comum': '‚ö™'\n    };\n\n    return {\n        sucesso: true,\n        peixe: peixePescado,\n        mensagem: `üé£ **PESCA REALIZADA!**\\n\\n` +\n                 `${raridadeEmoji[peixePescado.raridade]} **${peixePescado.nome}** ${peixePescado.emoji}\\n` +\n                 `üí∞ **+${peixePescado.valor} Gold**\\n` +\n                 `üè¶ **Saldo:** ${usuario.saldo} Gold\\n` +\n                 `üé£ **Pescas feitas:** ${usuario.pescasFeitas}`,\n        imagem: imagens.pesca[Math.floor(Math.random() * imagens.pesca.length)]\n    };\n}\n\n// Sistema de Minera√ß√£o\nfunction minerar(userId) {\n    const dados = carregarDadosRPG();\n    const usuario = dados.jogadores[userId];\n    if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n\n    // Verifica cooldown (7 minutos)\n    const cooldown = verificarCooldown(usuario.ultimaMineracao, 7 * 60 * 1000);\n    if (cooldown > 0) {\n        return { \n            erro: 'Cooldown', \n            tempo: formatarTempo(cooldown),\n            mensagem: `‚õèÔ∏è Voc√™ precisa esperar **${formatarTempo(cooldown)}** para minerar novamente!`\n        };\n    }\n\n    // Chance de falha (picareta quebrar, etc.)\n    const chancefalha = Math.random() * 100;\n    if (chancefalha < 20) {\n        usuario.ultimaMineracao = Date.now();\n        salvarDadosRPG(dados);\n        \n        const falhas = [\n            '‚õèÔ∏è Sua picareta quebrou na pedra!',\n            '‚õèÔ∏è Voc√™ n√£o encontrou nada nesta √°rea.',\n            '‚õèÔ∏è A mina desabou! Que azar...',\n            '‚õèÔ∏è Voc√™ se cansou e n√£o conseguiu minerar.',\n            '‚õèÔ∏è A rocha estava muito dura!'\n        ];\n        \n        return {\n            sucesso: false,\n            mensagem: falhas[Math.floor(Math.random() * falhas.length)],\n            imagem: imagens.mineracao[Math.floor(Math.random() * imagens.mineracao.length)]\n        };\n    }\n\n    // Determina qual mineral foi encontrado\n    const rand = Math.random() * 100;\n    let chanceAcumulada = 0;\n    let mineralEncontrado = null;\n\n    for (const mineral of minerais) {\n        chanceAcumulada += mineral.chance;\n        if (rand <= chanceAcumulada) {\n            mineralEncontrado = mineral;\n            break;\n        }\n    }\n\n    if (!mineralEncontrado) mineralEncontrado = minerais[minerais.length - 1];\n\n    // Atualiza dados do usu√°rio\n    usuario.saldo += mineralEncontrado.valor;\n    usuario.ultimaMineracao = Date.now();\n    usuario.mineracoesFeitas++;\n    salvarDadosRPG(dados);\n\n    const raridadeEmoji = {\n        'lendario': 'üåü',\n        'epico': 'üíú',\n        'raro': 'üíô',\n        'comum': '‚ö™'\n    };\n\n    return {\n        sucesso: true,\n        mineral: mineralEncontrado,\n        mensagem: `‚õèÔ∏è **MINERA√á√ÉO REALIZADA!**\\n\\n` +\n                 `${raridadeEmoji[mineralEncontrado.raridade]} **${mineralEncontrado.nome}** ${mineralEncontrado.emoji}\\n` +\n                 `üí∞ **+${mineralEncontrado.valor} Gold**\\n` +\n                 `üè¶ **Saldo:** ${usuario.saldo} Gold\\n` +\n                 `‚õèÔ∏è **Minera√ß√µes feitas:** ${usuario.mineracoesFeitas}`,\n        imagem: imagens.mineracao[Math.floor(Math.random() * imagens.mineracao.length)]\n    };\n}\n\n// Sistema de Trabalho\nfunction trabalhar(userId) {\n    const dados = carregarDadosRPG();\n    const usuario = dados.jogadores[userId];\n    if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n\n    // Verifica cooldown (10 minutos)\n    const cooldown = verificarCooldown(usuario.ultimoTrabalho, 10 * 60 * 1000);\n    if (cooldown > 0) {\n        return { \n            erro: 'Cooldown', \n            tempo: formatarTempo(cooldown),\n            mensagem: `üíº Voc√™ precisa esperar **${formatarTempo(cooldown)}** para trabalhar novamente!`\n        };\n    }\n\n    // Escolhe trabalho aleat√≥rio\n    const trabalho = trabalhos[Math.floor(Math.random() * trabalhos.length)];\n    \n    // Atualiza dados do usu√°rio\n    usuario.saldo += trabalho.salario;\n    usuario.ultimoTrabalho = Date.now();\n    usuario.trabalhosFeitos++;\n    salvarDadosRPG(dados);\n\n    return {\n        sucesso: true,\n        trabalho: trabalho,\n        mensagem: `üíº **TRABALHO REALIZADO!**\\n\\n` +\n                 `${trabalho.emoji} **${trabalho.nome}**\\n` +\n                 `üí∞ **+${trabalho.salario} Gold**\\n` +\n                 `üè¶ **Saldo:** ${usuario.saldo} Gold\\n` +\n                 `üíº **Trabalhos feitos:** ${usuario.trabalhosFeitos}`\n    };\n}\n\n// Jogo do Tigrinho\nfunction jogarTigrinho(userId, aposta) {\n    const dados = carregarDadosRPG();\n    const usuario = dados.jogadores[userId];\n    if (!usuario) return { erro: 'Usu√°rio n√£o registrado' };\n\n    if (aposta < 10) return { erro: 'Aposta m√≠nima √© 10 Gold' };\n    if (aposta > usuario.saldo) return { erro: 'Saldo insuficiente' };\n\n    const simbolos = ['üêÖ', 'üçé', 'üçí', 'üçã', 'üîî', 'üíé'];\n    const resultado = [\n        simbolos[Math.floor(Math.random() * simbolos.length)],\n        simbolos[Math.floor(Math.random() * simbolos.length)],\n        simbolos[Math.floor(Math.random() * simbolos.length)]\n    ];\n\n    let multiplicador = 0;\n    let ganhou = false;\n\n    // Verifica combina√ß√µes\n    if (resultado[0] === resultado[1] && resultado[1] === resultado[2]) {\n        // Tr√™s iguais\n        if (resultado[0] === 'üíé') multiplicador = 10; // Jackpot!\n        else if (resultado[0] === 'üêÖ') multiplicador = 5; // Tigrinho!\n        else multiplicador = 3;\n        ganhou = true;\n    } else if (resultado[0] === resultado[1] || resultado[1] === resultado[2] || resultado[0] === resultado[2]) {\n        // Dois iguais\n        multiplicador = 1.5;\n        ganhou = true;\n    }\n\n    let premioFinal = 0;\n    if (ganhou) {\n        premioFinal = Math.floor(aposta * multiplicador);\n        usuario.saldo = usuario.saldo - aposta + premioFinal;\n    } else {\n        usuario.saldo -= aposta;\n    }\n\n    salvarDadosRPG(dados);\n\n    return {\n        sucesso: true,\n        ganhou: ganhou,\n        resultado: resultado,\n        aposta: aposta,\n        premio: premioFinal,\n        saldo: usuario.saldo,\n        mensagem: `üé∞ **JOGO DO TIGRINHO** üêÖ\\n\\n` +\n                 `üé≤ [ ${resultado.join(' | ')} ]\\n\\n` +\n                 (ganhou ? \n                    `üéâ **VOC√ä GANHOU!**\\nüí∞ **+${premioFinal} Gold**\\n` :\n                    `üò¢ **VOC√ä PERDEU!**\\nüí∏ **-${aposta} Gold**\\n`\n                 ) +\n                 `üè¶ **Saldo:** ${usuario.saldo} Gold`\n    };\n}\n\n// Sistema de Assalto\nfunction assaltar(userId, targetId) {\n    const dados = carregarDadosRPG();\n    const usuario = dados.jogadores[userId];\n    const alvo = dados.jogadores[targetId];\n    \n    if (!usuario) return { erro: 'Voc√™ n√£o est√° registrado' };\n    if (!alvo) return { erro: 'Usu√°rio alvo n√£o est√° registrado' };\n    if (userId === targetId) return { erro: 'Voc√™ n√£o pode assaltar a si mesmo' };\n\n    // Verifica cooldown (15 minutos)\n    const cooldown = verificarCooldown(usuario.ultimoAssalto, 15 * 60 * 1000);\n    if (cooldown > 0) {\n        return { \n            erro: 'Cooldown', \n            tempo: formatarTempo(cooldown),\n            mensagem: `üî´ Voc√™ precisa esperar **${formatarTempo(cooldown)}** para assaltar novamente!`\n        };\n    }\n\n    if (alvo.saldo < 50) return { erro: 'O alvo n√£o tem Gold suficiente para ser assaltado (m√≠nimo 50)' };\n\n    // Chance de sucesso (60%)\n    const sucesso = Math.random() < 0.6;\n    const valorAssaltado = Math.floor(alvo.saldo * 0.2); // 20% do saldo do alvo\n\n    usuario.ultimoAssalto = Date.now();\n    usuario.assaltosFeitos++;\n\n    if (sucesso) {\n        usuario.saldo += valorAssaltado;\n        alvo.saldo -= valorAssaltado;\n        \n        salvarDadosRPG(dados);\n        \n        return {\n            sucesso: true,\n            assalto: true,\n            valor: valorAssaltado,\n            mensagem: `üî´ **ASSALTO BEM-SUCEDIDO!**\\n\\n` +\n                     `üí∞ **+${valorAssaltado} Gold** roubados de ${alvo.nome}\\n` +\n                     `üè¶ **Seu saldo:** ${usuario.saldo} Gold\\n` +\n                     `üî´ **Assaltos feitos:** ${usuario.assaltosFeitos}`\n        };\n    } else {\n        // Falha no assalto - perde 30 Gold como multa\n        const multa = Math.min(30, usuario.saldo);\n        usuario.saldo -= multa;\n        \n        salvarDadosRPG(dados);\n        \n        return {\n            sucesso: true,\n            assalto: false,\n            multa: multa,\n            mensagem: `üî´ **ASSALTO FALHOU!**\\n\\n` +\n                     `üö® Voc√™ foi pego e pagou **${multa} Gold** de multa!\\n` +\n                     `üè¶ **Seu saldo:** ${usuario.saldo} Gold\\n` +\n                     `üî´ **Assaltos feitos:** ${usuario.assaltosFeitos}`\n        };\n    }\n}\n\n// Sistema de Ranking\nfunction obterRanking() {\n    const dados = carregarDadosRPG();\n    const jogadores = Object.entries(dados.jogadores)\n        .map(([id, dados]) => ({ id, ...dados }))\n        .sort((a, b) => b.saldo - a.saldo)\n        .slice(0, 10); // Top 10\n\n    if (jogadores.length === 0) {\n        return { mensagem: 'üìä Nenhum jogador registrado ainda!' };\n    }\n\n    let ranking = 'üèÜ **RANKING DOS MAIS RICOS - NEEXTCITY**\\n\\n';\n    \n    jogadores.forEach((jogador, index) => {\n        const posicao = index + 1;\n        const medal = posicao === 1 ? 'ü•á' : posicao === 2 ? 'ü•à' : posicao === 3 ? 'ü•â' : `${posicao}¬∞`;\n        \n        ranking += `${medal} **${jogador.nome}**\\n`;\n        ranking += `   ${jogador.banco.emoji} ${jogador.banco.nome}\\n`;\n        ranking += `   üí∞ ${jogador.saldo} Gold\\n\\n`;\n    });\n\n    return { mensagem: ranking };\n}\n\nmodule.exports = {\n    carregarDadosRPG,\n    salvarDadosRPG,\n    isRPGAtivo,\n    toggleRPG,\n    isUsuarioRegistrado,\n    registrarUsuario,\n    obterDadosUsuario,\n    atualizarSaldo,\n    pescar,\n    minerar,\n    trabalhar,\n    jogarTigrinho,\n    assaltar,\n    obterRanking,\n    bancos\n};","size_bytes":17304},"arquivos/registros.js":{"content":"// arquivos/registros.js - Sistema de Registros do Bot\nconst fs = require('fs');\nconst path = require('path');\n\nconst registrosFile = path.join(__dirname, '../database/registros/registros.json');\n\n// Carrega dados dos registros\nfunction carregarRegistros() {\n    try {\n        if (!fs.existsSync(registrosFile)) {\n            const dir = path.dirname(registrosFile);\n            if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });\n            fs.writeFileSync(registrosFile, \"[]\");\n        }\n        const data = fs.readFileSync(registrosFile, \"utf-8\");\n        return JSON.parse(data);\n    } catch (err) {\n        console.error(\"‚ùå Erro ao carregar registros.json:\", err);\n        return [];\n    }\n}\n\n// Salva dados dos registros\nfunction salvarRegistros(registros) {\n    try {\n        fs.writeFileSync(registrosFile, JSON.stringify(registros, null, 2));\n        return true;\n    } catch (err) {\n        console.error(\"‚ùå Erro ao salvar registros.json:\", err);\n        return false;\n    }\n}\n\n// Verifica se usu√°rio est√° registrado\nfunction usuarioRegistrado(numeroUsuario) {\n    const registros = carregarRegistros();\n    return registros.some(registro => registro.numero === numeroUsuario);\n}\n\n// Registra novo usu√°rio\nfunction registrarUsuario(numeroUsuario, nomeUsuario) {\n    try {\n        const registros = carregarRegistros();\n        \n        // Verifica se j√° est√° registrado\n        if (usuarioRegistrado(numeroUsuario)) {\n            return { sucesso: false, motivo: \"j√°_registrado\" };\n        }\n\n        // Cria novo registro\n        const novoRegistro = {\n            numero: numeroUsuario,\n            nome: nomeUsuario || \"Usu√°rio\",\n            dataRegistro: new Date().toISOString(),\n            dataRegistroFormatada: new Date().toLocaleString('pt-BR'),\n            numeroRegistro: registros.length + 1\n        };\n\n        registros.push(novoRegistro);\n        \n        if (salvarRegistros(registros)) {\n            return { \n                sucesso: true, \n                registro: novoRegistro,\n                totalRegistros: registros.length\n            };\n        } else {\n            return { sucesso: false, motivo: \"erro_salvar\" };\n        }\n    } catch (err) {\n        console.error(\"‚ùå Erro ao registrar usu√°rio:\", err);\n        return { sucesso: false, motivo: \"erro_tecnico\" };\n    }\n}\n\n// Obter estat√≠sticas dos registros\nfunction obterEstatisticas() {\n    const registros = carregarRegistros();\n    return {\n        totalRegistros: registros.length,\n        ultimoRegistro: registros.length > 0 ? registros[registros.length - 1] : null\n    };\n}\n\n// Obter informa√ß√µes de um usu√°rio registrado\nfunction obterInfoUsuario(numeroUsuario) {\n    const registros = carregarRegistros();\n    return registros.find(registro => registro.numero === numeroUsuario);\n}\n\nmodule.exports = {\n    carregarRegistros,\n    salvarRegistros,\n    usuarioRegistrado,\n    registrarUsuario,\n    obterEstatisticas,\n    obterInfoUsuario\n};","size_bytes":2969}},"version":1}